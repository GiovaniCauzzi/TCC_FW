
Firmware_TCC_Master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048b4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a3c  08004a3c  00014a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a5c  08004a5c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004a5c  08004a5c  00014a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a64  08004a64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a64  08004a64  00014a64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a68  08004a68  00014a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004a6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000390  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00012e23  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027fa  00000000  00000000  00032ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011d8  00000000  00000000  000356a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e26  00000000  00000000  00036878  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000031eb  00000000  00000000  0003769e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016cb6  00000000  00000000  0003a889  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d1756  00000000  00000000  0005153f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004cbc  00000000  00000000  00122c98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000083  00000000  00000000  00127954  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a24 	.word	0x08004a24

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08004a24 	.word	0x08004a24

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b083      	sub	sp, #12
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[0];
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 80004ce:	4a08      	ldr	r2, [pc, #32]	; (80004f0 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 80004d0:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[0];
 80004d2:	4b08      	ldr	r3, [pc, #32]	; (80004f4 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 80004d4:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 80004d6:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 80004d8:	4b08      	ldr	r3, [pc, #32]	; (80004fc <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 80004da:	2201      	movs	r2, #1
 80004dc:	701a      	strb	r2, [r3, #0]
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	20000370 	.word	0x20000370
 80004f0:	20000270 	.word	0x20000270
 80004f4:	20000000 	.word	0x20000000
 80004f8:	200002f0 	.word	0x200002f0
 80004fc:	20000374 	.word	0x20000374

08000500 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000500:	b480      	push	{r7}
 8000502:	b083      	sub	sp, #12
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[dBUFFER_SIZE / 2];
 8000508:	4b07      	ldr	r3, [pc, #28]	; (8000528 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800050a:	4a08      	ldr	r2, [pc, #32]	; (800052c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 800050c:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[dBUFFER_SIZE / 2];
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000510:	4a08      	ldr	r2, [pc, #32]	; (8000534 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000512:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 8000514:	4b08      	ldr	r3, [pc, #32]	; (8000538 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000516:	2201      	movs	r2, #1
 8000518:	701a      	strb	r2, [r3, #0]
}
 800051a:	bf00      	nop
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	20000370 	.word	0x20000370
 800052c:	200002b0 	.word	0x200002b0
 8000530:	20000000 	.word	0x20000000
 8000534:	20000330 	.word	0x20000330
 8000538:	20000374 	.word	0x20000374

0800053c <processData>:
        buffer[i] = amplitude * sin(2 * M_PI * FREQUENCY * t);
    }
}

void processData()
{
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
  static float leftIn, leftOut;
  static float rightIn, rightOut;
  static uint32_t time = 0;

  if(time++ > 100000)
 8000542:	4b4c      	ldr	r3, [pc, #304]	; (8000674 <processData+0x138>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	1c5a      	adds	r2, r3, #1
 8000548:	494a      	ldr	r1, [pc, #296]	; (8000674 <processData+0x138>)
 800054a:	600a      	str	r2, [r1, #0]
 800054c:	4a4a      	ldr	r2, [pc, #296]	; (8000678 <processData+0x13c>)
 800054e:	4293      	cmp	r3, r2
 8000550:	d902      	bls.n	8000558 <processData+0x1c>
  {
	  time = 0;
 8000552:	4b48      	ldr	r3, [pc, #288]	; (8000674 <processData+0x138>)
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
  }

  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 8000558:	2300      	movs	r3, #0
 800055a:	80fb      	strh	r3, [r7, #6]
 800055c:	e07c      	b.n	8000658 <processData+0x11c>
  {

    //================ LEFT CHANNEL ================
    // Get ADC input and convert it to float
    leftIn = INT16_TO_FLOAT * inBufferPtr[n];
 800055e:	4b47      	ldr	r3, [pc, #284]	; (800067c <processData+0x140>)
 8000560:	681a      	ldr	r2, [r3, #0]
 8000562:	88fb      	ldrh	r3, [r7, #6]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	4413      	add	r3, r2
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	b21b      	sxth	r3, r3
 800056c:	ee07 3a90 	vmov	s15, r3
 8000570:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000574:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000680 <processData+0x144>
 8000578:	ee67 7a87 	vmul.f32	s15, s15, s14
 800057c:	4b41      	ldr	r3, [pc, #260]	; (8000684 <processData+0x148>)
 800057e:	edc3 7a00 	vstr	s15, [r3]
    if (leftIn > 1.0f)
 8000582:	4b40      	ldr	r3, [pc, #256]	; (8000684 <processData+0x148>)
 8000584:	edd3 7a00 	vldr	s15, [r3]
 8000588:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800058c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000590:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000594:	dd09      	ble.n	80005aa <processData+0x6e>
    {
      leftIn -= 2.0f;
 8000596:	4b3b      	ldr	r3, [pc, #236]	; (8000684 <processData+0x148>)
 8000598:	edd3 7a00 	vldr	s15, [r3]
 800059c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80005a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005a4:	4b37      	ldr	r3, [pc, #220]	; (8000684 <processData+0x148>)
 80005a6:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    leftOut = leftIn;
 80005aa:	4b36      	ldr	r3, [pc, #216]	; (8000684 <processData+0x148>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4a36      	ldr	r2, [pc, #216]	; (8000688 <processData+0x14c>)
 80005b0:	6013      	str	r3, [r2, #0]
    //leftOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);

    // Convert back to signed int  and set DAC output
    outBufferPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 80005b2:	4b35      	ldr	r3, [pc, #212]	; (8000688 <processData+0x14c>)
 80005b4:	edd3 7a00 	vldr	s15, [r3]
 80005b8:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800068c <processData+0x150>
 80005bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <processData+0x154>)
 80005c2:	681a      	ldr	r2, [r3, #0]
 80005c4:	88fb      	ldrh	r3, [r7, #6]
 80005c6:	005b      	lsls	r3, r3, #1
 80005c8:	4413      	add	r3, r2
 80005ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80005ce:	ee17 2a90 	vmov	r2, s15
 80005d2:	b212      	sxth	r2, r2
 80005d4:	801a      	strh	r2, [r3, #0]
    //outBufferPtr[n] = 0xF0F0;
    //outBufferPtr[n] = 0;

    //================ RIGHT CHANNEL ================
    // Get ADC input and convert it to float
    rightIn = INT16_TO_FLOAT * inBufferPtr[n+1];
 80005d6:	4b29      	ldr	r3, [pc, #164]	; (800067c <processData+0x140>)
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	88fb      	ldrh	r3, [r7, #6]
 80005dc:	3301      	adds	r3, #1
 80005de:	005b      	lsls	r3, r3, #1
 80005e0:	4413      	add	r3, r2
 80005e2:	881b      	ldrh	r3, [r3, #0]
 80005e4:	b21b      	sxth	r3, r3
 80005e6:	ee07 3a90 	vmov	s15, r3
 80005ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80005ee:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000680 <processData+0x144>
 80005f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005f6:	4b27      	ldr	r3, [pc, #156]	; (8000694 <processData+0x158>)
 80005f8:	edc3 7a00 	vstr	s15, [r3]
    if (rightIn > 1.0f)
 80005fc:	4b25      	ldr	r3, [pc, #148]	; (8000694 <processData+0x158>)
 80005fe:	edd3 7a00 	vldr	s15, [r3]
 8000602:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000606:	eef4 7ac7 	vcmpe.f32	s15, s14
 800060a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800060e:	dd09      	ble.n	8000624 <processData+0xe8>
    {
      rightIn -= 2.0f;
 8000610:	4b20      	ldr	r3, [pc, #128]	; (8000694 <processData+0x158>)
 8000612:	edd3 7a00 	vldr	s15, [r3]
 8000616:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800061a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800061e:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <processData+0x158>)
 8000620:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    rightOut = rightIn;
 8000624:	4b1b      	ldr	r3, [pc, #108]	; (8000694 <processData+0x158>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	4a1b      	ldr	r2, [pc, #108]	; (8000698 <processData+0x15c>)
 800062a:	6013      	str	r3, [r2, #0]
    //rightOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);

    // Convert back to signed int  and set DAC output
    outBufferPtr[n+1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <processData+0x15c>)
 800062e:	edd3 7a00 	vldr	s15, [r3]
 8000632:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800068c <processData+0x150>
 8000636:	ee67 7a87 	vmul.f32	s15, s15, s14
 800063a:	4b15      	ldr	r3, [pc, #84]	; (8000690 <processData+0x154>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	88fb      	ldrh	r3, [r7, #6]
 8000640:	3301      	adds	r3, #1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	4413      	add	r3, r2
 8000646:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800064a:	ee17 2a90 	vmov	r2, s15
 800064e:	b212      	sxth	r2, r2
 8000650:	801a      	strh	r2, [r3, #0]
  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 8000652:	88fb      	ldrh	r3, [r7, #6]
 8000654:	3302      	adds	r3, #2
 8000656:	80fb      	strh	r3, [r7, #6]
 8000658:	88fb      	ldrh	r3, [r7, #6]
 800065a:	2b1e      	cmp	r3, #30
 800065c:	f67f af7f 	bls.w	800055e <processData+0x22>
    //outBufferPtr[n+1] = 0xAAAA;
    //outBufferPtr[n+1] = 0;

  }
  flagDataReady = 0;
 8000660:	4b0e      	ldr	r3, [pc, #56]	; (800069c <processData+0x160>)
 8000662:	2200      	movs	r2, #0
 8000664:	701a      	strb	r2, [r3, #0]
}
 8000666:	bf00      	nop
 8000668:	370c      	adds	r7, #12
 800066a:	46bd      	mov	sp, r7
 800066c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000670:	4770      	bx	lr
 8000672:	bf00      	nop
 8000674:	20000378 	.word	0x20000378
 8000678:	000186a0 	.word	0x000186a0
 800067c:	20000370 	.word	0x20000370
 8000680:	38000000 	.word	0x38000000
 8000684:	2000037c 	.word	0x2000037c
 8000688:	20000380 	.word	0x20000380
 800068c:	47000000 	.word	0x47000000
 8000690:	20000000 	.word	0x20000000
 8000694:	20000384 	.word	0x20000384
 8000698:	20000388 	.word	0x20000388
 800069c:	20000374 	.word	0x20000374

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  uint16_t blinkTimer = 250; //1ms steps
 80006a6:	23fa      	movs	r3, #250	; 0xfa
 80006a8:	80fb      	strh	r3, [r7, #6]
  uint16_t blinkCount = 0;
 80006aa:	2300      	movs	r3, #0
 80006ac:	80bb      	strh	r3, [r7, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fd4b 	bl	8001148 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f843 	bl	800073c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f000 f9cf 	bl	8000a58 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ba:	f000 f9a5 	bl	8000a08 <MX_DMA_Init>
  MX_I2C2_Init();
 80006be:	f000 f8f9 	bl	80008b4 <MX_I2C2_Init>
  MX_I2S2_Init();
 80006c2:	f000 f925 	bl	8000910 <MX_I2S2_Init>
  MX_ADC1_Init();
 80006c6:	f000 f8a3 	bl	8000810 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80006ca:	f000 f973 	bl	80009b4 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 80006ce:	f000 f94d 	bl	800096c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  //codec_init(&hi2c2);
  //codec_init_teste(&hi2c2);
  HAL_TIM_Base_Start_IT(&htim14);
 80006d2:	4813      	ldr	r0, [pc, #76]	; (8000720 <main+0x80>)
 80006d4:	f003 fc64 	bl	8003fa0 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef status = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)dacData, (uint16_t *)adcData, dBUFFER_SIZE);
 80006d8:	2340      	movs	r3, #64	; 0x40
 80006da:	4a12      	ldr	r2, [pc, #72]	; (8000724 <main+0x84>)
 80006dc:	4912      	ldr	r1, [pc, #72]	; (8000728 <main+0x88>)
 80006de:	4813      	ldr	r0, [pc, #76]	; (800072c <main+0x8c>)
 80006e0:	f002 f9e2 	bl	8002aa8 <HAL_I2SEx_TransmitReceive_DMA>
 80006e4:	4603      	mov	r3, r0
 80006e6:	70fb      	strb	r3, [r7, #3]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (flagDataReady)
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <main+0x90>)
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d003      	beq.n	80006f8 <main+0x58>
    {
		processData();
 80006f0:	f7ff ff24 	bl	800053c <processData>
		blinkTimer = 50;
 80006f4:	2332      	movs	r3, #50	; 0x32
 80006f6:	80fb      	strh	r3, [r7, #6]
    }

    if (GL_timer_1ms)
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <main+0x94>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d0f3      	beq.n	80006e8 <main+0x48>
    {
      GL_timer_1ms = 0;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <main+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]

      if(blinkCount++ >= blinkTimer)
 8000706:	88bb      	ldrh	r3, [r7, #4]
 8000708:	1c5a      	adds	r2, r3, #1
 800070a:	80ba      	strh	r2, [r7, #4]
 800070c:	88fa      	ldrh	r2, [r7, #6]
 800070e:	429a      	cmp	r2, r3
 8000710:	d8ea      	bhi.n	80006e8 <main+0x48>
      {
        blinkCount = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	80bb      	strh	r3, [r7, #4]
        HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 8000716:	2180      	movs	r1, #128	; 0x80
 8000718:	4807      	ldr	r0, [pc, #28]	; (8000738 <main+0x98>)
 800071a:	f001 fe20 	bl	800235e <HAL_GPIO_TogglePin>
    if (flagDataReady)
 800071e:	e7e3      	b.n	80006e8 <main+0x48>
 8000720:	200001e4 	.word	0x200001e4
 8000724:	20000270 	.word	0x20000270
 8000728:	200002f0 	.word	0x200002f0
 800072c:	200000dc 	.word	0x200000dc
 8000730:	20000374 	.word	0x20000374
 8000734:	20000030 	.word	0x20000030
 8000738:	40020400 	.word	0x40020400

0800073c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b094      	sub	sp, #80	; 0x50
 8000740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000742:	f107 0320 	add.w	r3, r7, #32
 8000746:	2230      	movs	r2, #48	; 0x30
 8000748:	2100      	movs	r1, #0
 800074a:	4618      	mov	r0, r3
 800074c:	f004 f93e 	bl	80049cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000750:	f107 030c 	add.w	r3, r7, #12
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	4b28      	ldr	r3, [pc, #160]	; (8000808 <SystemClock_Config+0xcc>)
 8000766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000768:	4a27      	ldr	r2, [pc, #156]	; (8000808 <SystemClock_Config+0xcc>)
 800076a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076e:	6413      	str	r3, [r2, #64]	; 0x40
 8000770:	4b25      	ldr	r3, [pc, #148]	; (8000808 <SystemClock_Config+0xcc>)
 8000772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000774:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800077c:	2300      	movs	r3, #0
 800077e:	607b      	str	r3, [r7, #4]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <SystemClock_Config+0xd0>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <SystemClock_Config+0xd0>)
 8000786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <SystemClock_Config+0xd0>)
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000798:	2301      	movs	r3, #1
 800079a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800079c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007a0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007a2:	2302      	movs	r3, #2
 80007a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80007ac:	230d      	movs	r3, #13
 80007ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80007b0:	23a8      	movs	r3, #168	; 0xa8
 80007b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007b4:	2302      	movs	r3, #2
 80007b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80007b8:	2304      	movs	r3, #4
 80007ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007bc:	f107 0320 	add.w	r3, r7, #32
 80007c0:	4618      	mov	r0, r3
 80007c2:	f002 fe05 	bl	80033d0 <HAL_RCC_OscConfig>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007cc:	f000 fa14 	bl	8000bf8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d0:	230f      	movs	r3, #15
 80007d2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d4:	2302      	movs	r3, #2
 80007d6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007d8:	2300      	movs	r3, #0
 80007da:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007dc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007e0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	2105      	movs	r1, #5
 80007ee:	4618      	mov	r0, r3
 80007f0:	f003 f866 	bl	80038c0 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007fa:	f000 f9fd 	bl	8000bf8 <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3750      	adds	r7, #80	; 0x50
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40007000 	.word	0x40007000

08000810 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b084      	sub	sp, #16
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000816:	463b      	mov	r3, r7
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
 800081e:	609a      	str	r2, [r3, #8]
 8000820:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000822:	4b21      	ldr	r3, [pc, #132]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000824:	4a21      	ldr	r2, [pc, #132]	; (80008ac <MX_ADC1_Init+0x9c>)
 8000826:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000828:	4b1f      	ldr	r3, [pc, #124]	; (80008a8 <MX_ADC1_Init+0x98>)
 800082a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800082e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000830:	4b1d      	ldr	r3, [pc, #116]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000836:	4b1c      	ldr	r3, [pc, #112]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000838:	2200      	movs	r2, #0
 800083a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800083c:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <MX_ADC1_Init+0x98>)
 800083e:	2200      	movs	r2, #0
 8000840:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000842:	4b19      	ldr	r3, [pc, #100]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000844:	2200      	movs	r2, #0
 8000846:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800084a:	4b17      	ldr	r3, [pc, #92]	; (80008a8 <MX_ADC1_Init+0x98>)
 800084c:	2200      	movs	r2, #0
 800084e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000850:	4b15      	ldr	r3, [pc, #84]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <MX_ADC1_Init+0xa0>)
 8000854:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000856:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800085c:	4b12      	ldr	r3, [pc, #72]	; (80008a8 <MX_ADC1_Init+0x98>)
 800085e:	2201      	movs	r2, #1
 8000860:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000862:	4b11      	ldr	r3, [pc, #68]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000864:	2200      	movs	r2, #0
 8000866:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800086a:	4b0f      	ldr	r3, [pc, #60]	; (80008a8 <MX_ADC1_Init+0x98>)
 800086c:	2201      	movs	r2, #1
 800086e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000870:	480d      	ldr	r0, [pc, #52]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000872:	f000 fcdb 	bl	800122c <HAL_ADC_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800087c:	f000 f9bc 	bl	8000bf8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000880:	2301      	movs	r3, #1
 8000882:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000884:	2301      	movs	r3, #1
 8000886:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000888:	2300      	movs	r3, #0
 800088a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800088c:	463b      	mov	r3, r7
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_ADC1_Init+0x98>)
 8000892:	f000 fd0f 	bl	80012b4 <HAL_ADC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800089c:	f000 f9ac 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000040 	.word	0x20000040
 80008ac:	40012000 	.word	0x40012000
 80008b0:	0f000001 	.word	0x0f000001

080008b4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C2_Init+0x50>)
 80008ba:	4a13      	ldr	r2, [pc, #76]	; (8000908 <MX_I2C2_Init+0x54>)
 80008bc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C2_Init+0x50>)
 80008c0:	4a12      	ldr	r2, [pc, #72]	; (800090c <MX_I2C2_Init+0x58>)
 80008c2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C2_Init+0x50>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C2_Init+0x50>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d0:	4b0c      	ldr	r3, [pc, #48]	; (8000904 <MX_I2C2_Init+0x50>)
 80008d2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008d6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008d8:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C2_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <MX_I2C2_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e4:	4b07      	ldr	r3, [pc, #28]	; (8000904 <MX_I2C2_Init+0x50>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <MX_I2C2_Init+0x50>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <MX_I2C2_Init+0x50>)
 80008f2:	f001 fd4f 	bl	8002394 <HAL_I2C_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80008fc:	f000 f97c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}
 8000904:	20000088 	.word	0x20000088
 8000908:	40005800 	.word	0x40005800
 800090c:	000186a0 	.word	0x000186a0

08000910 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000914:	4b13      	ldr	r3, [pc, #76]	; (8000964 <MX_I2S2_Init+0x54>)
 8000916:	4a14      	ldr	r2, [pc, #80]	; (8000968 <MX_I2S2_Init+0x58>)
 8000918:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800091a:	4b12      	ldr	r3, [pc, #72]	; (8000964 <MX_I2S2_Init+0x54>)
 800091c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000920:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_I2S2_Init+0x54>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_I2S2_Init+0x54>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <MX_I2S2_Init+0x54>)
 8000930:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000934:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_I2S2_Init+0x54>)
 8000938:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800093c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800093e:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_I2S2_Init+0x54>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000944:	4b07      	ldr	r3, [pc, #28]	; (8000964 <MX_I2S2_Init+0x54>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800094a:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_I2S2_Init+0x54>)
 800094c:	2201      	movs	r2, #1
 800094e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000950:	4804      	ldr	r0, [pc, #16]	; (8000964 <MX_I2S2_Init+0x54>)
 8000952:	f001 fe63 	bl	800261c <HAL_I2S_Init>
 8000956:	4603      	mov	r3, r0
 8000958:	2b00      	cmp	r3, #0
 800095a:	d001      	beq.n	8000960 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 800095c:	f000 f94c 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	200000dc 	.word	0x200000dc
 8000968:	40003800 	.word	0x40003800

0800096c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000970:	4b0e      	ldr	r3, [pc, #56]	; (80009ac <MX_TIM14_Init+0x40>)
 8000972:	4a0f      	ldr	r2, [pc, #60]	; (80009b0 <MX_TIM14_Init+0x44>)
 8000974:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8000976:	4b0d      	ldr	r3, [pc, #52]	; (80009ac <MX_TIM14_Init+0x40>)
 8000978:	2201      	movs	r2, #1
 800097a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b0b      	ldr	r3, [pc, #44]	; (80009ac <MX_TIM14_Init+0x40>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 8000982:	4b0a      	ldr	r3, [pc, #40]	; (80009ac <MX_TIM14_Init+0x40>)
 8000984:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000988:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800098a:	4b08      	ldr	r3, [pc, #32]	; (80009ac <MX_TIM14_Init+0x40>)
 800098c:	2200      	movs	r2, #0
 800098e:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <MX_TIM14_Init+0x40>)
 8000992:	2200      	movs	r2, #0
 8000994:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000996:	4805      	ldr	r0, [pc, #20]	; (80009ac <MX_TIM14_Init+0x40>)
 8000998:	f003 fab2 	bl	8003f00 <HAL_TIM_Base_Init>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80009a2:	f000 f929 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80009a6:	bf00      	nop
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200001e4 	.word	0x200001e4
 80009b0:	40002000 	.word	0x40002000

080009b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80009b8:	4b11      	ldr	r3, [pc, #68]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ba:	4a12      	ldr	r2, [pc, #72]	; (8000a04 <MX_USART1_UART_Init+0x50>)
 80009bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80009c6:	4b0e      	ldr	r3, [pc, #56]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80009cc:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80009d2:	4b0b      	ldr	r3, [pc, #44]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80009d8:	4b09      	ldr	r3, [pc, #36]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009da:	220c      	movs	r2, #12
 80009dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009de:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009ea:	4805      	ldr	r0, [pc, #20]	; (8000a00 <MX_USART1_UART_Init+0x4c>)
 80009ec:	f003 fd2c 	bl	8004448 <HAL_UART_Init>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009f6:	f000 f8ff 	bl	8000bf8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009fa:	bf00      	nop
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	2000022c 	.word	0x2000022c
 8000a04:	40011000 	.word	0x40011000

08000a08 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a0e:	2300      	movs	r3, #0
 8000a10:	607b      	str	r3, [r7, #4]
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <MX_DMA_Init+0x4c>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	4a0f      	ldr	r2, [pc, #60]	; (8000a54 <MX_DMA_Init+0x4c>)
 8000a18:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1e:	4b0d      	ldr	r3, [pc, #52]	; (8000a54 <MX_DMA_Init+0x4c>)
 8000a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a26:	607b      	str	r3, [r7, #4]
 8000a28:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	200e      	movs	r0, #14
 8000a30:	f000 ff39 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a34:	200e      	movs	r0, #14
 8000a36:	f000 ff52 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	200f      	movs	r0, #15
 8000a40:	f000 ff31 	bl	80018a6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a44:	200f      	movs	r0, #15
 8000a46:	f000 ff4a 	bl	80018de <HAL_NVIC_EnableIRQ>

}
 8000a4a:	bf00      	nop
 8000a4c:	3708      	adds	r7, #8
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	40023800 	.word	0x40023800

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	613b      	str	r3, [r7, #16]
 8000a72:	4b2e      	ldr	r3, [pc, #184]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a2d      	ldr	r2, [pc, #180]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b2b      	ldr	r3, [pc, #172]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
 8000a8e:	4b27      	ldr	r3, [pc, #156]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a92:	4a26      	ldr	r2, [pc, #152]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000a94:	f043 0301 	orr.w	r3, r3, #1
 8000a98:	6313      	str	r3, [r2, #48]	; 0x30
 8000a9a:	4b24      	ldr	r3, [pc, #144]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9e:	f003 0301 	and.w	r3, r3, #1
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
 8000aaa:	4b20      	ldr	r3, [pc, #128]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aae:	4a1f      	ldr	r2, [pc, #124]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000ab0:	f043 0302 	orr.w	r3, r3, #2
 8000ab4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab6:	4b1d      	ldr	r3, [pc, #116]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	4b19      	ldr	r3, [pc, #100]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a18      	ldr	r2, [pc, #96]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000acc:	f043 0304 	orr.w	r3, r3, #4
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b16      	ldr	r3, [pc, #88]	; (8000b2c <MX_GPIO_Init+0xd4>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0304 	and.w	r3, r3, #4
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 8000ade:	2200      	movs	r2, #0
 8000ae0:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000ae4:	4812      	ldr	r0, [pc, #72]	; (8000b30 <MX_GPIO_Init+0xd8>)
 8000ae6:	f001 fc21 	bl	800232c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 8000aea:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af0:	2301      	movs	r3, #1
 8000af2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af8:	2300      	movs	r3, #0
 8000afa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000afc:	f107 0314 	add.w	r3, r7, #20
 8000b00:	4619      	mov	r1, r3
 8000b02:	480b      	ldr	r0, [pc, #44]	; (8000b30 <MX_GPIO_Init+0xd8>)
 8000b04:	f001 fa76 	bl	8001ff4 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000b08:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4804      	ldr	r0, [pc, #16]	; (8000b30 <MX_GPIO_Init+0xd8>)
 8000b1e:	f001 fa69 	bl	8001ff4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b22:	bf00      	nop
 8000b24:	3728      	adds	r7, #40	; 0x28
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40023800 	.word	0x40023800
 8000b30:	40020400 	.word	0x40020400

08000b34 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  //static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a23      	ldr	r2, [pc, #140]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d13e      	bne.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x90>
  {
    

    GL_timer_100us = 1;
 8000b46:	4b23      	ldr	r3, [pc, #140]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000b48:	2201      	movs	r2, #1
 8000b4a:	601a      	str	r2, [r3, #0]
    count_100us++;
 8000b4c:	4b22      	ldr	r3, [pc, #136]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	3301      	adds	r3, #1
 8000b52:	4a21      	ldr	r2, [pc, #132]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b54:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 8000b56:	4b20      	ldr	r3, [pc, #128]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	2b09      	cmp	r3, #9
 8000b5c:	dd0a      	ble.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8000b5e:	4b1e      	ldr	r3, [pc, #120]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8000b64:	4b1d      	ldr	r3, [pc, #116]	; (8000bdc <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000b66:	2201      	movs	r2, #1
 8000b68:	601a      	str	r2, [r3, #0]
      count_1ms++;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	3301      	adds	r3, #1
 8000b70:	4a1b      	ldr	r2, [pc, #108]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b72:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8000b74:	4b1a      	ldr	r3, [pc, #104]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	2b09      	cmp	r3, #9
 8000b7a:	dd0a      	ble.n	8000b92 <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8000b7c:	4b18      	ldr	r3, [pc, #96]	; (8000be0 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8000b82:	4b18      	ldr	r3, [pc, #96]	; (8000be4 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	601a      	str	r2, [r3, #0]
      count_10ms++;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	3301      	adds	r3, #1
 8000b8e:	4a16      	ldr	r2, [pc, #88]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000b90:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	2b09      	cmp	r3, #9
 8000b98:	dd0a      	ble.n	8000bb0 <HAL_TIM_PeriodElapsedCallback+0x7c>
    {
      count_10ms = 0;
 8000b9a:	4b13      	ldr	r3, [pc, #76]	; (8000be8 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 8000ba0:	4b12      	ldr	r3, [pc, #72]	; (8000bec <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	601a      	str	r2, [r3, #0]
      count_100ms++;
 8000ba6:	4b12      	ldr	r3, [pc, #72]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	3301      	adds	r3, #1
 8000bac:	4a10      	ldr	r2, [pc, #64]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000bae:	6013      	str	r3, [r2, #0]
      //HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
    }

    if(count_100ms >= 10)
 8000bb0:	4b0f      	ldr	r3, [pc, #60]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b09      	cmp	r3, #9
 8000bb6:	dd05      	ble.n	8000bc4 <HAL_TIM_PeriodElapsedCallback+0x90>
    {
      count_100ms = 0;
 8000bb8:	4b0d      	ldr	r3, [pc, #52]	; (8000bf0 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 8000bbe:	4b0d      	ldr	r3, [pc, #52]	; (8000bf4 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }
}
 8000bc4:	bf00      	nop
 8000bc6:	370c      	adds	r7, #12
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bce:	4770      	bx	lr
 8000bd0:	40002000 	.word	0x40002000
 8000bd4:	2000002c 	.word	0x2000002c
 8000bd8:	2000038c 	.word	0x2000038c
 8000bdc:	20000030 	.word	0x20000030
 8000be0:	20000390 	.word	0x20000390
 8000be4:	20000034 	.word	0x20000034
 8000be8:	20000394 	.word	0x20000394
 8000bec:	20000038 	.word	0x20000038
 8000bf0:	20000398 	.word	0x20000398
 8000bf4:	2000003c 	.word	0x2000003c

08000bf8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <Error_Handler+0x8>
	...

08000c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	607b      	str	r3, [r7, #4]
 8000c0e:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c12:	4a0f      	ldr	r2, [pc, #60]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c18:	6453      	str	r3, [r2, #68]	; 0x44
 8000c1a:	4b0d      	ldr	r3, [pc, #52]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c22:	607b      	str	r3, [r7, #4]
 8000c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
 8000c2a:	4b09      	ldr	r3, [pc, #36]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c2e:	4a08      	ldr	r2, [pc, #32]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c34:	6413      	str	r3, [r2, #64]	; 0x40
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_MspInit+0x4c>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c42:	bf00      	nop
 8000c44:	370c      	adds	r7, #12
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	40023800 	.word	0x40023800

08000c54 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b08a      	sub	sp, #40	; 0x28
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <HAL_ADC_MspInit+0x7c>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d127      	bne.n	8000cc6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c76:	2300      	movs	r3, #0
 8000c78:	613b      	str	r3, [r7, #16]
 8000c7a:	4b16      	ldr	r3, [pc, #88]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7e:	4a15      	ldr	r2, [pc, #84]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c84:	6453      	str	r3, [r2, #68]	; 0x44
 8000c86:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c8e:	613b      	str	r3, [r7, #16]
 8000c90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	4b0f      	ldr	r3, [pc, #60]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a0e      	ldr	r2, [pc, #56]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000c9c:	f043 0301 	orr.w	r3, r3, #1
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <HAL_ADC_MspInit+0x80>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f003 0301 	and.w	r3, r3, #1
 8000caa:	60fb      	str	r3, [r7, #12]
 8000cac:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin|POT4_Pin
 8000cae:	231f      	movs	r3, #31
 8000cb0:	617b      	str	r3, [r7, #20]
                          |AD_PWR_SUPPLY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cba:	f107 0314 	add.w	r3, r7, #20
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <HAL_ADC_MspInit+0x84>)
 8000cc2:	f001 f997 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cc6:	bf00      	nop
 8000cc8:	3728      	adds	r7, #40	; 0x28
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020000 	.word	0x40020000

08000cdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	; 0x28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a19      	ldr	r2, [pc, #100]	; (8000d60 <HAL_I2C_MspInit+0x84>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d12c      	bne.n	8000d58 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	613b      	str	r3, [r7, #16]
 8000d02:	4b18      	ldr	r3, [pc, #96]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a17      	ldr	r2, [pc, #92]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b15      	ldr	r3, [pc, #84]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	613b      	str	r3, [r7, #16]
 8000d18:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d1a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d20:	2312      	movs	r3, #18
 8000d22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d28:	2303      	movs	r3, #3
 8000d2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d2c:	2304      	movs	r3, #4
 8000d2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	4619      	mov	r1, r3
 8000d36:	480c      	ldr	r0, [pc, #48]	; (8000d68 <HAL_I2C_MspInit+0x8c>)
 8000d38:	f001 f95c 	bl	8001ff4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d44:	4a07      	ldr	r2, [pc, #28]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d46:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000d4a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <HAL_I2C_MspInit+0x88>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d50:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d54:	60fb      	str	r3, [r7, #12]
 8000d56:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	; 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40005800 	.word	0x40005800
 8000d64:	40023800 	.word	0x40023800
 8000d68:	40020400 	.word	0x40020400

08000d6c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	; 0x38
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
 8000d8e:	609a      	str	r2, [r3, #8]
 8000d90:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4a6a      	ldr	r2, [pc, #424]	; (8000f40 <HAL_I2S_MspInit+0x1d4>)
 8000d98:	4293      	cmp	r3, r2
 8000d9a:	f040 80cd 	bne.w	8000f38 <HAL_I2S_MspInit+0x1cc>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000da2:	2332      	movs	r3, #50	; 0x32
 8000da4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	4618      	mov	r0, r3
 8000db0:	f002 ff66 	bl	8003c80 <HAL_RCCEx_PeriphCLKConfig>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000dba:	f7ff ff1d 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	613b      	str	r3, [r7, #16]
 8000dc2:	4b60      	ldr	r3, [pc, #384]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000dc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dcc:	6413      	str	r3, [r2, #64]	; 0x40
 8000dce:	4b5d      	ldr	r3, [pc, #372]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd6:	613b      	str	r3, [r7, #16]
 8000dd8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	60fb      	str	r3, [r7, #12]
 8000dde:	4b59      	ldr	r3, [pc, #356]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a58      	ldr	r2, [pc, #352]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000de4:	f043 0302 	orr.w	r3, r3, #2
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b56      	ldr	r3, [pc, #344]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0302 	and.w	r3, r3, #2
 8000df2:	60fb      	str	r3, [r7, #12]
 8000df4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60bb      	str	r3, [r7, #8]
 8000dfa:	4b52      	ldr	r3, [pc, #328]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a51      	ldr	r2, [pc, #324]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000e00:	f043 0304 	orr.w	r3, r3, #4
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b4f      	ldr	r3, [pc, #316]	; (8000f44 <HAL_I2S_MspInit+0x1d8>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0304 	and.w	r3, r3, #4
 8000e0e:	60bb      	str	r3, [r7, #8]
 8000e10:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000e12:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000e16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e24:	2305      	movs	r3, #5
 8000e26:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4846      	ldr	r0, [pc, #280]	; (8000f48 <HAL_I2S_MspInit+0x1dc>)
 8000e30:	f001 f8e0 	bl	8001ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000e46:	2306      	movs	r3, #6
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	483d      	ldr	r0, [pc, #244]	; (8000f48 <HAL_I2S_MspInit+0x1dc>)
 8000e52:	f001 f8cf 	bl	8001ff4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e56:	2340      	movs	r3, #64	; 0x40
 8000e58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e62:	2300      	movs	r3, #0
 8000e64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e66:	2305      	movs	r3, #5
 8000e68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4836      	ldr	r0, [pc, #216]	; (8000f4c <HAL_I2S_MspInit+0x1e0>)
 8000e72:	f001 f8bf 	bl	8001ff4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000e76:	4b36      	ldr	r3, [pc, #216]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000e78:	4a36      	ldr	r2, [pc, #216]	; (8000f54 <HAL_I2S_MspInit+0x1e8>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000e7c:	4b34      	ldr	r3, [pc, #208]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000e7e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e82:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e84:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8a:	4b31      	ldr	r3, [pc, #196]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e90:	4b2f      	ldr	r3, [pc, #188]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e98:	4b2d      	ldr	r3, [pc, #180]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000e9a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e9e:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000ea0:	4b2b      	ldr	r3, [pc, #172]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000ea2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ea6:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000ea8:	4b29      	ldr	r3, [pc, #164]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000eaa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eae:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000eb0:	4b27      	ldr	r3, [pc, #156]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb6:	4b26      	ldr	r3, [pc, #152]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000ebc:	4824      	ldr	r0, [pc, #144]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000ebe:	f000 fd29 	bl	8001914 <HAL_DMA_Init>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8000ec8:	f7ff fe96 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a20      	ldr	r2, [pc, #128]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000ed0:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_I2S_MspInit+0x1e4>)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000ed8:	4b1f      	ldr	r3, [pc, #124]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000eda:	4a20      	ldr	r2, [pc, #128]	; (8000f5c <HAL_I2S_MspInit+0x1f0>)
 8000edc:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000ede:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000ee4:	4b1c      	ldr	r3, [pc, #112]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000ee6:	2240      	movs	r2, #64	; 0x40
 8000ee8:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eea:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ef0:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ef6:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000efa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000efe:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000f08:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f0e:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f1e:	f000 fcf9 	bl	8001914 <HAL_DMA_Init>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d001      	beq.n	8000f2c <HAL_I2S_MspInit+0x1c0>
    {
      Error_Handler();
 8000f28:	f7ff fe66 	bl	8000bf8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	4a0a      	ldr	r2, [pc, #40]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f30:	639a      	str	r2, [r3, #56]	; 0x38
 8000f32:	4a09      	ldr	r2, [pc, #36]	; (8000f58 <HAL_I2S_MspInit+0x1ec>)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3738      	adds	r7, #56	; 0x38
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40003800 	.word	0x40003800
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	20000124 	.word	0x20000124
 8000f54:	40026058 	.word	0x40026058
 8000f58:	20000184 	.word	0x20000184
 8000f5c:	40026070 	.word	0x40026070

08000f60 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a0e      	ldr	r2, [pc, #56]	; (8000fa8 <HAL_TIM_Base_MspInit+0x48>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d115      	bne.n	8000f9e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <HAL_TIM_Base_MspInit+0x4c>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <HAL_TIM_Base_MspInit+0x4c>)
 8000f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <HAL_TIM_Base_MspInit+0x4c>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2100      	movs	r1, #0
 8000f92:	202d      	movs	r0, #45	; 0x2d
 8000f94:	f000 fc87 	bl	80018a6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000f98:	202d      	movs	r0, #45	; 0x2d
 8000f9a:	f000 fca0 	bl	80018de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000f9e:	bf00      	nop
 8000fa0:	3710      	adds	r7, #16
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40002000 	.word	0x40002000
 8000fac:	40023800 	.word	0x40023800

08000fb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	; 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	601a      	str	r2, [r3, #0]
 8000fc0:	605a      	str	r2, [r3, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
 8000fc4:	60da      	str	r2, [r3, #12]
 8000fc6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a19      	ldr	r2, [pc, #100]	; (8001034 <HAL_UART_MspInit+0x84>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d12c      	bne.n	800102c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fda:	4a17      	ldr	r2, [pc, #92]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fdc:	f043 0310 	orr.w	r3, r3, #16
 8000fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe6:	f003 0310 	and.w	r3, r3, #16
 8000fea:	613b      	str	r3, [r7, #16]
 8000fec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_UART_MspInit+0x88>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_UART_MspInit+0x88>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	60fb      	str	r3, [r7, #12]
 8001008:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800100a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800100e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001010:	2302      	movs	r3, #2
 8001012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001018:	2303      	movs	r3, #3
 800101a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800101c:	2307      	movs	r3, #7
 800101e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	4619      	mov	r1, r3
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <HAL_UART_MspInit+0x8c>)
 8001028:	f000 ffe4 	bl	8001ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800102c:	bf00      	nop
 800102e:	3728      	adds	r7, #40	; 0x28
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40011000 	.word	0x40011000
 8001038:	40023800 	.word	0x40023800
 800103c:	40020000 	.word	0x40020000

08001040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001044:	e7fe      	b.n	8001044 <NMI_Handler+0x4>

08001046 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800104a:	e7fe      	b.n	800104a <HardFault_Handler+0x4>

0800104c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001050:	e7fe      	b.n	8001050 <MemManage_Handler+0x4>

08001052 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001056:	e7fe      	b.n	8001056 <BusFault_Handler+0x4>

08001058 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800105c:	e7fe      	b.n	800105c <UsageFault_Handler+0x4>

0800105e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800105e:	b480      	push	{r7}
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr

0800107a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800107a:	b480      	push	{r7}
 800107c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	46bd      	mov	sp, r7
 8001082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001086:	4770      	bx	lr

08001088 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800108c:	f000 f8ae 	bl	80011ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	bd80      	pop	{r7, pc}

08001094 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001098:	4802      	ldr	r0, [pc, #8]	; (80010a4 <DMA1_Stream3_IRQHandler+0x10>)
 800109a:	f000 fd41 	bl	8001b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	20000124 	.word	0x20000124

080010a8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 80010ac:	4802      	ldr	r0, [pc, #8]	; (80010b8 <DMA1_Stream4_IRQHandler+0x10>)
 80010ae:	f000 fd37 	bl	8001b20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 80010b2:	bf00      	nop
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000184 	.word	0x20000184

080010bc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 80010c0:	4802      	ldr	r0, [pc, #8]	; (80010cc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80010c2:	f002 ffdd 	bl	8004080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	200001e4 	.word	0x200001e4

080010d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010d4:	4b06      	ldr	r3, [pc, #24]	; (80010f0 <SystemInit+0x20>)
 80010d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010da:	4a05      	ldr	r2, [pc, #20]	; (80010f0 <SystemInit+0x20>)
 80010dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80010f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800112c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010f8:	480d      	ldr	r0, [pc, #52]	; (8001130 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010fa:	490e      	ldr	r1, [pc, #56]	; (8001134 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010fc:	4a0e      	ldr	r2, [pc, #56]	; (8001138 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001100:	e002      	b.n	8001108 <LoopCopyDataInit>

08001102 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001102:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001104:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001106:	3304      	adds	r3, #4

08001108 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001108:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800110a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800110c:	d3f9      	bcc.n	8001102 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110e:	4a0b      	ldr	r2, [pc, #44]	; (800113c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001110:	4c0b      	ldr	r4, [pc, #44]	; (8001140 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001112:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001114:	e001      	b.n	800111a <LoopFillZerobss>

08001116 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001116:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001118:	3204      	adds	r2, #4

0800111a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800111a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800111c:	d3fb      	bcc.n	8001116 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800111e:	f7ff ffd7 	bl	80010d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001122:	f003 fc5b 	bl	80049dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001126:	f7ff fabb 	bl	80006a0 <main>
  bx  lr    
 800112a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800112c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001130:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001134:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001138:	08004a6c 	.word	0x08004a6c
  ldr r2, =_sbss
 800113c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001140:	200003a0 	.word	0x200003a0

08001144 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001144:	e7fe      	b.n	8001144 <ADC_IRQHandler>
	...

08001148 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800114c:	4b0e      	ldr	r3, [pc, #56]	; (8001188 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0d      	ldr	r2, [pc, #52]	; (8001188 <HAL_Init+0x40>)
 8001152:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001156:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001158:	4b0b      	ldr	r3, [pc, #44]	; (8001188 <HAL_Init+0x40>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a0a      	ldr	r2, [pc, #40]	; (8001188 <HAL_Init+0x40>)
 800115e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001162:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001164:	4b08      	ldr	r3, [pc, #32]	; (8001188 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a07      	ldr	r2, [pc, #28]	; (8001188 <HAL_Init+0x40>)
 800116a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800116e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001170:	2003      	movs	r0, #3
 8001172:	f000 fb8d 	bl	8001890 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001176:	200f      	movs	r0, #15
 8001178:	f000 f808 	bl	800118c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800117c:	f7ff fd42 	bl	8000c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001180:	2300      	movs	r3, #0
}
 8001182:	4618      	mov	r0, r3
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	40023c00 	.word	0x40023c00

0800118c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001194:	4b12      	ldr	r3, [pc, #72]	; (80011e0 <HAL_InitTick+0x54>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_InitTick+0x58>)
 800119a:	781b      	ldrb	r3, [r3, #0]
 800119c:	4619      	mov	r1, r3
 800119e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80011a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80011aa:	4618      	mov	r0, r3
 80011ac:	f000 fba5 	bl	80018fa <HAL_SYSTICK_Config>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d001      	beq.n	80011ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011b6:	2301      	movs	r3, #1
 80011b8:	e00e      	b.n	80011d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2b0f      	cmp	r3, #15
 80011be:	d80a      	bhi.n	80011d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011c0:	2200      	movs	r2, #0
 80011c2:	6879      	ldr	r1, [r7, #4]
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295
 80011c8:	f000 fb6d 	bl	80018a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011cc:	4a06      	ldr	r2, [pc, #24]	; (80011e8 <HAL_InitTick+0x5c>)
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011d2:	2300      	movs	r3, #0
 80011d4:	e000      	b.n	80011d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
}
 80011d8:	4618      	mov	r0, r3
 80011da:	3708      	adds	r7, #8
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	20000004 	.word	0x20000004
 80011e4:	2000000c 	.word	0x2000000c
 80011e8:	20000008 	.word	0x20000008

080011ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011f0:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_IncTick+0x20>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	461a      	mov	r2, r3
 80011f6:	4b06      	ldr	r3, [pc, #24]	; (8001210 <HAL_IncTick+0x24>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4413      	add	r3, r2
 80011fc:	4a04      	ldr	r2, [pc, #16]	; (8001210 <HAL_IncTick+0x24>)
 80011fe:	6013      	str	r3, [r2, #0]
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000000c 	.word	0x2000000c
 8001210:	2000039c 	.word	0x2000039c

08001214 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  return uwTick;
 8001218:	4b03      	ldr	r3, [pc, #12]	; (8001228 <HAL_GetTick+0x14>)
 800121a:	681b      	ldr	r3, [r3, #0]
}
 800121c:	4618      	mov	r0, r3
 800121e:	46bd      	mov	sp, r7
 8001220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001224:	4770      	bx	lr
 8001226:	bf00      	nop
 8001228:	2000039c 	.word	0x2000039c

0800122c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001234:	2300      	movs	r3, #0
 8001236:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800123e:	2301      	movs	r3, #1
 8001240:	e033      	b.n	80012aa <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001246:	2b00      	cmp	r3, #0
 8001248:	d109      	bne.n	800125e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff fd02 	bl	8000c54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	f003 0310 	and.w	r3, r3, #16
 8001266:	2b00      	cmp	r3, #0
 8001268:	d118      	bne.n	800129c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001272:	f023 0302 	bic.w	r3, r3, #2
 8001276:	f043 0202 	orr.w	r2, r3, #2
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	f000 f93a 	bl	80014f8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f023 0303 	bic.w	r3, r3, #3
 8001292:	f043 0201 	orr.w	r2, r3, #1
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	641a      	str	r2, [r3, #64]	; 0x40
 800129a:	e001      	b.n	80012a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	2200      	movs	r2, #0
 80012a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3710      	adds	r7, #16
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012c8:	2b01      	cmp	r3, #1
 80012ca:	d101      	bne.n	80012d0 <HAL_ADC_ConfigChannel+0x1c>
 80012cc:	2302      	movs	r3, #2
 80012ce:	e105      	b.n	80014dc <HAL_ADC_ConfigChannel+0x228>
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2201      	movs	r2, #1
 80012d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2b09      	cmp	r3, #9
 80012de:	d925      	bls.n	800132c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	68d9      	ldr	r1, [r3, #12]
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	4613      	mov	r3, r2
 80012f0:	005b      	lsls	r3, r3, #1
 80012f2:	4413      	add	r3, r2
 80012f4:	3b1e      	subs	r3, #30
 80012f6:	2207      	movs	r2, #7
 80012f8:	fa02 f303 	lsl.w	r3, r2, r3
 80012fc:	43da      	mvns	r2, r3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	400a      	ands	r2, r1
 8001304:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	68d9      	ldr	r1, [r3, #12]
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4618      	mov	r0, r3
 8001318:	4603      	mov	r3, r0
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	4403      	add	r3, r0
 800131e:	3b1e      	subs	r3, #30
 8001320:	409a      	lsls	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	430a      	orrs	r2, r1
 8001328:	60da      	str	r2, [r3, #12]
 800132a:	e022      	b.n	8001372 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6919      	ldr	r1, [r3, #16]
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	b29b      	uxth	r3, r3
 8001338:	461a      	mov	r2, r3
 800133a:	4613      	mov	r3, r2
 800133c:	005b      	lsls	r3, r3, #1
 800133e:	4413      	add	r3, r2
 8001340:	2207      	movs	r2, #7
 8001342:	fa02 f303 	lsl.w	r3, r2, r3
 8001346:	43da      	mvns	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	400a      	ands	r2, r1
 800134e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	6919      	ldr	r1, [r3, #16]
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689a      	ldr	r2, [r3, #8]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	b29b      	uxth	r3, r3
 8001360:	4618      	mov	r0, r3
 8001362:	4603      	mov	r3, r0
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	4403      	add	r3, r0
 8001368:	409a      	lsls	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	430a      	orrs	r2, r1
 8001370:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	2b06      	cmp	r3, #6
 8001378:	d824      	bhi.n	80013c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	685a      	ldr	r2, [r3, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	4413      	add	r3, r2
 800138a:	3b05      	subs	r3, #5
 800138c:	221f      	movs	r2, #31
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43da      	mvns	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	400a      	ands	r2, r1
 800139a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	4618      	mov	r0, r3
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685a      	ldr	r2, [r3, #4]
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	3b05      	subs	r3, #5
 80013b6:	fa00 f203 	lsl.w	r2, r0, r3
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	635a      	str	r2, [r3, #52]	; 0x34
 80013c2:	e04c      	b.n	800145e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	685b      	ldr	r3, [r3, #4]
 80013c8:	2b0c      	cmp	r3, #12
 80013ca:	d824      	bhi.n	8001416 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	4613      	mov	r3, r2
 80013d8:	009b      	lsls	r3, r3, #2
 80013da:	4413      	add	r3, r2
 80013dc:	3b23      	subs	r3, #35	; 0x23
 80013de:	221f      	movs	r2, #31
 80013e0:	fa02 f303 	lsl.w	r3, r2, r3
 80013e4:	43da      	mvns	r2, r3
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	400a      	ands	r2, r1
 80013ec:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685a      	ldr	r2, [r3, #4]
 8001400:	4613      	mov	r3, r2
 8001402:	009b      	lsls	r3, r3, #2
 8001404:	4413      	add	r3, r2
 8001406:	3b23      	subs	r3, #35	; 0x23
 8001408:	fa00 f203 	lsl.w	r2, r0, r3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	430a      	orrs	r2, r1
 8001412:	631a      	str	r2, [r3, #48]	; 0x30
 8001414:	e023      	b.n	800145e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	4613      	mov	r3, r2
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	4413      	add	r3, r2
 8001426:	3b41      	subs	r3, #65	; 0x41
 8001428:	221f      	movs	r2, #31
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	400a      	ands	r2, r1
 8001436:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	4613      	mov	r3, r2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	4413      	add	r3, r2
 8001450:	3b41      	subs	r3, #65	; 0x41
 8001452:	fa00 f203 	lsl.w	r2, r0, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	430a      	orrs	r2, r1
 800145c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800145e:	4b22      	ldr	r3, [pc, #136]	; (80014e8 <HAL_ADC_ConfigChannel+0x234>)
 8001460:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a21      	ldr	r2, [pc, #132]	; (80014ec <HAL_ADC_ConfigChannel+0x238>)
 8001468:	4293      	cmp	r3, r2
 800146a:	d109      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1cc>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b12      	cmp	r3, #18
 8001472:	d105      	bne.n	8001480 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a19      	ldr	r2, [pc, #100]	; (80014ec <HAL_ADC_ConfigChannel+0x238>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d123      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x21e>
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d003      	beq.n	800149a <HAL_ADC_ConfigChannel+0x1e6>
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	2b11      	cmp	r3, #17
 8001498:	d11b      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b10      	cmp	r3, #16
 80014ac:	d111      	bne.n	80014d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80014ae:	4b10      	ldr	r3, [pc, #64]	; (80014f0 <HAL_ADC_ConfigChannel+0x23c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	4a10      	ldr	r2, [pc, #64]	; (80014f4 <HAL_ADC_ConfigChannel+0x240>)
 80014b4:	fba2 2303 	umull	r2, r3, r2, r3
 80014b8:	0c9a      	lsrs	r2, r3, #18
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014c4:	e002      	b.n	80014cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80014c6:	68bb      	ldr	r3, [r7, #8]
 80014c8:	3b01      	subs	r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f9      	bne.n	80014c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2200      	movs	r2, #0
 80014d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014da:	2300      	movs	r3, #0
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3714      	adds	r7, #20
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr
 80014e8:	40012300 	.word	0x40012300
 80014ec:	40012000 	.word	0x40012000
 80014f0:	20000004 	.word	0x20000004
 80014f4:	431bde83 	.word	0x431bde83

080014f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001500:	4b79      	ldr	r3, [pc, #484]	; (80016e8 <ADC_Init+0x1f0>)
 8001502:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	685b      	ldr	r3, [r3, #4]
 8001518:	431a      	orrs	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800152c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	6859      	ldr	r1, [r3, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	021a      	lsls	r2, r3, #8
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	689a      	ldr	r2, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	430a      	orrs	r2, r1
 8001562:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	689a      	ldr	r2, [r3, #8]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001572:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6899      	ldr	r1, [r3, #8]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68da      	ldr	r2, [r3, #12]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	430a      	orrs	r2, r1
 8001584:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800158a:	4a58      	ldr	r2, [pc, #352]	; (80016ec <ADC_Init+0x1f4>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d022      	beq.n	80015d6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	689a      	ldr	r2, [r3, #8]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800159e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6899      	ldr	r1, [r3, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	689a      	ldr	r2, [r3, #8]
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	430a      	orrs	r2, r1
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	e00f      	b.n	80015f6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	689a      	ldr	r2, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	689a      	ldr	r2, [r3, #8]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f022 0202 	bic.w	r2, r2, #2
 8001604:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6899      	ldr	r1, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	7e1b      	ldrb	r3, [r3, #24]
 8001610:	005a      	lsls	r2, r3, #1
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d01b      	beq.n	800165c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001632:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	685a      	ldr	r2, [r3, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001642:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6859      	ldr	r1, [r3, #4]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	3b01      	subs	r3, #1
 8001650:	035a      	lsls	r2, r3, #13
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	430a      	orrs	r2, r1
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	e007      	b.n	800166c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800166a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800167a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	3b01      	subs	r3, #1
 8001688:	051a      	lsls	r2, r3, #20
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	430a      	orrs	r2, r1
 8001690:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	689a      	ldr	r2, [r3, #8]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	6899      	ldr	r1, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016ae:	025a      	lsls	r2, r3, #9
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	689a      	ldr	r2, [r3, #8]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6899      	ldr	r1, [r3, #8]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	695b      	ldr	r3, [r3, #20]
 80016d2:	029a      	lsls	r2, r3, #10
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	40012300 	.word	0x40012300
 80016ec:	0f000001 	.word	0x0f000001

080016f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b085      	sub	sp, #20
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f003 0307 	and.w	r3, r3, #7
 80016fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001700:	4b0c      	ldr	r3, [pc, #48]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001706:	68ba      	ldr	r2, [r7, #8]
 8001708:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800170c:	4013      	ands	r3, r2
 800170e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001718:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800171c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001720:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001722:	4a04      	ldr	r2, [pc, #16]	; (8001734 <__NVIC_SetPriorityGrouping+0x44>)
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	60d3      	str	r3, [r2, #12]
}
 8001728:	bf00      	nop
 800172a:	3714      	adds	r7, #20
 800172c:	46bd      	mov	sp, r7
 800172e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001732:	4770      	bx	lr
 8001734:	e000ed00 	.word	0xe000ed00

08001738 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800173c:	4b04      	ldr	r3, [pc, #16]	; (8001750 <__NVIC_GetPriorityGrouping+0x18>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	0a1b      	lsrs	r3, r3, #8
 8001742:	f003 0307 	and.w	r3, r3, #7
}
 8001746:	4618      	mov	r0, r3
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	e000ed00 	.word	0xe000ed00

08001754 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	4603      	mov	r3, r0
 800175c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	2b00      	cmp	r3, #0
 8001764:	db0b      	blt.n	800177e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001766:	79fb      	ldrb	r3, [r7, #7]
 8001768:	f003 021f 	and.w	r2, r3, #31
 800176c:	4907      	ldr	r1, [pc, #28]	; (800178c <__NVIC_EnableIRQ+0x38>)
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	095b      	lsrs	r3, r3, #5
 8001774:	2001      	movs	r0, #1
 8001776:	fa00 f202 	lsl.w	r2, r0, r2
 800177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800177e:	bf00      	nop
 8001780:	370c      	adds	r7, #12
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100

08001790 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	6039      	str	r1, [r7, #0]
 800179a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	db0a      	blt.n	80017ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	490c      	ldr	r1, [pc, #48]	; (80017dc <__NVIC_SetPriority+0x4c>)
 80017aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ae:	0112      	lsls	r2, r2, #4
 80017b0:	b2d2      	uxtb	r2, r2
 80017b2:	440b      	add	r3, r1
 80017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017b8:	e00a      	b.n	80017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4908      	ldr	r1, [pc, #32]	; (80017e0 <__NVIC_SetPriority+0x50>)
 80017c0:	79fb      	ldrb	r3, [r7, #7]
 80017c2:	f003 030f 	and.w	r3, r3, #15
 80017c6:	3b04      	subs	r3, #4
 80017c8:	0112      	lsls	r2, r2, #4
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	440b      	add	r3, r1
 80017ce:	761a      	strb	r2, [r3, #24]
}
 80017d0:	bf00      	nop
 80017d2:	370c      	adds	r7, #12
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000e100 	.word	0xe000e100
 80017e0:	e000ed00 	.word	0xe000ed00

080017e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e4:	b480      	push	{r7}
 80017e6:	b089      	sub	sp, #36	; 0x24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f1c3 0307 	rsb	r3, r3, #7
 80017fe:	2b04      	cmp	r3, #4
 8001800:	bf28      	it	cs
 8001802:	2304      	movcs	r3, #4
 8001804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001806:	69fb      	ldr	r3, [r7, #28]
 8001808:	3304      	adds	r3, #4
 800180a:	2b06      	cmp	r3, #6
 800180c:	d902      	bls.n	8001814 <NVIC_EncodePriority+0x30>
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	3b03      	subs	r3, #3
 8001812:	e000      	b.n	8001816 <NVIC_EncodePriority+0x32>
 8001814:	2300      	movs	r3, #0
 8001816:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001818:	f04f 32ff 	mov.w	r2, #4294967295
 800181c:	69bb      	ldr	r3, [r7, #24]
 800181e:	fa02 f303 	lsl.w	r3, r2, r3
 8001822:	43da      	mvns	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	401a      	ands	r2, r3
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800182c:	f04f 31ff 	mov.w	r1, #4294967295
 8001830:	697b      	ldr	r3, [r7, #20]
 8001832:	fa01 f303 	lsl.w	r3, r1, r3
 8001836:	43d9      	mvns	r1, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800183c:	4313      	orrs	r3, r2
         );
}
 800183e:	4618      	mov	r0, r3
 8001840:	3724      	adds	r7, #36	; 0x24
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
	...

0800184c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800185c:	d301      	bcc.n	8001862 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800185e:	2301      	movs	r3, #1
 8001860:	e00f      	b.n	8001882 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <SysTick_Config+0x40>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	3b01      	subs	r3, #1
 8001868:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800186a:	210f      	movs	r1, #15
 800186c:	f04f 30ff 	mov.w	r0, #4294967295
 8001870:	f7ff ff8e 	bl	8001790 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <SysTick_Config+0x40>)
 8001876:	2200      	movs	r2, #0
 8001878:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800187a:	4b04      	ldr	r3, [pc, #16]	; (800188c <SysTick_Config+0x40>)
 800187c:	2207      	movs	r2, #7
 800187e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001880:	2300      	movs	r3, #0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	e000e010 	.word	0xe000e010

08001890 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff ff29 	bl	80016f0 <__NVIC_SetPriorityGrouping>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b086      	sub	sp, #24
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	4603      	mov	r3, r0
 80018ae:	60b9      	str	r1, [r7, #8]
 80018b0:	607a      	str	r2, [r7, #4]
 80018b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018b4:	2300      	movs	r3, #0
 80018b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018b8:	f7ff ff3e 	bl	8001738 <__NVIC_GetPriorityGrouping>
 80018bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018be:	687a      	ldr	r2, [r7, #4]
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	6978      	ldr	r0, [r7, #20]
 80018c4:	f7ff ff8e 	bl	80017e4 <NVIC_EncodePriority>
 80018c8:	4602      	mov	r2, r0
 80018ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018ce:	4611      	mov	r1, r2
 80018d0:	4618      	mov	r0, r3
 80018d2:	f7ff ff5d 	bl	8001790 <__NVIC_SetPriority>
}
 80018d6:	bf00      	nop
 80018d8:	3718      	adds	r7, #24
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
 80018e4:	4603      	mov	r3, r0
 80018e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ec:	4618      	mov	r0, r3
 80018ee:	f7ff ff31 	bl	8001754 <__NVIC_EnableIRQ>
}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}

080018fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018fa:	b580      	push	{r7, lr}
 80018fc:	b082      	sub	sp, #8
 80018fe:	af00      	add	r7, sp, #0
 8001900:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f7ff ffa2 	bl	800184c <SysTick_Config>
 8001908:	4603      	mov	r3, r0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3708      	adds	r7, #8
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800191c:	2300      	movs	r3, #0
 800191e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001920:	f7ff fc78 	bl	8001214 <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d101      	bne.n	8001930 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800192c:	2301      	movs	r3, #1
 800192e:	e099      	b.n	8001a64 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	2202      	movs	r2, #2
 8001934:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2200      	movs	r2, #0
 800193c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f022 0201 	bic.w	r2, r2, #1
 800194e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001950:	e00f      	b.n	8001972 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001952:	f7ff fc5f 	bl	8001214 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b05      	cmp	r3, #5
 800195e:	d908      	bls.n	8001972 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2220      	movs	r2, #32
 8001964:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2203      	movs	r2, #3
 800196a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e078      	b.n	8001a64 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f003 0301 	and.w	r3, r3, #1
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1e8      	bne.n	8001952 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	4b38      	ldr	r3, [pc, #224]	; (8001a6c <HAL_DMA_Init+0x158>)
 800198c:	4013      	ands	r3, r2
 800198e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685a      	ldr	r2, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800199e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80019b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	6a1b      	ldr	r3, [r3, #32]
 80019bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019be:	697a      	ldr	r2, [r7, #20]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d107      	bne.n	80019dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d4:	4313      	orrs	r3, r2
 80019d6:	697a      	ldr	r2, [r7, #20]
 80019d8:	4313      	orrs	r3, r2
 80019da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	697a      	ldr	r2, [r7, #20]
 80019e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	695b      	ldr	r3, [r3, #20]
 80019ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80019ec:	697b      	ldr	r3, [r7, #20]
 80019ee:	f023 0307 	bic.w	r3, r3, #7
 80019f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019f8:	697a      	ldr	r2, [r7, #20]
 80019fa:	4313      	orrs	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	2b04      	cmp	r3, #4
 8001a04:	d117      	bne.n	8001a36 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0a:	697a      	ldr	r2, [r7, #20]
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d00e      	beq.n	8001a36 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f000 fa6f 	bl	8001efc <DMA_CheckFifoParam>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d008      	beq.n	8001a36 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2240      	movs	r2, #64	; 0x40
 8001a28:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a32:	2301      	movs	r3, #1
 8001a34:	e016      	b.n	8001a64 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	697a      	ldr	r2, [r7, #20]
 8001a3c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f000 fa26 	bl	8001e90 <DMA_CalcBaseAndBitshift>
 8001a44:	4603      	mov	r3, r0
 8001a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	223f      	movs	r2, #63	; 0x3f
 8001a4e:	409a      	lsls	r2, r3
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2200      	movs	r2, #0
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3718      	adds	r7, #24
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	f010803f 	.word	0xf010803f

08001a70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a86:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_DMA_Start_IT+0x26>
 8001a92:	2302      	movs	r3, #2
 8001a94:	e040      	b.n	8001b18 <HAL_DMA_Start_IT+0xa8>
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	2201      	movs	r2, #1
 8001a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b01      	cmp	r3, #1
 8001aa8:	d12f      	bne.n	8001b0a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2202      	movs	r2, #2
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f000 f9b8 	bl	8001e34 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ac8:	223f      	movs	r2, #63	; 0x3f
 8001aca:	409a      	lsls	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f042 0216 	orr.w	r2, r2, #22
 8001ade:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d007      	beq.n	8001af8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f042 0208 	orr.w	r2, r2, #8
 8001af6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f042 0201 	orr.w	r2, r2, #1
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	e005      	b.n	8001b16 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b12:	2302      	movs	r3, #2
 8001b14:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3718      	adds	r7, #24
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}

08001b20 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b086      	sub	sp, #24
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001b2c:	4b8e      	ldr	r3, [pc, #568]	; (8001d68 <HAL_DMA_IRQHandler+0x248>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	4a8e      	ldr	r2, [pc, #568]	; (8001d6c <HAL_DMA_IRQHandler+0x24c>)
 8001b32:	fba2 2303 	umull	r2, r3, r2, r3
 8001b36:	0a9b      	lsrs	r3, r3, #10
 8001b38:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b3e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d01a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f022 0204 	bic.w	r2, r2, #4
 8001b72:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b78:	2208      	movs	r2, #8
 8001b7a:	409a      	lsls	r2, r3
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	2201      	movs	r2, #1
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	4013      	ands	r3, r2
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d012      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d00b      	beq.n	8001bc2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bae:	2201      	movs	r2, #1
 8001bb0:	409a      	lsls	r2, r3
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bc6:	2204      	movs	r2, #4
 8001bc8:	409a      	lsls	r2, r3
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d012      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d00b      	beq.n	8001bf8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001be4:	2204      	movs	r2, #4
 8001be6:	409a      	lsls	r2, r3
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bf0:	f043 0204 	orr.w	r2, r3, #4
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bfc:	2210      	movs	r2, #16
 8001bfe:	409a      	lsls	r2, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	4013      	ands	r3, r2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d043      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0308 	and.w	r3, r3, #8
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d03c      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c1a:	2210      	movs	r2, #16
 8001c1c:	409a      	lsls	r2, r3
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d018      	beq.n	8001c62 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d108      	bne.n	8001c50 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d024      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	4798      	blx	r3
 8001c4e:	e01f      	b.n	8001c90 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d01b      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	4798      	blx	r3
 8001c60:	e016      	b.n	8001c90 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d107      	bne.n	8001c80 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 0208 	bic.w	r2, r2, #8
 8001c7e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d003      	beq.n	8001c90 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c94:	2220      	movs	r2, #32
 8001c96:	409a      	lsls	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	f000 808f 	beq.w	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f003 0310 	and.w	r3, r3, #16
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	f000 8087 	beq.w	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb6:	2220      	movs	r2, #32
 8001cb8:	409a      	lsls	r2, r3
 8001cba:	693b      	ldr	r3, [r7, #16]
 8001cbc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	d136      	bne.n	8001d38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f022 0216 	bic.w	r2, r2, #22
 8001cd8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	695a      	ldr	r2, [r3, #20]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ce8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d103      	bne.n	8001cfa <HAL_DMA_IRQHandler+0x1da>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d007      	beq.n	8001d0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f022 0208 	bic.w	r2, r2, #8
 8001d08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	223f      	movs	r2, #63	; 0x3f
 8001d10:	409a      	lsls	r2, r3
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2201      	movs	r2, #1
 8001d1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d07e      	beq.n	8001e2c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d32:	6878      	ldr	r0, [r7, #4]
 8001d34:	4798      	blx	r3
        }
        return;
 8001d36:	e079      	b.n	8001e2c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d01d      	beq.n	8001d82 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10d      	bne.n	8001d70 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d031      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d60:	6878      	ldr	r0, [r7, #4]
 8001d62:	4798      	blx	r3
 8001d64:	e02c      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
 8001d66:	bf00      	nop
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d023      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	4798      	blx	r3
 8001d80:	e01e      	b.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10f      	bne.n	8001db0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f022 0210 	bic.w	r2, r2, #16
 8001d9e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d003      	beq.n	8001dc0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d032      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f003 0301 	and.w	r3, r3, #1
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d022      	beq.n	8001e1a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2205      	movs	r2, #5
 8001dd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f022 0201 	bic.w	r2, r2, #1
 8001dea:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001dec:	68bb      	ldr	r3, [r7, #8]
 8001dee:	3301      	adds	r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	697a      	ldr	r2, [r7, #20]
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d307      	bcc.n	8001e08 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1f2      	bne.n	8001dec <HAL_DMA_IRQHandler+0x2cc>
 8001e06:	e000      	b.n	8001e0a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001e08:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e000      	b.n	8001e2e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001e2c:	bf00      	nop
    }
  }
}
 8001e2e:	3718      	adds	r7, #24
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}

08001e34 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	60f8      	str	r0, [r7, #12]
 8001e3c:	60b9      	str	r1, [r7, #8]
 8001e3e:	607a      	str	r2, [r7, #4]
 8001e40:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e50:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	683a      	ldr	r2, [r7, #0]
 8001e58:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	689b      	ldr	r3, [r3, #8]
 8001e5e:	2b40      	cmp	r3, #64	; 0x40
 8001e60:	d108      	bne.n	8001e74 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001e72:	e007      	b.n	8001e84 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	68ba      	ldr	r2, [r7, #8]
 8001e7a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	60da      	str	r2, [r3, #12]
}
 8001e84:	bf00      	nop
 8001e86:	3714      	adds	r7, #20
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr

08001e90 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001e90:	b480      	push	{r7}
 8001e92:	b085      	sub	sp, #20
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	b2db      	uxtb	r3, r3
 8001e9e:	3b10      	subs	r3, #16
 8001ea0:	4a14      	ldr	r2, [pc, #80]	; (8001ef4 <DMA_CalcBaseAndBitshift+0x64>)
 8001ea2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001eaa:	4a13      	ldr	r2, [pc, #76]	; (8001ef8 <DMA_CalcBaseAndBitshift+0x68>)
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4413      	add	r3, r2
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d909      	bls.n	8001ed2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001ec6:	f023 0303 	bic.w	r3, r3, #3
 8001eca:	1d1a      	adds	r2, r3, #4
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	659a      	str	r2, [r3, #88]	; 0x58
 8001ed0:	e007      	b.n	8001ee2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001eda:	f023 0303 	bic.w	r3, r3, #3
 8001ede:	687a      	ldr	r2, [r7, #4]
 8001ee0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3714      	adds	r7, #20
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	aaaaaaab 	.word	0xaaaaaaab
 8001ef8:	08004a54 	.word	0x08004a54

08001efc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b085      	sub	sp, #20
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f0c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d11f      	bne.n	8001f56 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	2b03      	cmp	r3, #3
 8001f1a:	d856      	bhi.n	8001fca <DMA_CheckFifoParam+0xce>
 8001f1c:	a201      	add	r2, pc, #4	; (adr r2, 8001f24 <DMA_CheckFifoParam+0x28>)
 8001f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f22:	bf00      	nop
 8001f24:	08001f35 	.word	0x08001f35
 8001f28:	08001f47 	.word	0x08001f47
 8001f2c:	08001f35 	.word	0x08001f35
 8001f30:	08001fcb 	.word	0x08001fcb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d046      	beq.n	8001fce <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f44:	e043      	b.n	8001fce <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f4e:	d140      	bne.n	8001fd2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f54:	e03d      	b.n	8001fd2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	699b      	ldr	r3, [r3, #24]
 8001f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001f5e:	d121      	bne.n	8001fa4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d837      	bhi.n	8001fd6 <DMA_CheckFifoParam+0xda>
 8001f66:	a201      	add	r2, pc, #4	; (adr r2, 8001f6c <DMA_CheckFifoParam+0x70>)
 8001f68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f6c:	08001f7d 	.word	0x08001f7d
 8001f70:	08001f83 	.word	0x08001f83
 8001f74:	08001f7d 	.word	0x08001f7d
 8001f78:	08001f95 	.word	0x08001f95
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	73fb      	strb	r3, [r7, #15]
      break;
 8001f80:	e030      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d025      	beq.n	8001fda <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f92:	e022      	b.n	8001fda <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f98:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001f9c:	d11f      	bne.n	8001fde <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001fa2:	e01c      	b.n	8001fde <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001fa4:	68bb      	ldr	r3, [r7, #8]
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d903      	bls.n	8001fb2 <DMA_CheckFifoParam+0xb6>
 8001faa:	68bb      	ldr	r3, [r7, #8]
 8001fac:	2b03      	cmp	r3, #3
 8001fae:	d003      	beq.n	8001fb8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001fb0:	e018      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fb6:	e015      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	73fb      	strb	r3, [r7, #15]
      break;
 8001fc8:	e00b      	b.n	8001fe2 <DMA_CheckFifoParam+0xe6>
      break;
 8001fca:	bf00      	nop
 8001fcc:	e00a      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fce:	bf00      	nop
 8001fd0:	e008      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd2:	bf00      	nop
 8001fd4:	e006      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fd6:	bf00      	nop
 8001fd8:	e004      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fda:	bf00      	nop
 8001fdc:	e002      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001fde:	bf00      	nop
 8001fe0:	e000      	b.n	8001fe4 <DMA_CheckFifoParam+0xe8>
      break;
 8001fe2:	bf00      	nop
    }
  } 
  
  return status; 
 8001fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3714      	adds	r7, #20
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop

08001ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b089      	sub	sp, #36	; 0x24
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800200a:	2300      	movs	r3, #0
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e16b      	b.n	80022e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002010:	2201      	movs	r2, #1
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	697a      	ldr	r2, [r7, #20]
 8002020:	4013      	ands	r3, r2
 8002022:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002024:	693a      	ldr	r2, [r7, #16]
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	429a      	cmp	r2, r3
 800202a:	f040 815a 	bne.w	80022e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
 8002036:	2b01      	cmp	r3, #1
 8002038:	d005      	beq.n	8002046 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002042:	2b02      	cmp	r3, #2
 8002044:	d130      	bne.n	80020a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	68da      	ldr	r2, [r3, #12]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800207c:	2201      	movs	r2, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	43db      	mvns	r3, r3
 8002086:	69ba      	ldr	r2, [r7, #24]
 8002088:	4013      	ands	r3, r2
 800208a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685b      	ldr	r3, [r3, #4]
 8002090:	091b      	lsrs	r3, r3, #4
 8002092:	f003 0201 	and.w	r2, r3, #1
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	fa02 f303 	lsl.w	r3, r2, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4313      	orrs	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0303 	and.w	r3, r3, #3
 80020b0:	2b03      	cmp	r3, #3
 80020b2:	d017      	beq.n	80020e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	69ba      	ldr	r2, [r7, #24]
 80020c8:	4013      	ands	r3, r2
 80020ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	69ba      	ldr	r2, [r7, #24]
 80020da:	4313      	orrs	r3, r2
 80020dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f003 0303 	and.w	r3, r3, #3
 80020ec:	2b02      	cmp	r3, #2
 80020ee:	d123      	bne.n	8002138 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	08da      	lsrs	r2, r3, #3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3208      	adds	r2, #8
 80020f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	220f      	movs	r2, #15
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	43db      	mvns	r3, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4013      	ands	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	fa02 f303 	lsl.w	r3, r2, r3
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	4313      	orrs	r3, r2
 8002128:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800212a:	69fb      	ldr	r3, [r7, #28]
 800212c:	08da      	lsrs	r2, r3, #3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	3208      	adds	r2, #8
 8002132:	69b9      	ldr	r1, [r7, #24]
 8002134:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	005b      	lsls	r3, r3, #1
 8002142:	2203      	movs	r2, #3
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43db      	mvns	r3, r3
 800214a:	69ba      	ldr	r2, [r7, #24]
 800214c:	4013      	ands	r3, r2
 800214e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f003 0203 	and.w	r2, r3, #3
 8002158:	69fb      	ldr	r3, [r7, #28]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	fa02 f303 	lsl.w	r3, r2, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4313      	orrs	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 80b4 	beq.w	80022e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800217a:	2300      	movs	r3, #0
 800217c:	60fb      	str	r3, [r7, #12]
 800217e:	4b60      	ldr	r3, [pc, #384]	; (8002300 <HAL_GPIO_Init+0x30c>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002182:	4a5f      	ldr	r2, [pc, #380]	; (8002300 <HAL_GPIO_Init+0x30c>)
 8002184:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002188:	6453      	str	r3, [r2, #68]	; 0x44
 800218a:	4b5d      	ldr	r3, [pc, #372]	; (8002300 <HAL_GPIO_Init+0x30c>)
 800218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002192:	60fb      	str	r3, [r7, #12]
 8002194:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002196:	4a5b      	ldr	r2, [pc, #364]	; (8002304 <HAL_GPIO_Init+0x310>)
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	089b      	lsrs	r3, r3, #2
 800219c:	3302      	adds	r3, #2
 800219e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021a4:	69fb      	ldr	r3, [r7, #28]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	220f      	movs	r2, #15
 80021ae:	fa02 f303 	lsl.w	r3, r2, r3
 80021b2:	43db      	mvns	r3, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4013      	ands	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a52      	ldr	r2, [pc, #328]	; (8002308 <HAL_GPIO_Init+0x314>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d02b      	beq.n	800221a <HAL_GPIO_Init+0x226>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a51      	ldr	r2, [pc, #324]	; (800230c <HAL_GPIO_Init+0x318>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d025      	beq.n	8002216 <HAL_GPIO_Init+0x222>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a50      	ldr	r2, [pc, #320]	; (8002310 <HAL_GPIO_Init+0x31c>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d01f      	beq.n	8002212 <HAL_GPIO_Init+0x21e>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a4f      	ldr	r2, [pc, #316]	; (8002314 <HAL_GPIO_Init+0x320>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d019      	beq.n	800220e <HAL_GPIO_Init+0x21a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a4e      	ldr	r2, [pc, #312]	; (8002318 <HAL_GPIO_Init+0x324>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d013      	beq.n	800220a <HAL_GPIO_Init+0x216>
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4a4d      	ldr	r2, [pc, #308]	; (800231c <HAL_GPIO_Init+0x328>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d00d      	beq.n	8002206 <HAL_GPIO_Init+0x212>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	4a4c      	ldr	r2, [pc, #304]	; (8002320 <HAL_GPIO_Init+0x32c>)
 80021ee:	4293      	cmp	r3, r2
 80021f0:	d007      	beq.n	8002202 <HAL_GPIO_Init+0x20e>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4a4b      	ldr	r2, [pc, #300]	; (8002324 <HAL_GPIO_Init+0x330>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d101      	bne.n	80021fe <HAL_GPIO_Init+0x20a>
 80021fa:	2307      	movs	r3, #7
 80021fc:	e00e      	b.n	800221c <HAL_GPIO_Init+0x228>
 80021fe:	2308      	movs	r3, #8
 8002200:	e00c      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002202:	2306      	movs	r3, #6
 8002204:	e00a      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002206:	2305      	movs	r3, #5
 8002208:	e008      	b.n	800221c <HAL_GPIO_Init+0x228>
 800220a:	2304      	movs	r3, #4
 800220c:	e006      	b.n	800221c <HAL_GPIO_Init+0x228>
 800220e:	2303      	movs	r3, #3
 8002210:	e004      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002212:	2302      	movs	r3, #2
 8002214:	e002      	b.n	800221c <HAL_GPIO_Init+0x228>
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_GPIO_Init+0x228>
 800221a:	2300      	movs	r3, #0
 800221c:	69fa      	ldr	r2, [r7, #28]
 800221e:	f002 0203 	and.w	r2, r2, #3
 8002222:	0092      	lsls	r2, r2, #2
 8002224:	4093      	lsls	r3, r2
 8002226:	69ba      	ldr	r2, [r7, #24]
 8002228:	4313      	orrs	r3, r2
 800222a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222c:	4935      	ldr	r1, [pc, #212]	; (8002304 <HAL_GPIO_Init+0x310>)
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	089b      	lsrs	r3, r3, #2
 8002232:	3302      	adds	r3, #2
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800223a:	4b3b      	ldr	r3, [pc, #236]	; (8002328 <HAL_GPIO_Init+0x334>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225e:	4a32      	ldr	r2, [pc, #200]	; (8002328 <HAL_GPIO_Init+0x334>)
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002264:	4b30      	ldr	r3, [pc, #192]	; (8002328 <HAL_GPIO_Init+0x334>)
 8002266:	68db      	ldr	r3, [r3, #12]
 8002268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d003      	beq.n	8002288 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002288:	4a27      	ldr	r2, [pc, #156]	; (8002328 <HAL_GPIO_Init+0x334>)
 800228a:	69bb      	ldr	r3, [r7, #24]
 800228c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228e:	4b26      	ldr	r3, [pc, #152]	; (8002328 <HAL_GPIO_Init+0x334>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	43db      	mvns	r3, r3
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	4013      	ands	r3, r2
 800229c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d003      	beq.n	80022b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80022aa:	69ba      	ldr	r2, [r7, #24]
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022b2:	4a1d      	ldr	r2, [pc, #116]	; (8002328 <HAL_GPIO_Init+0x334>)
 80022b4:	69bb      	ldr	r3, [r7, #24]
 80022b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b8:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_GPIO_Init+0x334>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	43db      	mvns	r3, r3
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	4013      	ands	r3, r2
 80022c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80022d4:	69ba      	ldr	r2, [r7, #24]
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4313      	orrs	r3, r2
 80022da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022dc:	4a12      	ldr	r2, [pc, #72]	; (8002328 <HAL_GPIO_Init+0x334>)
 80022de:	69bb      	ldr	r3, [r7, #24]
 80022e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022e2:	69fb      	ldr	r3, [r7, #28]
 80022e4:	3301      	adds	r3, #1
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	2b0f      	cmp	r3, #15
 80022ec:	f67f ae90 	bls.w	8002010 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022f0:	bf00      	nop
 80022f2:	bf00      	nop
 80022f4:	3724      	adds	r7, #36	; 0x24
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40023800 	.word	0x40023800
 8002304:	40013800 	.word	0x40013800
 8002308:	40020000 	.word	0x40020000
 800230c:	40020400 	.word	0x40020400
 8002310:	40020800 	.word	0x40020800
 8002314:	40020c00 	.word	0x40020c00
 8002318:	40021000 	.word	0x40021000
 800231c:	40021400 	.word	0x40021400
 8002320:	40021800 	.word	0x40021800
 8002324:	40021c00 	.word	0x40021c00
 8002328:	40013c00 	.word	0x40013c00

0800232c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	460b      	mov	r3, r1
 8002336:	807b      	strh	r3, [r7, #2]
 8002338:	4613      	mov	r3, r2
 800233a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800233c:	787b      	ldrb	r3, [r7, #1]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002348:	e003      	b.n	8002352 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800234a:	887b      	ldrh	r3, [r7, #2]
 800234c:	041a      	lsls	r2, r3, #16
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	619a      	str	r2, [r3, #24]
}
 8002352:	bf00      	nop
 8002354:	370c      	adds	r7, #12
 8002356:	46bd      	mov	sp, r7
 8002358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235c:	4770      	bx	lr

0800235e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800235e:	b480      	push	{r7}
 8002360:	b085      	sub	sp, #20
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
 8002366:	460b      	mov	r3, r1
 8002368:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002370:	887a      	ldrh	r2, [r7, #2]
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	4013      	ands	r3, r2
 8002376:	041a      	lsls	r2, r3, #16
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	43d9      	mvns	r1, r3
 800237c:	887b      	ldrh	r3, [r7, #2]
 800237e:	400b      	ands	r3, r1
 8002380:	431a      	orrs	r2, r3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	619a      	str	r2, [r3, #24]
}
 8002386:	bf00      	nop
 8002388:	3714      	adds	r7, #20
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
	...

08002394 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e12b      	b.n	80025fe <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023ac:	b2db      	uxtb	r3, r3
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d106      	bne.n	80023c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2200      	movs	r2, #0
 80023b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	f7fe fc8e 	bl	8000cdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2224      	movs	r2, #36	; 0x24
 80023c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	681a      	ldr	r2, [r3, #0]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f022 0201 	bic.w	r2, r2, #1
 80023d6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023e6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80023f8:	f001 fc1a 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 80023fc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4a81      	ldr	r2, [pc, #516]	; (8002608 <HAL_I2C_Init+0x274>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d807      	bhi.n	8002418 <HAL_I2C_Init+0x84>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4a80      	ldr	r2, [pc, #512]	; (800260c <HAL_I2C_Init+0x278>)
 800240c:	4293      	cmp	r3, r2
 800240e:	bf94      	ite	ls
 8002410:	2301      	movls	r3, #1
 8002412:	2300      	movhi	r3, #0
 8002414:	b2db      	uxtb	r3, r3
 8002416:	e006      	b.n	8002426 <HAL_I2C_Init+0x92>
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	4a7d      	ldr	r2, [pc, #500]	; (8002610 <HAL_I2C_Init+0x27c>)
 800241c:	4293      	cmp	r3, r2
 800241e:	bf94      	ite	ls
 8002420:	2301      	movls	r3, #1
 8002422:	2300      	movhi	r3, #0
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e0e7      	b.n	80025fe <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	4a78      	ldr	r2, [pc, #480]	; (8002614 <HAL_I2C_Init+0x280>)
 8002432:	fba2 2303 	umull	r2, r3, r2, r3
 8002436:	0c9b      	lsrs	r3, r3, #18
 8002438:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68ba      	ldr	r2, [r7, #8]
 800244a:	430a      	orrs	r2, r1
 800244c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	6a1b      	ldr	r3, [r3, #32]
 8002454:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a6a      	ldr	r2, [pc, #424]	; (8002608 <HAL_I2C_Init+0x274>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d802      	bhi.n	8002468 <HAL_I2C_Init+0xd4>
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	3301      	adds	r3, #1
 8002466:	e009      	b.n	800247c <HAL_I2C_Init+0xe8>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800246e:	fb02 f303 	mul.w	r3, r2, r3
 8002472:	4a69      	ldr	r2, [pc, #420]	; (8002618 <HAL_I2C_Init+0x284>)
 8002474:	fba2 2303 	umull	r2, r3, r2, r3
 8002478:	099b      	lsrs	r3, r3, #6
 800247a:	3301      	adds	r3, #1
 800247c:	687a      	ldr	r2, [r7, #4]
 800247e:	6812      	ldr	r2, [r2, #0]
 8002480:	430b      	orrs	r3, r1
 8002482:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800248e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	495c      	ldr	r1, [pc, #368]	; (8002608 <HAL_I2C_Init+0x274>)
 8002498:	428b      	cmp	r3, r1
 800249a:	d819      	bhi.n	80024d0 <HAL_I2C_Init+0x13c>
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	1e59      	subs	r1, r3, #1
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80024aa:	1c59      	adds	r1, r3, #1
 80024ac:	f640 73fc 	movw	r3, #4092	; 0xffc
 80024b0:	400b      	ands	r3, r1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d00a      	beq.n	80024cc <HAL_I2C_Init+0x138>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	1e59      	subs	r1, r3, #1
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80024c4:	3301      	adds	r3, #1
 80024c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024ca:	e051      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024cc:	2304      	movs	r3, #4
 80024ce:	e04f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d111      	bne.n	80024fc <HAL_I2C_Init+0x168>
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	1e58      	subs	r0, r3, #1
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6859      	ldr	r1, [r3, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	440b      	add	r3, r1
 80024e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80024ea:	3301      	adds	r3, #1
 80024ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	e012      	b.n	8002522 <HAL_I2C_Init+0x18e>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	1e58      	subs	r0, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6859      	ldr	r1, [r3, #4]
 8002504:	460b      	mov	r3, r1
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	440b      	add	r3, r1
 800250a:	0099      	lsls	r1, r3, #2
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	2b00      	cmp	r3, #0
 8002524:	d001      	beq.n	800252a <HAL_I2C_Init+0x196>
 8002526:	2301      	movs	r3, #1
 8002528:	e022      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d10e      	bne.n	8002550 <HAL_I2C_Init+0x1bc>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	1e58      	subs	r0, r3, #1
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6859      	ldr	r1, [r3, #4]
 800253a:	460b      	mov	r3, r1
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	440b      	add	r3, r1
 8002540:	fbb0 f3f3 	udiv	r3, r0, r3
 8002544:	3301      	adds	r3, #1
 8002546:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800254a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800254e:	e00f      	b.n	8002570 <HAL_I2C_Init+0x1dc>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	1e58      	subs	r0, r3, #1
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6859      	ldr	r1, [r3, #4]
 8002558:	460b      	mov	r3, r1
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	440b      	add	r3, r1
 800255e:	0099      	lsls	r1, r3, #2
 8002560:	440b      	add	r3, r1
 8002562:	fbb0 f3f3 	udiv	r3, r0, r3
 8002566:	3301      	adds	r3, #1
 8002568:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800256c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	6809      	ldr	r1, [r1, #0]
 8002574:	4313      	orrs	r3, r2
 8002576:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	69da      	ldr	r2, [r3, #28]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6a1b      	ldr	r3, [r3, #32]
 800258a:	431a      	orrs	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	430a      	orrs	r2, r1
 8002592:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800259e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6911      	ldr	r1, [r2, #16]
 80025a6:	687a      	ldr	r2, [r7, #4]
 80025a8:	68d2      	ldr	r2, [r2, #12]
 80025aa:	4311      	orrs	r1, r2
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6812      	ldr	r2, [r2, #0]
 80025b0:	430b      	orrs	r3, r1
 80025b2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695a      	ldr	r2, [r3, #20]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	431a      	orrs	r2, r3
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	430a      	orrs	r2, r1
 80025ce:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f042 0201 	orr.w	r2, r2, #1
 80025de:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2220      	movs	r2, #32
 80025ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	2200      	movs	r2, #0
 80025f2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3710      	adds	r7, #16
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	000186a0 	.word	0x000186a0
 800260c:	001e847f 	.word	0x001e847f
 8002610:	003d08ff 	.word	0x003d08ff
 8002614:	431bde83 	.word	0x431bde83
 8002618:	10624dd3 	.word	0x10624dd3

0800261c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b088      	sub	sp, #32
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e128      	b.n	8002880 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d109      	bne.n	800264e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a90      	ldr	r2, [pc, #576]	; (8002888 <HAL_I2S_Init+0x26c>)
 8002646:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002648:	6878      	ldr	r0, [r7, #4]
 800264a:	f7fe fb8f 	bl	8000d6c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2202      	movs	r2, #2
 8002652:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	69db      	ldr	r3, [r3, #28]
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	6812      	ldr	r2, [r2, #0]
 8002660:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002664:	f023 030f 	bic.w	r3, r3, #15
 8002668:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2202      	movs	r2, #2
 8002670:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	695b      	ldr	r3, [r3, #20]
 8002676:	2b02      	cmp	r3, #2
 8002678:	d060      	beq.n	800273c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002682:	2310      	movs	r3, #16
 8002684:	617b      	str	r3, [r7, #20]
 8002686:	e001      	b.n	800268c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002688:	2320      	movs	r3, #32
 800268a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b20      	cmp	r3, #32
 8002692:	d802      	bhi.n	800269a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800269a:	2001      	movs	r0, #1
 800269c:	f001 fbd2 	bl	8003e44 <HAL_RCCEx_GetPeriphCLKFreq>
 80026a0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026aa:	d125      	bne.n	80026f8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	68fa      	ldr	r2, [r7, #12]
 80026ba:	fbb2 f2f3 	udiv	r2, r2, r3
 80026be:	4613      	mov	r3, r2
 80026c0:	009b      	lsls	r3, r3, #2
 80026c2:	4413      	add	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	461a      	mov	r2, r3
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	695b      	ldr	r3, [r3, #20]
 80026cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d0:	3305      	adds	r3, #5
 80026d2:	613b      	str	r3, [r7, #16]
 80026d4:	e01f      	b.n	8002716 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	00db      	lsls	r3, r3, #3
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e0:	4613      	mov	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4413      	add	r3, r2
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	461a      	mov	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	695b      	ldr	r3, [r3, #20]
 80026ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f2:	3305      	adds	r3, #5
 80026f4:	613b      	str	r3, [r7, #16]
 80026f6:	e00e      	b.n	8002716 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80026f8:	68fa      	ldr	r2, [r7, #12]
 80026fa:	697b      	ldr	r3, [r7, #20]
 80026fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002700:	4613      	mov	r3, r2
 8002702:	009b      	lsls	r3, r3, #2
 8002704:	4413      	add	r3, r2
 8002706:	005b      	lsls	r3, r3, #1
 8002708:	461a      	mov	r2, r3
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002712:	3305      	adds	r3, #5
 8002714:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	4a5c      	ldr	r2, [pc, #368]	; (800288c <HAL_I2S_Init+0x270>)
 800271a:	fba2 2303 	umull	r2, r3, r2, r3
 800271e:	08db      	lsrs	r3, r3, #3
 8002720:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	085b      	lsrs	r3, r3, #1
 8002732:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	021b      	lsls	r3, r3, #8
 8002738:	61bb      	str	r3, [r7, #24]
 800273a:	e003      	b.n	8002744 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800273c:	2302      	movs	r3, #2
 800273e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002740:	2300      	movs	r3, #0
 8002742:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d902      	bls.n	8002750 <HAL_I2S_Init+0x134>
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	2bff      	cmp	r3, #255	; 0xff
 800274e:	d907      	bls.n	8002760 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	f043 0210 	orr.w	r2, r3, #16
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e08f      	b.n	8002880 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	691a      	ldr	r2, [r3, #16]
 8002764:	69bb      	ldr	r3, [r7, #24]
 8002766:	ea42 0103 	orr.w	r1, r2, r3
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	69fa      	ldr	r2, [r7, #28]
 8002770:	430a      	orrs	r2, r1
 8002772:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800277e:	f023 030f 	bic.w	r3, r3, #15
 8002782:	687a      	ldr	r2, [r7, #4]
 8002784:	6851      	ldr	r1, [r2, #4]
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6892      	ldr	r2, [r2, #8]
 800278a:	4311      	orrs	r1, r2
 800278c:	687a      	ldr	r2, [r7, #4]
 800278e:	68d2      	ldr	r2, [r2, #12]
 8002790:	4311      	orrs	r1, r2
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6992      	ldr	r2, [r2, #24]
 8002796:	430a      	orrs	r2, r1
 8002798:	431a      	orrs	r2, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d161      	bne.n	8002870 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	4a38      	ldr	r2, [pc, #224]	; (8002890 <HAL_I2S_Init+0x274>)
 80027b0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a37      	ldr	r2, [pc, #220]	; (8002894 <HAL_I2S_Init+0x278>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d101      	bne.n	80027c0 <HAL_I2S_Init+0x1a4>
 80027bc:	4b36      	ldr	r3, [pc, #216]	; (8002898 <HAL_I2S_Init+0x27c>)
 80027be:	e001      	b.n	80027c4 <HAL_I2S_Init+0x1a8>
 80027c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027c4:	69db      	ldr	r3, [r3, #28]
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	6812      	ldr	r2, [r2, #0]
 80027ca:	4932      	ldr	r1, [pc, #200]	; (8002894 <HAL_I2S_Init+0x278>)
 80027cc:	428a      	cmp	r2, r1
 80027ce:	d101      	bne.n	80027d4 <HAL_I2S_Init+0x1b8>
 80027d0:	4a31      	ldr	r2, [pc, #196]	; (8002898 <HAL_I2S_Init+0x27c>)
 80027d2:	e001      	b.n	80027d8 <HAL_I2S_Init+0x1bc>
 80027d4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80027d8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027dc:	f023 030f 	bic.w	r3, r3, #15
 80027e0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4a2b      	ldr	r2, [pc, #172]	; (8002894 <HAL_I2S_Init+0x278>)
 80027e8:	4293      	cmp	r3, r2
 80027ea:	d101      	bne.n	80027f0 <HAL_I2S_Init+0x1d4>
 80027ec:	4b2a      	ldr	r3, [pc, #168]	; (8002898 <HAL_I2S_Init+0x27c>)
 80027ee:	e001      	b.n	80027f4 <HAL_I2S_Init+0x1d8>
 80027f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80027f4:	2202      	movs	r2, #2
 80027f6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a25      	ldr	r2, [pc, #148]	; (8002894 <HAL_I2S_Init+0x278>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d101      	bne.n	8002806 <HAL_I2S_Init+0x1ea>
 8002802:	4b25      	ldr	r3, [pc, #148]	; (8002898 <HAL_I2S_Init+0x27c>)
 8002804:	e001      	b.n	800280a <HAL_I2S_Init+0x1ee>
 8002806:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800280a:	69db      	ldr	r3, [r3, #28]
 800280c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002816:	d003      	beq.n	8002820 <HAL_I2S_Init+0x204>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d103      	bne.n	8002828 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002820:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002824:	613b      	str	r3, [r7, #16]
 8002826:	e001      	b.n	800282c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800282c:	693b      	ldr	r3, [r7, #16]
 800282e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002836:	4313      	orrs	r3, r2
 8002838:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002840:	4313      	orrs	r3, r2
 8002842:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800284a:	4313      	orrs	r3, r2
 800284c:	b29a      	uxth	r2, r3
 800284e:	897b      	ldrh	r3, [r7, #10]
 8002850:	4313      	orrs	r3, r2
 8002852:	b29b      	uxth	r3, r3
 8002854:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002858:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a0d      	ldr	r2, [pc, #52]	; (8002894 <HAL_I2S_Init+0x278>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d101      	bne.n	8002868 <HAL_I2S_Init+0x24c>
 8002864:	4b0c      	ldr	r3, [pc, #48]	; (8002898 <HAL_I2S_Init+0x27c>)
 8002866:	e001      	b.n	800286c <HAL_I2S_Init+0x250>
 8002868:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800286c:	897a      	ldrh	r2, [r7, #10]
 800286e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2201      	movs	r2, #1
 800287a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3720      	adds	r7, #32
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	08002993 	.word	0x08002993
 800288c:	cccccccd 	.word	0xcccccccd
 8002890:	08002dbd 	.word	0x08002dbd
 8002894:	40003800 	.word	0x40003800
 8002898:	40003400 	.word	0x40003400

0800289c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800289c:	b480      	push	{r7}
 800289e:	b083      	sub	sp, #12
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b083      	sub	sp, #12
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80028cc:	bf00      	nop
 80028ce:	370c      	adds	r7, #12
 80028d0:	46bd      	mov	sp, r7
 80028d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d6:	4770      	bx	lr

080028d8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e4:	881a      	ldrh	r2, [r3, #0]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	1c9a      	adds	r2, r3, #2
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028fa:	b29b      	uxth	r3, r3
 80028fc:	3b01      	subs	r3, #1
 80028fe:	b29a      	uxth	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002908:	b29b      	uxth	r3, r3
 800290a:	2b00      	cmp	r3, #0
 800290c:	d10e      	bne.n	800292c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	685a      	ldr	r2, [r3, #4]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800291c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	2201      	movs	r2, #1
 8002922:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7ff ffb8 	bl	800289c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800292c:	bf00      	nop
 800292e:	3708      	adds	r7, #8
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}

08002934 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	b292      	uxth	r2, r2
 8002948:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294e:	1c9a      	adds	r2, r3, #2
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002958:	b29b      	uxth	r3, r3
 800295a:	3b01      	subs	r3, #1
 800295c:	b29a      	uxth	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002966:	b29b      	uxth	r3, r3
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10e      	bne.n	800298a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	685a      	ldr	r2, [r3, #4]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800297a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f7ff ff93 	bl	80028b0 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800298a:	bf00      	nop
 800298c:	3708      	adds	r7, #8
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}

08002992 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002992:	b580      	push	{r7, lr}
 8002994:	b086      	sub	sp, #24
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029a8:	b2db      	uxtb	r3, r3
 80029aa:	2b04      	cmp	r3, #4
 80029ac:	d13a      	bne.n	8002a24 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	f003 0301 	and.w	r3, r3, #1
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d109      	bne.n	80029cc <I2S_IRQHandler+0x3a>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c2:	2b40      	cmp	r3, #64	; 0x40
 80029c4:	d102      	bne.n	80029cc <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff ffb4 	bl	8002934 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029d2:	2b40      	cmp	r3, #64	; 0x40
 80029d4:	d126      	bne.n	8002a24 <I2S_IRQHandler+0x92>
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f003 0320 	and.w	r3, r3, #32
 80029e0:	2b20      	cmp	r3, #32
 80029e2:	d11f      	bne.n	8002a24 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685a      	ldr	r2, [r3, #4]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80029f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80029f4:	2300      	movs	r3, #0
 80029f6:	613b      	str	r3, [r7, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a16:	f043 0202 	orr.w	r2, r3, #2
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f7ff ff50 	bl	80028c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a2a:	b2db      	uxtb	r3, r3
 8002a2c:	2b03      	cmp	r3, #3
 8002a2e:	d136      	bne.n	8002a9e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	f003 0302 	and.w	r3, r3, #2
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d109      	bne.n	8002a4e <I2S_IRQHandler+0xbc>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a44:	2b80      	cmp	r3, #128	; 0x80
 8002a46:	d102      	bne.n	8002a4e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002a48:	6878      	ldr	r0, [r7, #4]
 8002a4a:	f7ff ff45 	bl	80028d8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	f003 0308 	and.w	r3, r3, #8
 8002a54:	2b08      	cmp	r3, #8
 8002a56:	d122      	bne.n	8002a9e <I2S_IRQHandler+0x10c>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b20      	cmp	r3, #32
 8002a64:	d11b      	bne.n	8002a9e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685a      	ldr	r2, [r3, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002a74:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002a76:	2300      	movs	r3, #0
 8002a78:	60fb      	str	r3, [r7, #12]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	60fb      	str	r3, [r7, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a90:	f043 0204 	orr.w	r2, r3, #4
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f7ff ff13 	bl	80028c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a9e:	bf00      	nop
 8002aa0:	3718      	adds	r7, #24
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
	...

08002aa8 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	b088      	sub	sp, #32
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	60f8      	str	r0, [r7, #12]
 8002ab0:	60b9      	str	r1, [r7, #8]
 8002ab2:	607a      	str	r2, [r7, #4]
 8002ab4:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d002      	beq.n	8002ad4 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8002ace:	2302      	movs	r3, #2
 8002ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ad2:	e160      	b.n	8002d96 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8002ae0:	887b      	ldrh	r3, [r7, #2]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e15a      	b.n	8002da0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d101      	bne.n	8002afa <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8002af6:	2302      	movs	r3, #2
 8002af8:	e152      	b.n	8002da0 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8002b02:	68ba      	ldr	r2, [r7, #8]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	69db      	ldr	r3, [r3, #28]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b03      	cmp	r3, #3
 8002b1e:	d002      	beq.n	8002b26 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2b05      	cmp	r3, #5
 8002b24:	d114      	bne.n	8002b50 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8002b26:	887b      	ldrh	r3, [r7, #2]
 8002b28:	005b      	lsls	r3, r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002b30:	887b      	ldrh	r3, [r7, #2]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	b29a      	uxth	r2, r3
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8002b3a:	887b      	ldrh	r3, [r7, #2]
 8002b3c:	005b      	lsls	r3, r3, #1
 8002b3e:	b29a      	uxth	r2, r3
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002b44:	887b      	ldrh	r3, [r7, #2]
 8002b46:	005b      	lsls	r3, r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	865a      	strh	r2, [r3, #50]	; 0x32
 8002b4e:	e00b      	b.n	8002b68 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	887a      	ldrh	r2, [r7, #2]
 8002b54:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	887a      	ldrh	r2, [r7, #2]
 8002b5a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	887a      	ldrh	r2, [r7, #2]
 8002b60:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	887a      	ldrh	r2, [r7, #2]
 8002b66:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2205      	movs	r2, #5
 8002b72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7a:	4a8b      	ldr	r2, [pc, #556]	; (8002da8 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b82:	4a8a      	ldr	r2, [pc, #552]	; (8002dac <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8002b84:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	4a89      	ldr	r2, [pc, #548]	; (8002db0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002b8c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b92:	2200      	movs	r2, #0
 8002b94:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba2:	4a83      	ldr	r2, [pc, #524]	; (8002db0 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8002ba4:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	69db      	ldr	r3, [r3, #28]
 8002bac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bb0:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002bb8:	d002      	beq.n	8002bc0 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d16b      	bne.n	8002c98 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002bc0:	1d3b      	adds	r3, r7, #4
 8002bc2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a79      	ldr	r2, [pc, #484]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8002bd2:	4b79      	ldr	r3, [pc, #484]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002bd4:	e001      	b.n	8002bda <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8002bd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bda:	330c      	adds	r3, #12
 8002bdc:	4619      	mov	r1, r3
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002be6:	b29b      	uxth	r3, r3
 8002be8:	f7fe ff42 	bl	8001a70 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a70      	ldr	r2, [pc, #448]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d101      	bne.n	8002bfa <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8002bf6:	4b70      	ldr	r3, [pc, #448]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002bf8:	e001      	b.n	8002bfe <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8002bfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	496b      	ldr	r1, [pc, #428]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c06:	428b      	cmp	r3, r1
 8002c08:	d101      	bne.n	8002c0e <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8002c0a:	4b6b      	ldr	r3, [pc, #428]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c0c:	e001      	b.n	8002c12 <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8002c0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c12:	f042 0201 	orr.w	r2, r2, #1
 8002c16:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002c18:	f107 0308 	add.w	r3, r7, #8
 8002c1c:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	6819      	ldr	r1, [r3, #0]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	330c      	adds	r3, #12
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	f7fe ff1c 	bl	8001a70 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	685a      	ldr	r2, [r3, #4]
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f042 0202 	orr.w	r2, r2, #2
 8002c46:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	69db      	ldr	r3, [r3, #28]
 8002c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c56:	f000 809e 	beq.w	8002d96 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a55      	ldr	r2, [pc, #340]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d101      	bne.n	8002c68 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8002c64:	4b54      	ldr	r3, [pc, #336]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c66:	e001      	b.n	8002c6c <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8002c68:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c6c:	69da      	ldr	r2, [r3, #28]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4950      	ldr	r1, [pc, #320]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002c74:	428b      	cmp	r3, r1
 8002c76:	d101      	bne.n	8002c7c <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8002c78:	4b4f      	ldr	r3, [pc, #316]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002c7a:	e001      	b.n	8002c80 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8002c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002c80:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c84:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002c94:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002c96:	e07e      	b.n	8002d96 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	69db      	ldr	r3, [r3, #28]
 8002c9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ca6:	d10a      	bne.n	8002cbe <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ca8:	2300      	movs	r3, #0
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	613b      	str	r3, [r7, #16]
 8002cbc:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002cc8:	69bb      	ldr	r3, [r7, #24]
 8002cca:	6819      	ldr	r1, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d101      	bne.n	8002cda <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8002cd6:	4b38      	ldr	r3, [pc, #224]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002cd8:	e001      	b.n	8002cde <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8002cda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cde:	330c      	adds	r3, #12
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	f7fe fec2 	bl	8001a70 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a30      	ldr	r2, [pc, #192]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002cf2:	4293      	cmp	r3, r2
 8002cf4:	d101      	bne.n	8002cfa <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8002cf6:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002cf8:	e001      	b.n	8002cfe <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8002cfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	492b      	ldr	r1, [pc, #172]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d06:	428b      	cmp	r3, r1
 8002d08:	d101      	bne.n	8002d0e <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8002d0a:	4b2b      	ldr	r3, [pc, #172]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d0c:	e001      	b.n	8002d12 <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8002d0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d12:	f042 0202 	orr.w	r2, r2, #2
 8002d16:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8002d18:	1d3b      	adds	r3, r7, #4
 8002d1a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	330c      	adds	r3, #12
 8002d26:	4619      	mov	r1, r3
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	681a      	ldr	r2, [r3, #0]
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002d30:	b29b      	uxth	r3, r3
 8002d32:	f7fe fe9d 	bl	8001a70 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	685a      	ldr	r2, [r3, #4]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	f042 0201 	orr.w	r2, r2, #1
 8002d44:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	69db      	ldr	r3, [r3, #28]
 8002d4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d54:	d01e      	beq.n	8002d94 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a16      	ldr	r2, [pc, #88]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d101      	bne.n	8002d64 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d62:	e001      	b.n	8002d68 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8002d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d68:	69da      	ldr	r2, [r3, #28]
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4911      	ldr	r1, [pc, #68]	; (8002db4 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8002d70:	428b      	cmp	r3, r1
 8002d72:	d101      	bne.n	8002d78 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8002d74:	4b10      	ldr	r3, [pc, #64]	; (8002db8 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8002d76:	e001      	b.n	8002d7c <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8002d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d7c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d80:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	69da      	ldr	r2, [r3, #28]
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002d90:	61da      	str	r2, [r3, #28]
 8002d92:	e000      	b.n	8002d96 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8002d94:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8002d9e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	3720      	adds	r7, #32
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	08003065 	.word	0x08003065
 8002dac:	08003081 	.word	0x08003081
 8002db0:	08003159 	.word	0x08003159
 8002db4:	40003800 	.word	0x40003800
 8002db8:	40003400 	.word	0x40003400

08002dbc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b088      	sub	sp, #32
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a92      	ldr	r2, [pc, #584]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d101      	bne.n	8002dda <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002dd6:	4b92      	ldr	r3, [pc, #584]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002dd8:	e001      	b.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002dda:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a8b      	ldr	r2, [pc, #556]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d101      	bne.n	8002df8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002df4:	4b8a      	ldr	r3, [pc, #552]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df6:	e001      	b.n	8002dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002df8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002dfc:	685b      	ldr	r3, [r3, #4]
 8002dfe:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e08:	d004      	beq.n	8002e14 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f040 8099 	bne.w	8002f46 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e14:	69fb      	ldr	r3, [r7, #28]
 8002e16:	f003 0302 	and.w	r3, r3, #2
 8002e1a:	2b02      	cmp	r3, #2
 8002e1c:	d107      	bne.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f000 f9d5 	bl	80031d8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e2e:	69bb      	ldr	r3, [r7, #24]
 8002e30:	f003 0301 	and.w	r3, r3, #1
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d107      	bne.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002e38:	693b      	ldr	r3, [r7, #16]
 8002e3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002e42:	6878      	ldr	r0, [r7, #4]
 8002e44:	f000 fa78 	bl	8003338 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e4e:	2b40      	cmp	r3, #64	; 0x40
 8002e50:	d13a      	bne.n	8002ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	f003 0320 	and.w	r3, r3, #32
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d035      	beq.n	8002ec8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a6e      	ldr	r2, [pc, #440]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d101      	bne.n	8002e6a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002e66:	4b6e      	ldr	r3, [pc, #440]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e68:	e001      	b.n	8002e6e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002e6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4969      	ldr	r1, [pc, #420]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e76:	428b      	cmp	r3, r1
 8002e78:	d101      	bne.n	8002e7e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002e7a:	4b69      	ldr	r3, [pc, #420]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e7c:	e001      	b.n	8002e82 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002e7e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e82:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e86:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	685a      	ldr	r2, [r3, #4]
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e96:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	60fb      	str	r3, [r7, #12]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	60fb      	str	r3, [r7, #12]
 8002eac:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fcfe 	bl	80028c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0308 	and.w	r3, r3, #8
 8002ece:	2b08      	cmp	r3, #8
 8002ed0:	f040 80c3 	bne.w	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	f003 0320 	and.w	r3, r3, #32
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f000 80bd 	beq.w	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eee:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a49      	ldr	r2, [pc, #292]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d101      	bne.n	8002efe <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002efa:	4b49      	ldr	r3, [pc, #292]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002efc:	e001      	b.n	8002f02 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002efe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	4944      	ldr	r1, [pc, #272]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f0a:	428b      	cmp	r3, r1
 8002f0c:	d101      	bne.n	8002f12 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002f0e:	4b44      	ldr	r3, [pc, #272]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f10:	e001      	b.n	8002f16 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f16:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f1a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	60bb      	str	r3, [r7, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	689b      	ldr	r3, [r3, #8]
 8002f26:	60bb      	str	r3, [r7, #8]
 8002f28:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f36:	f043 0204 	orr.w	r2, r3, #4
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f7ff fcc0 	bl	80028c4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f44:	e089      	b.n	800305a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002f46:	69bb      	ldr	r3, [r7, #24]
 8002f48:	f003 0302 	and.w	r3, r3, #2
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d107      	bne.n	8002f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d002      	beq.n	8002f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f96e 	bl	800323c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002f60:	69fb      	ldr	r3, [r7, #28]
 8002f62:	f003 0301 	and.w	r3, r3, #1
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d107      	bne.n	8002f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d002      	beq.n	8002f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f000 f9ad 	bl	80032d4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f80:	2b40      	cmp	r3, #64	; 0x40
 8002f82:	d12f      	bne.n	8002fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	f003 0320 	and.w	r3, r3, #32
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d02a      	beq.n	8002fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f9c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a1e      	ldr	r2, [pc, #120]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d101      	bne.n	8002fac <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002fa8:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002faa:	e001      	b.n	8002fb0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002fac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fb0:	685a      	ldr	r2, [r3, #4]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4919      	ldr	r1, [pc, #100]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002fb8:	428b      	cmp	r3, r1
 8002fba:	d101      	bne.n	8002fc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002fbc:	4b18      	ldr	r3, [pc, #96]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002fbe:	e001      	b.n	8002fc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002fc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fc8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f043 0202 	orr.w	r2, r3, #2
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fc70 	bl	80028c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	f003 0308 	and.w	r3, r3, #8
 8002fea:	2b08      	cmp	r3, #8
 8002fec:	d136      	bne.n	800305c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	f003 0320 	and.w	r3, r3, #32
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d031      	beq.n	800305c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d101      	bne.n	8003006 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003002:	4b07      	ldr	r3, [pc, #28]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003004:	e001      	b.n	800300a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800300a:	685a      	ldr	r2, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4902      	ldr	r1, [pc, #8]	; (800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003012:	428b      	cmp	r3, r1
 8003014:	d106      	bne.n	8003024 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003016:	4b02      	ldr	r3, [pc, #8]	; (8003020 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003018:	e006      	b.n	8003028 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800301a:	bf00      	nop
 800301c:	40003800 	.word	0x40003800
 8003020:	40003400 	.word	0x40003400
 8003024:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800302c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800303c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f7ff fc36 	bl	80028c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003058:	e000      	b.n	800305c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800305a:	bf00      	nop
}
 800305c:	bf00      	nop
 800305e:	3720      	adds	r7, #32
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003070:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 8003072:	68f8      	ldr	r0, [r7, #12]
 8003074:	f7fd fa26 	bl	80004c4 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003078:	bf00      	nop
 800307a:	3710      	adds	r7, #16
 800307c:	46bd      	mov	sp, r7
 800307e:	bd80      	pop	{r7, pc}

08003080 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308c:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d155      	bne.n	8003142 <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69db      	ldr	r3, [r3, #28]
 800309c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030a4:	d006      	beq.n	80030b4 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69db      	ldr	r3, [r3, #28]
 80030ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d11e      	bne.n	80030f2 <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a25      	ldr	r2, [pc, #148]	; (8003150 <I2SEx_TxRxDMACplt+0xd0>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d101      	bne.n	80030c2 <I2SEx_TxRxDMACplt+0x42>
 80030be:	4b25      	ldr	r3, [pc, #148]	; (8003154 <I2SEx_TxRxDMACplt+0xd4>)
 80030c0:	e001      	b.n	80030c6 <I2SEx_TxRxDMACplt+0x46>
 80030c2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4920      	ldr	r1, [pc, #128]	; (8003150 <I2SEx_TxRxDMACplt+0xd0>)
 80030ce:	428b      	cmp	r3, r1
 80030d0:	d101      	bne.n	80030d6 <I2SEx_TxRxDMACplt+0x56>
 80030d2:	4b20      	ldr	r3, [pc, #128]	; (8003154 <I2SEx_TxRxDMACplt+0xd4>)
 80030d4:	e001      	b.n	80030da <I2SEx_TxRxDMACplt+0x5a>
 80030d6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030da:	f022 0201 	bic.w	r2, r2, #1
 80030de:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	685a      	ldr	r2, [r3, #4]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f022 0202 	bic.w	r2, r2, #2
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	e01d      	b.n	800312e <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0201 	bic.w	r2, r2, #1
 8003100:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a12      	ldr	r2, [pc, #72]	; (8003150 <I2SEx_TxRxDMACplt+0xd0>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d101      	bne.n	8003110 <I2SEx_TxRxDMACplt+0x90>
 800310c:	4b11      	ldr	r3, [pc, #68]	; (8003154 <I2SEx_TxRxDMACplt+0xd4>)
 800310e:	e001      	b.n	8003114 <I2SEx_TxRxDMACplt+0x94>
 8003110:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	490d      	ldr	r1, [pc, #52]	; (8003150 <I2SEx_TxRxDMACplt+0xd0>)
 800311c:	428b      	cmp	r3, r1
 800311e:	d101      	bne.n	8003124 <I2SEx_TxRxDMACplt+0xa4>
 8003120:	4b0c      	ldr	r3, [pc, #48]	; (8003154 <I2SEx_TxRxDMACplt+0xd4>)
 8003122:	e001      	b.n	8003128 <I2SEx_TxRxDMACplt+0xa8>
 8003124:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003128:	f022 0202 	bic.w	r2, r2, #2
 800312c:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	2200      	movs	r2, #0
 8003132:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2201      	movs	r2, #1
 800313e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f7fd f9dc 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003148:	bf00      	nop
 800314a:	3710      	adds	r7, #16
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40003800 	.word	0x40003800
 8003154:	40003400 	.word	0x40003400

08003158 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003164:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f022 0203 	bic.w	r2, r2, #3
 8003174:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a15      	ldr	r2, [pc, #84]	; (80031d0 <I2SEx_TxRxDMAError+0x78>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <I2SEx_TxRxDMAError+0x2c>
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <I2SEx_TxRxDMAError+0x7c>)
 8003182:	e001      	b.n	8003188 <I2SEx_TxRxDMAError+0x30>
 8003184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4910      	ldr	r1, [pc, #64]	; (80031d0 <I2SEx_TxRxDMAError+0x78>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d101      	bne.n	8003198 <I2SEx_TxRxDMAError+0x40>
 8003194:	4b0f      	ldr	r3, [pc, #60]	; (80031d4 <I2SEx_TxRxDMAError+0x7c>)
 8003196:	e001      	b.n	800319c <I2SEx_TxRxDMAError+0x44>
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	f022 0203 	bic.w	r2, r2, #3
 80031a0:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2200      	movs	r2, #0
 80031ac:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	f043 0208 	orr.w	r2, r3, #8
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80031c2:	68f8      	ldr	r0, [r7, #12]
 80031c4:	f7ff fb7e 	bl	80028c4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	40003800 	.word	0x40003800
 80031d4:	40003400 	.word	0x40003400

080031d8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e4:	1c99      	adds	r1, r3, #2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6251      	str	r1, [r2, #36]	; 0x24
 80031ea:	881a      	ldrh	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	3b01      	subs	r3, #1
 80031fa:	b29a      	uxth	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003204:	b29b      	uxth	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d113      	bne.n	8003232 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	685a      	ldr	r2, [r3, #4]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003218:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800321e:	b29b      	uxth	r3, r3
 8003220:	2b00      	cmp	r3, #0
 8003222:	d106      	bne.n	8003232 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7fd f967 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003248:	1c99      	adds	r1, r3, #2
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	6251      	str	r1, [r2, #36]	; 0x24
 800324e:	8819      	ldrh	r1, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a1d      	ldr	r2, [pc, #116]	; (80032cc <I2SEx_TxISR_I2SExt+0x90>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d101      	bne.n	800325e <I2SEx_TxISR_I2SExt+0x22>
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <I2SEx_TxISR_I2SExt+0x94>)
 800325c:	e001      	b.n	8003262 <I2SEx_TxISR_I2SExt+0x26>
 800325e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003262:	460a      	mov	r2, r1
 8003264:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003278:	b29b      	uxth	r3, r3
 800327a:	2b00      	cmp	r3, #0
 800327c:	d121      	bne.n	80032c2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a12      	ldr	r2, [pc, #72]	; (80032cc <I2SEx_TxISR_I2SExt+0x90>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d101      	bne.n	800328c <I2SEx_TxISR_I2SExt+0x50>
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <I2SEx_TxISR_I2SExt+0x94>)
 800328a:	e001      	b.n	8003290 <I2SEx_TxISR_I2SExt+0x54>
 800328c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	490d      	ldr	r1, [pc, #52]	; (80032cc <I2SEx_TxISR_I2SExt+0x90>)
 8003298:	428b      	cmp	r3, r1
 800329a:	d101      	bne.n	80032a0 <I2SEx_TxISR_I2SExt+0x64>
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <I2SEx_TxISR_I2SExt+0x94>)
 800329e:	e001      	b.n	80032a4 <I2SEx_TxISR_I2SExt+0x68>
 80032a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80032a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d106      	bne.n	80032c2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032bc:	6878      	ldr	r0, [r7, #4]
 80032be:	f7fd f91f 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}
 80032ca:	bf00      	nop
 80032cc:	40003800 	.word	0x40003800
 80032d0:	40003400 	.word	0x40003400

080032d4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68d8      	ldr	r0, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e6:	1c99      	adds	r1, r3, #2
 80032e8:	687a      	ldr	r2, [r7, #4]
 80032ea:	62d1      	str	r1, [r2, #44]	; 0x2c
 80032ec:	b282      	uxth	r2, r0
 80032ee:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80032f4:	b29b      	uxth	r3, r3
 80032f6:	3b01      	subs	r3, #1
 80032f8:	b29a      	uxth	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003302:	b29b      	uxth	r3, r3
 8003304:	2b00      	cmp	r3, #0
 8003306:	d113      	bne.n	8003330 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	685a      	ldr	r2, [r3, #4]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003316:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800331c:	b29b      	uxth	r3, r3
 800331e:	2b00      	cmp	r3, #0
 8003320:	d106      	bne.n	8003330 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2201      	movs	r2, #1
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f7fd f8e8 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003330:	bf00      	nop
 8003332:	3708      	adds	r7, #8
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a20      	ldr	r2, [pc, #128]	; (80033c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d101      	bne.n	800334e <I2SEx_RxISR_I2SExt+0x16>
 800334a:	4b20      	ldr	r3, [pc, #128]	; (80033cc <I2SEx_RxISR_I2SExt+0x94>)
 800334c:	e001      	b.n	8003352 <I2SEx_RxISR_I2SExt+0x1a>
 800334e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003352:	68d8      	ldr	r0, [r3, #12]
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003358:	1c99      	adds	r1, r3, #2
 800335a:	687a      	ldr	r2, [r7, #4]
 800335c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800335e:	b282      	uxth	r2, r0
 8003360:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003366:	b29b      	uxth	r3, r3
 8003368:	3b01      	subs	r3, #1
 800336a:	b29a      	uxth	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003374:	b29b      	uxth	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d121      	bne.n	80033be <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a12      	ldr	r2, [pc, #72]	; (80033c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d101      	bne.n	8003388 <I2SEx_RxISR_I2SExt+0x50>
 8003384:	4b11      	ldr	r3, [pc, #68]	; (80033cc <I2SEx_RxISR_I2SExt+0x94>)
 8003386:	e001      	b.n	800338c <I2SEx_RxISR_I2SExt+0x54>
 8003388:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	490d      	ldr	r1, [pc, #52]	; (80033c8 <I2SEx_RxISR_I2SExt+0x90>)
 8003394:	428b      	cmp	r3, r1
 8003396:	d101      	bne.n	800339c <I2SEx_RxISR_I2SExt+0x64>
 8003398:	4b0c      	ldr	r3, [pc, #48]	; (80033cc <I2SEx_RxISR_I2SExt+0x94>)
 800339a:	e001      	b.n	80033a0 <I2SEx_RxISR_I2SExt+0x68>
 800339c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80033a4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033aa:	b29b      	uxth	r3, r3
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d106      	bne.n	80033be <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f7fd f8a1 	bl	8000500 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80033be:	bf00      	nop
 80033c0:	3708      	adds	r7, #8
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	40003800 	.word	0x40003800
 80033cc:	40003400 	.word	0x40003400

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e267      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b82      	ldr	r3, [pc, #520]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e242      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b70      	ldr	r3, [pc, #448]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6f      	ldr	r2, [pc, #444]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b69      	ldr	r3, [pc, #420]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a68      	ldr	r2, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7fd fec4 	bl	8001214 <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7fd fec0 	bl	8001214 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e207      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7fd feb0 	bl	8001214 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7fd feac 	bl	8001214 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1f3      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b51      	ldr	r3, [pc, #324]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b41      	ldr	r3, [pc, #260]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c7      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCC_OscConfig+0x244>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7fd fe65 	bl	8001214 <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7fd fe61 	bl	8001214 <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a8      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4925      	ldr	r1, [pc, #148]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x244>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7fd fe44 	bl	8001214 <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7fd fe40 	bl	8001214 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e187      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d036      	beq.n	8003628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x248>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7fd fe24 	bl	8001214 <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7fd fe20 	bl	8001214 <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e167      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_OscConfig+0x248>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7fd fe0d 	bl	8001214 <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e00e      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fe:	f7fd fe09 	bl	8001214 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d907      	bls.n	800361c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e150      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ea      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8097 	beq.w	8003764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b7d      	ldr	r3, [pc, #500]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b7a      	ldr	r3, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b77      	ldr	r3, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b74      	ldr	r3, [pc, #464]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7fd fdc9 	bl	8001214 <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7fd fdc5 	bl	8001214 <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e10c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x2ea>
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x30c>
 80036c2:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036dc:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	4b55      	ldr	r3, [pc, #340]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7fd fd8a 	bl	8001214 <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7fd fd86 	bl	8001214 <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0cb      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x334>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7fd fd74 	bl	8001214 <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7fd fd70 	bl	8001214 <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b5      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a1 	beq.w	80038b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d05c      	beq.n	8003834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d141      	bne.n	8003806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7fd fd44 	bl	8001214 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7fd fd40 	bl	8001214 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e087      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	491b      	ldr	r1, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd fd19 	bl	8001214 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7fd fd15 	bl	8001214 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e05c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x416>
 8003804:	e054      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7fd fd02 	bl	8001214 <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7fd fcfe 	bl	8001214 <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e045      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e038      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x4ec>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d028      	beq.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d11a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7fd fc30 	bl	8001214 <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7fd fc2c 	bl	8001214 <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fd fb90 	bl	800118c <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	08004a3c 	.word	0x08004a3c
 8003a84:	20000004 	.word	0x20000004
 8003a88:	20000008 	.word	0x20000008

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b090      	sub	sp, #64	; 0x40
 8003a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	637b      	str	r3, [r7, #52]	; 0x34
 8003a98:	2300      	movs	r3, #0
 8003a9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b59      	ldr	r3, [pc, #356]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d00d      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 80a1 	bhi.w	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003abe:	e09b      	b.n	8003bf8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b53      	ldr	r3, [pc, #332]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003ac2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003ac4:	e09b      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b53      	ldr	r3, [pc, #332]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003ac8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003aca:	e098      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003acc:	4b4f      	ldr	r3, [pc, #316]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad6:	4b4d      	ldr	r3, [pc, #308]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d028      	beq.n	8003b34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b4a      	ldr	r3, [pc, #296]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	623b      	str	r3, [r7, #32]
 8003aec:	627a      	str	r2, [r7, #36]	; 0x24
 8003aee:	6a3b      	ldr	r3, [r7, #32]
 8003af0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003af4:	2100      	movs	r1, #0
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003af8:	fb03 f201 	mul.w	r2, r3, r1
 8003afc:	2300      	movs	r3, #0
 8003afe:	fb00 f303 	mul.w	r3, r0, r3
 8003b02:	4413      	add	r3, r2
 8003b04:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003b06:	fba0 1202 	umull	r1, r2, r0, r2
 8003b0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b0c:	460a      	mov	r2, r1
 8003b0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b12:	4413      	add	r3, r2
 8003b14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	2200      	movs	r2, #0
 8003b1a:	61bb      	str	r3, [r7, #24]
 8003b1c:	61fa      	str	r2, [r7, #28]
 8003b1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b26:	f7fc fb4f 	bl	80001c8 <__aeabi_uldivmod>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	4613      	mov	r3, r2
 8003b30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b32:	e053      	b.n	8003bdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b34:	4b35      	ldr	r3, [pc, #212]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003b36:	685b      	ldr	r3, [r3, #4]
 8003b38:	099b      	lsrs	r3, r3, #6
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	617a      	str	r2, [r7, #20]
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b46:	f04f 0b00 	mov.w	fp, #0
 8003b4a:	4652      	mov	r2, sl
 8003b4c:	465b      	mov	r3, fp
 8003b4e:	f04f 0000 	mov.w	r0, #0
 8003b52:	f04f 0100 	mov.w	r1, #0
 8003b56:	0159      	lsls	r1, r3, #5
 8003b58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b5c:	0150      	lsls	r0, r2, #5
 8003b5e:	4602      	mov	r2, r0
 8003b60:	460b      	mov	r3, r1
 8003b62:	ebb2 080a 	subs.w	r8, r2, sl
 8003b66:	eb63 090b 	sbc.w	r9, r3, fp
 8003b6a:	f04f 0200 	mov.w	r2, #0
 8003b6e:	f04f 0300 	mov.w	r3, #0
 8003b72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003b82:	eb63 0509 	sbc.w	r5, r3, r9
 8003b86:	f04f 0200 	mov.w	r2, #0
 8003b8a:	f04f 0300 	mov.w	r3, #0
 8003b8e:	00eb      	lsls	r3, r5, #3
 8003b90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b94:	00e2      	lsls	r2, r4, #3
 8003b96:	4614      	mov	r4, r2
 8003b98:	461d      	mov	r5, r3
 8003b9a:	eb14 030a 	adds.w	r3, r4, sl
 8003b9e:	603b      	str	r3, [r7, #0]
 8003ba0:	eb45 030b 	adc.w	r3, r5, fp
 8003ba4:	607b      	str	r3, [r7, #4]
 8003ba6:	f04f 0200 	mov.w	r2, #0
 8003baa:	f04f 0300 	mov.w	r3, #0
 8003bae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	028b      	lsls	r3, r1, #10
 8003bb6:	4621      	mov	r1, r4
 8003bb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	028a      	lsls	r2, r1, #10
 8003bc0:	4610      	mov	r0, r2
 8003bc2:	4619      	mov	r1, r3
 8003bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	60fa      	str	r2, [r7, #12]
 8003bcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd0:	f7fc fafa 	bl	80001c8 <__aeabi_uldivmod>
 8003bd4:	4602      	mov	r2, r0
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4613      	mov	r3, r2
 8003bda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003bdc:	4b0b      	ldr	r3, [pc, #44]	; (8003c0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bde:	685b      	ldr	r3, [r3, #4]
 8003be0:	0c1b      	lsrs	r3, r3, #16
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	3301      	adds	r3, #1
 8003be8:	005b      	lsls	r3, r3, #1
 8003bea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bf6:	e002      	b.n	8003bfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bf8:	4b05      	ldr	r3, [pc, #20]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003bfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3740      	adds	r7, #64	; 0x40
 8003c04:	46bd      	mov	sp, r7
 8003c06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0a:	bf00      	nop
 8003c0c:	40023800 	.word	0x40023800
 8003c10:	00f42400 	.word	0x00f42400
 8003c14:	018cba80 	.word	0x018cba80

08003c18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c1c:	4b03      	ldr	r3, [pc, #12]	; (8003c2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	20000004 	.word	0x20000004

08003c30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c34:	f7ff fff0 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	0a9b      	lsrs	r3, r3, #10
 8003c40:	f003 0307 	and.w	r3, r3, #7
 8003c44:	4903      	ldr	r1, [pc, #12]	; (8003c54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c46:	5ccb      	ldrb	r3, [r1, r3]
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	40023800 	.word	0x40023800
 8003c54:	08004a4c 	.word	0x08004a4c

08003c58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003c5c:	f7ff ffdc 	bl	8003c18 <HAL_RCC_GetHCLKFreq>
 8003c60:	4602      	mov	r2, r0
 8003c62:	4b05      	ldr	r3, [pc, #20]	; (8003c78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	0b5b      	lsrs	r3, r3, #13
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	4903      	ldr	r1, [pc, #12]	; (8003c7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003c6e:	5ccb      	ldrb	r3, [r1, r3]
 8003c70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	bd80      	pop	{r7, pc}
 8003c78:	40023800 	.word	0x40023800
 8003c7c:	08004a4c 	.word	0x08004a4c

08003c80 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0301 	and.w	r3, r3, #1
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d105      	bne.n	8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d035      	beq.n	8003d14 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ca8:	4b62      	ldr	r3, [pc, #392]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cae:	f7fd fab1 	bl	8001214 <HAL_GetTick>
 8003cb2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cb6:	f7fd faad 	bl	8001214 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e0b0      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003cc8:	4b5b      	ldr	r3, [pc, #364]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1f0      	bne.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	019a      	lsls	r2, r3, #6
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	071b      	lsls	r3, r3, #28
 8003ce0:	4955      	ldr	r1, [pc, #340]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ce8:	4b52      	ldr	r3, [pc, #328]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003cea:	2201      	movs	r2, #1
 8003cec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003cee:	f7fd fa91 	bl	8001214 <HAL_GetTick>
 8003cf2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003cf4:	e008      	b.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003cf6:	f7fd fa8d 	bl	8001214 <HAL_GetTick>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	1ad3      	subs	r3, r2, r3
 8003d00:	2b02      	cmp	r3, #2
 8003d02:	d901      	bls.n	8003d08 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d04:	2303      	movs	r3, #3
 8003d06:	e090      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d08:	4b4b      	ldr	r3, [pc, #300]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d0f0      	beq.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f003 0302 	and.w	r3, r3, #2
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	f000 8083 	beq.w	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d22:	2300      	movs	r3, #0
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2a:	4a43      	ldr	r2, [pc, #268]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d30:	6413      	str	r3, [r2, #64]	; 0x40
 8003d32:	4b41      	ldr	r3, [pc, #260]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	60fb      	str	r3, [r7, #12]
 8003d3c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003d3e:	4b3f      	ldr	r3, [pc, #252]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a3e      	ldr	r2, [pc, #248]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d44:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d48:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d4a:	f7fd fa63 	bl	8001214 <HAL_GetTick>
 8003d4e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d50:	e008      	b.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003d52:	f7fd fa5f 	bl	8001214 <HAL_GetTick>
 8003d56:	4602      	mov	r2, r0
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	1ad3      	subs	r3, r2, r3
 8003d5c:	2b02      	cmp	r3, #2
 8003d5e:	d901      	bls.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e062      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003d64:	4b35      	ldr	r3, [pc, #212]	; (8003e3c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0f0      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d70:	4b31      	ldr	r3, [pc, #196]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d78:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d7a:	693b      	ldr	r3, [r7, #16]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d02f      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d88:	693a      	ldr	r2, [r7, #16]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d028      	beq.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d8e:	4b2a      	ldr	r3, [pc, #168]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d98:	4b29      	ldr	r3, [pc, #164]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003d9e:	4b28      	ldr	r3, [pc, #160]	; (8003e40 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003da4:	4a24      	ldr	r2, [pc, #144]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003daa:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d114      	bne.n	8003de0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003db6:	f7fd fa2d 	bl	8001214 <HAL_GetTick>
 8003dba:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	e00a      	b.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dbe:	f7fd fa29 	bl	8001214 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dcc:	4293      	cmp	r3, r2
 8003dce:	d901      	bls.n	8003dd4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e02a      	b.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dd4:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d0ee      	beq.n	8003dbe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003de8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dec:	d10d      	bne.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	68db      	ldr	r3, [r3, #12]
 8003dfa:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e02:	490d      	ldr	r1, [pc, #52]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e04:	4313      	orrs	r3, r2
 8003e06:	608b      	str	r3, [r1, #8]
 8003e08:	e005      	b.n	8003e16 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003e0a:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	4a0a      	ldr	r2, [pc, #40]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e10:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e14:	6093      	str	r3, [r2, #8]
 8003e16:	4b08      	ldr	r3, [pc, #32]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e18:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003e22:	4905      	ldr	r1, [pc, #20]	; (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3718      	adds	r7, #24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	42470068 	.word	0x42470068
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40007000 	.word	0x40007000
 8003e40:	42470e40 	.word	0x42470e40

08003e44 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b087      	sub	sp, #28
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003e50:	2300      	movs	r3, #0
 8003e52:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003e54:	2300      	movs	r3, #0
 8003e56:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2b01      	cmp	r3, #1
 8003e60:	d13e      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003e62:	4b23      	ldr	r3, [pc, #140]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e6a:	60fb      	str	r3, [r7, #12]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d005      	beq.n	8003e7e <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b01      	cmp	r3, #1
 8003e76:	d12f      	bne.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003e78:	4b1e      	ldr	r3, [pc, #120]	; (8003ef4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003e7a:	617b      	str	r3, [r7, #20]
          break;
 8003e7c:	e02f      	b.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003e7e:	4b1c      	ldr	r3, [pc, #112]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e8a:	d108      	bne.n	8003e9e <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e8c:	4b18      	ldr	r3, [pc, #96]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003e8e:	685b      	ldr	r3, [r3, #4]
 8003e90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e94:	4a18      	ldr	r2, [pc, #96]	; (8003ef8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003e96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e9a:	613b      	str	r3, [r7, #16]
 8003e9c:	e007      	b.n	8003eae <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003e9e:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ea6:	4a15      	ldr	r2, [pc, #84]	; (8003efc <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eac:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003eb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eb4:	099b      	lsrs	r3, r3, #6
 8003eb6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec8:	0f1b      	lsrs	r3, r3, #28
 8003eca:	f003 0307 	and.w	r3, r3, #7
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ed4:	617b      	str	r3, [r7, #20]
          break;
 8003ed6:	e002      	b.n	8003ede <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]
          break;
 8003edc:	bf00      	nop
        }
      }
      break;
 8003ede:	bf00      	nop
    }
  }
  return frequency;
 8003ee0:	697b      	ldr	r3, [r7, #20]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eec:	4770      	bx	lr
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	00bb8000 	.word	0x00bb8000
 8003ef8:	018cba80 	.word	0x018cba80
 8003efc:	00f42400 	.word	0x00f42400

08003f00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e041      	b.n	8003f96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd f81a 	bl	8000f60 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2202      	movs	r2, #2
 8003f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681a      	ldr	r2, [r3, #0]
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	3304      	adds	r3, #4
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	4610      	mov	r0, r2
 8003f40:	f000 f9ce 	bl	80042e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3708      	adds	r7, #8
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d001      	beq.n	8003fb8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e04e      	b.n	8004056 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2202      	movs	r2, #2
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68da      	ldr	r2, [r3, #12]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f042 0201 	orr.w	r2, r2, #1
 8003fce:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a23      	ldr	r2, [pc, #140]	; (8004064 <HAL_TIM_Base_Start_IT+0xc4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d022      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d01d      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1f      	ldr	r2, [pc, #124]	; (8004068 <HAL_TIM_Base_Start_IT+0xc8>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d018      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a1e      	ldr	r2, [pc, #120]	; (800406c <HAL_TIM_Base_Start_IT+0xcc>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d013      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a1c      	ldr	r2, [pc, #112]	; (8004070 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d00e      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a1b      	ldr	r2, [pc, #108]	; (8004074 <HAL_TIM_Base_Start_IT+0xd4>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d009      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a19      	ldr	r2, [pc, #100]	; (8004078 <HAL_TIM_Base_Start_IT+0xd8>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d004      	beq.n	8004020 <HAL_TIM_Base_Start_IT+0x80>
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a18      	ldr	r2, [pc, #96]	; (800407c <HAL_TIM_Base_Start_IT+0xdc>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d111      	bne.n	8004044 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	f003 0307 	and.w	r3, r3, #7
 800402a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b06      	cmp	r3, #6
 8004030:	d010      	beq.n	8004054 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f042 0201 	orr.w	r2, r2, #1
 8004040:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004042:	e007      	b.n	8004054 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004054:	2300      	movs	r3, #0
}
 8004056:	4618      	mov	r0, r3
 8004058:	3714      	adds	r7, #20
 800405a:	46bd      	mov	sp, r7
 800405c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004060:	4770      	bx	lr
 8004062:	bf00      	nop
 8004064:	40010000 	.word	0x40010000
 8004068:	40000400 	.word	0x40000400
 800406c:	40000800 	.word	0x40000800
 8004070:	40000c00 	.word	0x40000c00
 8004074:	40010400 	.word	0x40010400
 8004078:	40014000 	.word	0x40014000
 800407c:	40001800 	.word	0x40001800

08004080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b082      	sub	sp, #8
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b02      	cmp	r3, #2
 8004094:	d122      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68db      	ldr	r3, [r3, #12]
 800409c:	f003 0302 	and.w	r3, r3, #2
 80040a0:	2b02      	cmp	r3, #2
 80040a2:	d11b      	bne.n	80040dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f06f 0202 	mvn.w	r2, #2
 80040ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2201      	movs	r2, #1
 80040b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	f003 0303 	and.w	r3, r3, #3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f8ee 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 80040c8:	e005      	b.n	80040d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 f8e0 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040d0:	6878      	ldr	r0, [r7, #4]
 80040d2:	f000 f8f1 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	2200      	movs	r2, #0
 80040da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0304 	and.w	r3, r3, #4
 80040e6:	2b04      	cmp	r3, #4
 80040e8:	d122      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0304 	and.w	r3, r3, #4
 80040f4:	2b04      	cmp	r3, #4
 80040f6:	d11b      	bne.n	8004130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0204 	mvn.w	r2, #4
 8004100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2202      	movs	r2, #2
 8004106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004112:	2b00      	cmp	r3, #0
 8004114:	d003      	beq.n	800411e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 f8c4 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 800411c:	e005      	b.n	800412a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 f8b6 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f8c7 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	2200      	movs	r2, #0
 800412e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	691b      	ldr	r3, [r3, #16]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b08      	cmp	r3, #8
 800413c:	d122      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68db      	ldr	r3, [r3, #12]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d11b      	bne.n	8004184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f06f 0208 	mvn.w	r2, #8
 8004154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2204      	movs	r2, #4
 800415a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	69db      	ldr	r3, [r3, #28]
 8004162:	f003 0303 	and.w	r3, r3, #3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d003      	beq.n	8004172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f89a 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 8004170:	e005      	b.n	800417e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f000 f88c 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 f89d 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b10      	cmp	r3, #16
 8004190:	d122      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68db      	ldr	r3, [r3, #12]
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b10      	cmp	r3, #16
 800419e:	d11b      	bne.n	80041d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f06f 0210 	mvn.w	r2, #16
 80041a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2208      	movs	r2, #8
 80041ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	69db      	ldr	r3, [r3, #28]
 80041b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d003      	beq.n	80041c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 f870 	bl	80042a4 <HAL_TIM_IC_CaptureCallback>
 80041c4:	e005      	b.n	80041d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f862 	bl	8004290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f000 f873 	bl	80042b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2200      	movs	r2, #0
 80041d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	f003 0301 	and.w	r3, r3, #1
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d10e      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	f003 0301 	and.w	r3, r3, #1
 80041f0:	2b01      	cmp	r3, #1
 80041f2:	d107      	bne.n	8004204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f06f 0201 	mvn.w	r2, #1
 80041fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f7fc fc98 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	691b      	ldr	r3, [r3, #16]
 800420a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800420e:	2b80      	cmp	r3, #128	; 0x80
 8004210:	d10e      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800421c:	2b80      	cmp	r3, #128	; 0x80
 800421e:	d107      	bne.n	8004230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f902 	bl	8004434 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800423a:	2b40      	cmp	r3, #64	; 0x40
 800423c:	d10e      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d107      	bne.n	800425c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f000 f838 	bl	80042cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	f003 0320 	and.w	r3, r3, #32
 8004266:	2b20      	cmp	r3, #32
 8004268:	d10e      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	f003 0320 	and.w	r3, r3, #32
 8004274:	2b20      	cmp	r3, #32
 8004276:	d107      	bne.n	8004288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f06f 0220 	mvn.w	r2, #32
 8004280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f000 f8cc 	bl	8004420 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004288:	bf00      	nop
 800428a:	3708      	adds	r7, #8
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004298:	bf00      	nop
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b083      	sub	sp, #12
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80042ac:	bf00      	nop
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80042c0:	bf00      	nop
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b083      	sub	sp, #12
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b085      	sub	sp, #20
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a40      	ldr	r2, [pc, #256]	; (80043f4 <TIM_Base_SetConfig+0x114>)
 80042f4:	4293      	cmp	r3, r2
 80042f6:	d013      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042fe:	d00f      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	4a3d      	ldr	r2, [pc, #244]	; (80043f8 <TIM_Base_SetConfig+0x118>)
 8004304:	4293      	cmp	r3, r2
 8004306:	d00b      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a3c      	ldr	r2, [pc, #240]	; (80043fc <TIM_Base_SetConfig+0x11c>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d007      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a3b      	ldr	r2, [pc, #236]	; (8004400 <TIM_Base_SetConfig+0x120>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d003      	beq.n	8004320 <TIM_Base_SetConfig+0x40>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a3a      	ldr	r2, [pc, #232]	; (8004404 <TIM_Base_SetConfig+0x124>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d108      	bne.n	8004332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685b      	ldr	r3, [r3, #4]
 800432c:	68fa      	ldr	r2, [r7, #12]
 800432e:	4313      	orrs	r3, r2
 8004330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	4a2f      	ldr	r2, [pc, #188]	; (80043f4 <TIM_Base_SetConfig+0x114>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d02b      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004340:	d027      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4a2c      	ldr	r2, [pc, #176]	; (80043f8 <TIM_Base_SetConfig+0x118>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d023      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	4a2b      	ldr	r2, [pc, #172]	; (80043fc <TIM_Base_SetConfig+0x11c>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d01f      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	4a2a      	ldr	r2, [pc, #168]	; (8004400 <TIM_Base_SetConfig+0x120>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d01b      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	4a29      	ldr	r2, [pc, #164]	; (8004404 <TIM_Base_SetConfig+0x124>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d017      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a28      	ldr	r2, [pc, #160]	; (8004408 <TIM_Base_SetConfig+0x128>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d013      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	4a27      	ldr	r2, [pc, #156]	; (800440c <TIM_Base_SetConfig+0x12c>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00f      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	4a26      	ldr	r2, [pc, #152]	; (8004410 <TIM_Base_SetConfig+0x130>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d00b      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a25      	ldr	r2, [pc, #148]	; (8004414 <TIM_Base_SetConfig+0x134>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d007      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a24      	ldr	r2, [pc, #144]	; (8004418 <TIM_Base_SetConfig+0x138>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d003      	beq.n	8004392 <TIM_Base_SetConfig+0xb2>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	4a23      	ldr	r2, [pc, #140]	; (800441c <TIM_Base_SetConfig+0x13c>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d108      	bne.n	80043a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	695b      	ldr	r3, [r3, #20]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80043b8:	683b      	ldr	r3, [r7, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	4a0a      	ldr	r2, [pc, #40]	; (80043f4 <TIM_Base_SetConfig+0x114>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d003      	beq.n	80043d8 <TIM_Base_SetConfig+0xf8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a0c      	ldr	r2, [pc, #48]	; (8004404 <TIM_Base_SetConfig+0x124>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d103      	bne.n	80043e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	691a      	ldr	r2, [r3, #16]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2201      	movs	r2, #1
 80043e4:	615a      	str	r2, [r3, #20]
}
 80043e6:	bf00      	nop
 80043e8:	3714      	adds	r7, #20
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	40010000 	.word	0x40010000
 80043f8:	40000400 	.word	0x40000400
 80043fc:	40000800 	.word	0x40000800
 8004400:	40000c00 	.word	0x40000c00
 8004404:	40010400 	.word	0x40010400
 8004408:	40014000 	.word	0x40014000
 800440c:	40014400 	.word	0x40014400
 8004410:	40014800 	.word	0x40014800
 8004414:	40001800 	.word	0x40001800
 8004418:	40001c00 	.word	0x40001c00
 800441c:	40002000 	.word	0x40002000

08004420 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr

08004434 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d101      	bne.n	800445a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e03f      	b.n	80044da <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b00      	cmp	r3, #0
 8004464:	d106      	bne.n	8004474 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fc fd9e 	bl	8000fb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2224      	movs	r2, #36	; 0x24
 8004478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68da      	ldr	r2, [r3, #12]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800448a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f829 	bl	80044e4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	691a      	ldr	r2, [r3, #16]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	695a      	ldr	r2, [r3, #20]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80044c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2220      	movs	r2, #32
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3708      	adds	r7, #8
 80044de:	46bd      	mov	sp, r7
 80044e0:	bd80      	pop	{r7, pc}
	...

080044e4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044e8:	b0c0      	sub	sp, #256	; 0x100
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	691b      	ldr	r3, [r3, #16]
 80044f8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004500:	68d9      	ldr	r1, [r3, #12]
 8004502:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	ea40 0301 	orr.w	r3, r0, r1
 800450c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	689a      	ldr	r2, [r3, #8]
 8004514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004518:	691b      	ldr	r3, [r3, #16]
 800451a:	431a      	orrs	r2, r3
 800451c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004520:	695b      	ldr	r3, [r3, #20]
 8004522:	431a      	orrs	r2, r3
 8004524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	4313      	orrs	r3, r2
 800452c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800453c:	f021 010c 	bic.w	r1, r1, #12
 8004540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800454a:	430b      	orrs	r3, r1
 800454c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	6999      	ldr	r1, [r3, #24]
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	ea40 0301 	orr.w	r3, r0, r1
 800456a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800456c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	4b8f      	ldr	r3, [pc, #572]	; (80047b0 <UART_SetConfig+0x2cc>)
 8004574:	429a      	cmp	r2, r3
 8004576:	d005      	beq.n	8004584 <UART_SetConfig+0xa0>
 8004578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	4b8d      	ldr	r3, [pc, #564]	; (80047b4 <UART_SetConfig+0x2d0>)
 8004580:	429a      	cmp	r2, r3
 8004582:	d104      	bne.n	800458e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004584:	f7ff fb68 	bl	8003c58 <HAL_RCC_GetPCLK2Freq>
 8004588:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800458c:	e003      	b.n	8004596 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800458e:	f7ff fb4f 	bl	8003c30 <HAL_RCC_GetPCLK1Freq>
 8004592:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045a0:	f040 810c 	bne.w	80047bc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045a8:	2200      	movs	r2, #0
 80045aa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045ae:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045b2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80045b6:	4622      	mov	r2, r4
 80045b8:	462b      	mov	r3, r5
 80045ba:	1891      	adds	r1, r2, r2
 80045bc:	65b9      	str	r1, [r7, #88]	; 0x58
 80045be:	415b      	adcs	r3, r3
 80045c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80045c2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80045c6:	4621      	mov	r1, r4
 80045c8:	eb12 0801 	adds.w	r8, r2, r1
 80045cc:	4629      	mov	r1, r5
 80045ce:	eb43 0901 	adc.w	r9, r3, r1
 80045d2:	f04f 0200 	mov.w	r2, #0
 80045d6:	f04f 0300 	mov.w	r3, #0
 80045da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80045de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80045e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80045e6:	4690      	mov	r8, r2
 80045e8:	4699      	mov	r9, r3
 80045ea:	4623      	mov	r3, r4
 80045ec:	eb18 0303 	adds.w	r3, r8, r3
 80045f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80045f4:	462b      	mov	r3, r5
 80045f6:	eb49 0303 	adc.w	r3, r9, r3
 80045fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80045fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	2200      	movs	r2, #0
 8004606:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800460a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800460e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004612:	460b      	mov	r3, r1
 8004614:	18db      	adds	r3, r3, r3
 8004616:	653b      	str	r3, [r7, #80]	; 0x50
 8004618:	4613      	mov	r3, r2
 800461a:	eb42 0303 	adc.w	r3, r2, r3
 800461e:	657b      	str	r3, [r7, #84]	; 0x54
 8004620:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004624:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004628:	f7fb fdce 	bl	80001c8 <__aeabi_uldivmod>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	4b61      	ldr	r3, [pc, #388]	; (80047b8 <UART_SetConfig+0x2d4>)
 8004632:	fba3 2302 	umull	r2, r3, r3, r2
 8004636:	095b      	lsrs	r3, r3, #5
 8004638:	011c      	lsls	r4, r3, #4
 800463a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800463e:	2200      	movs	r2, #0
 8004640:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004644:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004648:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800464c:	4642      	mov	r2, r8
 800464e:	464b      	mov	r3, r9
 8004650:	1891      	adds	r1, r2, r2
 8004652:	64b9      	str	r1, [r7, #72]	; 0x48
 8004654:	415b      	adcs	r3, r3
 8004656:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004658:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800465c:	4641      	mov	r1, r8
 800465e:	eb12 0a01 	adds.w	sl, r2, r1
 8004662:	4649      	mov	r1, r9
 8004664:	eb43 0b01 	adc.w	fp, r3, r1
 8004668:	f04f 0200 	mov.w	r2, #0
 800466c:	f04f 0300 	mov.w	r3, #0
 8004670:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004674:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004678:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800467c:	4692      	mov	sl, r2
 800467e:	469b      	mov	fp, r3
 8004680:	4643      	mov	r3, r8
 8004682:	eb1a 0303 	adds.w	r3, sl, r3
 8004686:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800468a:	464b      	mov	r3, r9
 800468c:	eb4b 0303 	adc.w	r3, fp, r3
 8004690:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046a0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046a4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046a8:	460b      	mov	r3, r1
 80046aa:	18db      	adds	r3, r3, r3
 80046ac:	643b      	str	r3, [r7, #64]	; 0x40
 80046ae:	4613      	mov	r3, r2
 80046b0:	eb42 0303 	adc.w	r3, r2, r3
 80046b4:	647b      	str	r3, [r7, #68]	; 0x44
 80046b6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80046ba:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80046be:	f7fb fd83 	bl	80001c8 <__aeabi_uldivmod>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4611      	mov	r1, r2
 80046c8:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <UART_SetConfig+0x2d4>)
 80046ca:	fba3 2301 	umull	r2, r3, r3, r1
 80046ce:	095b      	lsrs	r3, r3, #5
 80046d0:	2264      	movs	r2, #100	; 0x64
 80046d2:	fb02 f303 	mul.w	r3, r2, r3
 80046d6:	1acb      	subs	r3, r1, r3
 80046d8:	00db      	lsls	r3, r3, #3
 80046da:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80046de:	4b36      	ldr	r3, [pc, #216]	; (80047b8 <UART_SetConfig+0x2d4>)
 80046e0:	fba3 2302 	umull	r2, r3, r3, r2
 80046e4:	095b      	lsrs	r3, r3, #5
 80046e6:	005b      	lsls	r3, r3, #1
 80046e8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80046ec:	441c      	add	r4, r3
 80046ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046f2:	2200      	movs	r2, #0
 80046f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80046f8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80046fc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004700:	4642      	mov	r2, r8
 8004702:	464b      	mov	r3, r9
 8004704:	1891      	adds	r1, r2, r2
 8004706:	63b9      	str	r1, [r7, #56]	; 0x38
 8004708:	415b      	adcs	r3, r3
 800470a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800470c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004710:	4641      	mov	r1, r8
 8004712:	1851      	adds	r1, r2, r1
 8004714:	6339      	str	r1, [r7, #48]	; 0x30
 8004716:	4649      	mov	r1, r9
 8004718:	414b      	adcs	r3, r1
 800471a:	637b      	str	r3, [r7, #52]	; 0x34
 800471c:	f04f 0200 	mov.w	r2, #0
 8004720:	f04f 0300 	mov.w	r3, #0
 8004724:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004728:	4659      	mov	r1, fp
 800472a:	00cb      	lsls	r3, r1, #3
 800472c:	4651      	mov	r1, sl
 800472e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004732:	4651      	mov	r1, sl
 8004734:	00ca      	lsls	r2, r1, #3
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	4603      	mov	r3, r0
 800473c:	4642      	mov	r2, r8
 800473e:	189b      	adds	r3, r3, r2
 8004740:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004744:	464b      	mov	r3, r9
 8004746:	460a      	mov	r2, r1
 8004748:	eb42 0303 	adc.w	r3, r2, r3
 800474c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800475c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004760:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004764:	460b      	mov	r3, r1
 8004766:	18db      	adds	r3, r3, r3
 8004768:	62bb      	str	r3, [r7, #40]	; 0x28
 800476a:	4613      	mov	r3, r2
 800476c:	eb42 0303 	adc.w	r3, r2, r3
 8004770:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004772:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004776:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800477a:	f7fb fd25 	bl	80001c8 <__aeabi_uldivmod>
 800477e:	4602      	mov	r2, r0
 8004780:	460b      	mov	r3, r1
 8004782:	4b0d      	ldr	r3, [pc, #52]	; (80047b8 <UART_SetConfig+0x2d4>)
 8004784:	fba3 1302 	umull	r1, r3, r3, r2
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	2164      	movs	r1, #100	; 0x64
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	00db      	lsls	r3, r3, #3
 8004794:	3332      	adds	r3, #50	; 0x32
 8004796:	4a08      	ldr	r2, [pc, #32]	; (80047b8 <UART_SetConfig+0x2d4>)
 8004798:	fba2 2303 	umull	r2, r3, r2, r3
 800479c:	095b      	lsrs	r3, r3, #5
 800479e:	f003 0207 	and.w	r2, r3, #7
 80047a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4422      	add	r2, r4
 80047aa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047ac:	e106      	b.n	80049bc <UART_SetConfig+0x4d8>
 80047ae:	bf00      	nop
 80047b0:	40011000 	.word	0x40011000
 80047b4:	40011400 	.word	0x40011400
 80047b8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80047bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047c0:	2200      	movs	r2, #0
 80047c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80047c6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80047ca:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80047ce:	4642      	mov	r2, r8
 80047d0:	464b      	mov	r3, r9
 80047d2:	1891      	adds	r1, r2, r2
 80047d4:	6239      	str	r1, [r7, #32]
 80047d6:	415b      	adcs	r3, r3
 80047d8:	627b      	str	r3, [r7, #36]	; 0x24
 80047da:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80047de:	4641      	mov	r1, r8
 80047e0:	1854      	adds	r4, r2, r1
 80047e2:	4649      	mov	r1, r9
 80047e4:	eb43 0501 	adc.w	r5, r3, r1
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	00eb      	lsls	r3, r5, #3
 80047f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047f6:	00e2      	lsls	r2, r4, #3
 80047f8:	4614      	mov	r4, r2
 80047fa:	461d      	mov	r5, r3
 80047fc:	4643      	mov	r3, r8
 80047fe:	18e3      	adds	r3, r4, r3
 8004800:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004804:	464b      	mov	r3, r9
 8004806:	eb45 0303 	adc.w	r3, r5, r3
 800480a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800481a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800481e:	f04f 0200 	mov.w	r2, #0
 8004822:	f04f 0300 	mov.w	r3, #0
 8004826:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800482a:	4629      	mov	r1, r5
 800482c:	008b      	lsls	r3, r1, #2
 800482e:	4621      	mov	r1, r4
 8004830:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004834:	4621      	mov	r1, r4
 8004836:	008a      	lsls	r2, r1, #2
 8004838:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800483c:	f7fb fcc4 	bl	80001c8 <__aeabi_uldivmod>
 8004840:	4602      	mov	r2, r0
 8004842:	460b      	mov	r3, r1
 8004844:	4b60      	ldr	r3, [pc, #384]	; (80049c8 <UART_SetConfig+0x4e4>)
 8004846:	fba3 2302 	umull	r2, r3, r3, r2
 800484a:	095b      	lsrs	r3, r3, #5
 800484c:	011c      	lsls	r4, r3, #4
 800484e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004852:	2200      	movs	r2, #0
 8004854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004858:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800485c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004860:	4642      	mov	r2, r8
 8004862:	464b      	mov	r3, r9
 8004864:	1891      	adds	r1, r2, r2
 8004866:	61b9      	str	r1, [r7, #24]
 8004868:	415b      	adcs	r3, r3
 800486a:	61fb      	str	r3, [r7, #28]
 800486c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004870:	4641      	mov	r1, r8
 8004872:	1851      	adds	r1, r2, r1
 8004874:	6139      	str	r1, [r7, #16]
 8004876:	4649      	mov	r1, r9
 8004878:	414b      	adcs	r3, r1
 800487a:	617b      	str	r3, [r7, #20]
 800487c:	f04f 0200 	mov.w	r2, #0
 8004880:	f04f 0300 	mov.w	r3, #0
 8004884:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004888:	4659      	mov	r1, fp
 800488a:	00cb      	lsls	r3, r1, #3
 800488c:	4651      	mov	r1, sl
 800488e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004892:	4651      	mov	r1, sl
 8004894:	00ca      	lsls	r2, r1, #3
 8004896:	4610      	mov	r0, r2
 8004898:	4619      	mov	r1, r3
 800489a:	4603      	mov	r3, r0
 800489c:	4642      	mov	r2, r8
 800489e:	189b      	adds	r3, r3, r2
 80048a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048a4:	464b      	mov	r3, r9
 80048a6:	460a      	mov	r2, r1
 80048a8:	eb42 0303 	adc.w	r3, r2, r3
 80048ac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	67bb      	str	r3, [r7, #120]	; 0x78
 80048ba:	67fa      	str	r2, [r7, #124]	; 0x7c
 80048bc:	f04f 0200 	mov.w	r2, #0
 80048c0:	f04f 0300 	mov.w	r3, #0
 80048c4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80048c8:	4649      	mov	r1, r9
 80048ca:	008b      	lsls	r3, r1, #2
 80048cc:	4641      	mov	r1, r8
 80048ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80048d2:	4641      	mov	r1, r8
 80048d4:	008a      	lsls	r2, r1, #2
 80048d6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80048da:	f7fb fc75 	bl	80001c8 <__aeabi_uldivmod>
 80048de:	4602      	mov	r2, r0
 80048e0:	460b      	mov	r3, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <UART_SetConfig+0x4e4>)
 80048e6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ea:	095b      	lsrs	r3, r3, #5
 80048ec:	2264      	movs	r2, #100	; 0x64
 80048ee:	fb02 f303 	mul.w	r3, r2, r3
 80048f2:	1acb      	subs	r3, r1, r3
 80048f4:	011b      	lsls	r3, r3, #4
 80048f6:	3332      	adds	r3, #50	; 0x32
 80048f8:	4a33      	ldr	r2, [pc, #204]	; (80049c8 <UART_SetConfig+0x4e4>)
 80048fa:	fba2 2303 	umull	r2, r3, r2, r3
 80048fe:	095b      	lsrs	r3, r3, #5
 8004900:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004904:	441c      	add	r4, r3
 8004906:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800490a:	2200      	movs	r2, #0
 800490c:	673b      	str	r3, [r7, #112]	; 0x70
 800490e:	677a      	str	r2, [r7, #116]	; 0x74
 8004910:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004914:	4642      	mov	r2, r8
 8004916:	464b      	mov	r3, r9
 8004918:	1891      	adds	r1, r2, r2
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	415b      	adcs	r3, r3
 800491e:	60fb      	str	r3, [r7, #12]
 8004920:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004924:	4641      	mov	r1, r8
 8004926:	1851      	adds	r1, r2, r1
 8004928:	6039      	str	r1, [r7, #0]
 800492a:	4649      	mov	r1, r9
 800492c:	414b      	adcs	r3, r1
 800492e:	607b      	str	r3, [r7, #4]
 8004930:	f04f 0200 	mov.w	r2, #0
 8004934:	f04f 0300 	mov.w	r3, #0
 8004938:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800493c:	4659      	mov	r1, fp
 800493e:	00cb      	lsls	r3, r1, #3
 8004940:	4651      	mov	r1, sl
 8004942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004946:	4651      	mov	r1, sl
 8004948:	00ca      	lsls	r2, r1, #3
 800494a:	4610      	mov	r0, r2
 800494c:	4619      	mov	r1, r3
 800494e:	4603      	mov	r3, r0
 8004950:	4642      	mov	r2, r8
 8004952:	189b      	adds	r3, r3, r2
 8004954:	66bb      	str	r3, [r7, #104]	; 0x68
 8004956:	464b      	mov	r3, r9
 8004958:	460a      	mov	r2, r1
 800495a:	eb42 0303 	adc.w	r3, r2, r3
 800495e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004960:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	663b      	str	r3, [r7, #96]	; 0x60
 800496a:	667a      	str	r2, [r7, #100]	; 0x64
 800496c:	f04f 0200 	mov.w	r2, #0
 8004970:	f04f 0300 	mov.w	r3, #0
 8004974:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004978:	4649      	mov	r1, r9
 800497a:	008b      	lsls	r3, r1, #2
 800497c:	4641      	mov	r1, r8
 800497e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004982:	4641      	mov	r1, r8
 8004984:	008a      	lsls	r2, r1, #2
 8004986:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800498a:	f7fb fc1d 	bl	80001c8 <__aeabi_uldivmod>
 800498e:	4602      	mov	r2, r0
 8004990:	460b      	mov	r3, r1
 8004992:	4b0d      	ldr	r3, [pc, #52]	; (80049c8 <UART_SetConfig+0x4e4>)
 8004994:	fba3 1302 	umull	r1, r3, r3, r2
 8004998:	095b      	lsrs	r3, r3, #5
 800499a:	2164      	movs	r1, #100	; 0x64
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	011b      	lsls	r3, r3, #4
 80049a4:	3332      	adds	r3, #50	; 0x32
 80049a6:	4a08      	ldr	r2, [pc, #32]	; (80049c8 <UART_SetConfig+0x4e4>)
 80049a8:	fba2 2303 	umull	r2, r3, r2, r3
 80049ac:	095b      	lsrs	r3, r3, #5
 80049ae:	f003 020f 	and.w	r2, r3, #15
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4422      	add	r2, r4
 80049ba:	609a      	str	r2, [r3, #8]
}
 80049bc:	bf00      	nop
 80049be:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80049c2:	46bd      	mov	sp, r7
 80049c4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80049c8:	51eb851f 	.word	0x51eb851f

080049cc <memset>:
 80049cc:	4402      	add	r2, r0
 80049ce:	4603      	mov	r3, r0
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d100      	bne.n	80049d6 <memset+0xa>
 80049d4:	4770      	bx	lr
 80049d6:	f803 1b01 	strb.w	r1, [r3], #1
 80049da:	e7f9      	b.n	80049d0 <memset+0x4>

080049dc <__libc_init_array>:
 80049dc:	b570      	push	{r4, r5, r6, lr}
 80049de:	4d0d      	ldr	r5, [pc, #52]	; (8004a14 <__libc_init_array+0x38>)
 80049e0:	4c0d      	ldr	r4, [pc, #52]	; (8004a18 <__libc_init_array+0x3c>)
 80049e2:	1b64      	subs	r4, r4, r5
 80049e4:	10a4      	asrs	r4, r4, #2
 80049e6:	2600      	movs	r6, #0
 80049e8:	42a6      	cmp	r6, r4
 80049ea:	d109      	bne.n	8004a00 <__libc_init_array+0x24>
 80049ec:	4d0b      	ldr	r5, [pc, #44]	; (8004a1c <__libc_init_array+0x40>)
 80049ee:	4c0c      	ldr	r4, [pc, #48]	; (8004a20 <__libc_init_array+0x44>)
 80049f0:	f000 f818 	bl	8004a24 <_init>
 80049f4:	1b64      	subs	r4, r4, r5
 80049f6:	10a4      	asrs	r4, r4, #2
 80049f8:	2600      	movs	r6, #0
 80049fa:	42a6      	cmp	r6, r4
 80049fc:	d105      	bne.n	8004a0a <__libc_init_array+0x2e>
 80049fe:	bd70      	pop	{r4, r5, r6, pc}
 8004a00:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a04:	4798      	blx	r3
 8004a06:	3601      	adds	r6, #1
 8004a08:	e7ee      	b.n	80049e8 <__libc_init_array+0xc>
 8004a0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0e:	4798      	blx	r3
 8004a10:	3601      	adds	r6, #1
 8004a12:	e7f2      	b.n	80049fa <__libc_init_array+0x1e>
 8004a14:	08004a64 	.word	0x08004a64
 8004a18:	08004a64 	.word	0x08004a64
 8004a1c:	08004a64 	.word	0x08004a64
 8004a20:	08004a68 	.word	0x08004a68

08004a24 <_init>:
 8004a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a26:	bf00      	nop
 8004a28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a2a:	bc08      	pop	{r3}
 8004a2c:	469e      	mov	lr, r3
 8004a2e:	4770      	bx	lr

08004a30 <_fini>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr
