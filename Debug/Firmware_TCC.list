
Firmware_TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  08006950  08006950  00016950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b48  08006b48  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08006b48  08006b48  00016b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b50  08006b50  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b50  08006b50  00016b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b54  08006b54  00016b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08006b58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000304  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000314  20000314  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000f971  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002463  00000000  00000000  0002f9f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000f30  00000000  00000000  00031e58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000be5  00000000  00000000  00032d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00021572  00000000  00000000  0003396d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001376e  00000000  00000000  00054edf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0f01  00000000  00000000  0006864d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004450  00000000  00000000  00139550  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  0013d9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006938 	.word	0x08006938

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08006938 	.word	0x08006938

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2f>:
 8000ac4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ac8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000acc:	bf24      	itt	cs
 8000ace:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ad6:	d90d      	bls.n	8000af4 <__aeabi_d2f+0x30>
 8000ad8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000adc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ae8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aec:	bf08      	it	eq
 8000aee:	f020 0001 	biceq.w	r0, r0, #1
 8000af2:	4770      	bx	lr
 8000af4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000af8:	d121      	bne.n	8000b3e <__aeabi_d2f+0x7a>
 8000afa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000afe:	bfbc      	itt	lt
 8000b00:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b04:	4770      	bxlt	lr
 8000b06:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b0e:	f1c2 0218 	rsb	r2, r2, #24
 8000b12:	f1c2 0c20 	rsb	ip, r2, #32
 8000b16:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b1e:	bf18      	it	ne
 8000b20:	f040 0001 	orrne.w	r0, r0, #1
 8000b24:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b28:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b2c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b30:	ea40 000c 	orr.w	r0, r0, ip
 8000b34:	fa23 f302 	lsr.w	r3, r3, r2
 8000b38:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b3c:	e7cc      	b.n	8000ad8 <__aeabi_d2f+0x14>
 8000b3e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b42:	d107      	bne.n	8000b54 <__aeabi_d2f+0x90>
 8000b44:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b48:	bf1e      	ittt	ne
 8000b4a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b4e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b52:	4770      	bxne	lr
 8000b54:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b58:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b5c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <__aeabi_uldivmod>:
 8000b64:	b953      	cbnz	r3, 8000b7c <__aeabi_uldivmod+0x18>
 8000b66:	b94a      	cbnz	r2, 8000b7c <__aeabi_uldivmod+0x18>
 8000b68:	2900      	cmp	r1, #0
 8000b6a:	bf08      	it	eq
 8000b6c:	2800      	cmpeq	r0, #0
 8000b6e:	bf1c      	itt	ne
 8000b70:	f04f 31ff 	movne.w	r1, #4294967295
 8000b74:	f04f 30ff 	movne.w	r0, #4294967295
 8000b78:	f000 b970 	b.w	8000e5c <__aeabi_idiv0>
 8000b7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b84:	f000 f806 	bl	8000b94 <__udivmoddi4>
 8000b88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b90:	b004      	add	sp, #16
 8000b92:	4770      	bx	lr

08000b94 <__udivmoddi4>:
 8000b94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b98:	9e08      	ldr	r6, [sp, #32]
 8000b9a:	460d      	mov	r5, r1
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	460f      	mov	r7, r1
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d14a      	bne.n	8000c3a <__udivmoddi4+0xa6>
 8000ba4:	428a      	cmp	r2, r1
 8000ba6:	4694      	mov	ip, r2
 8000ba8:	d965      	bls.n	8000c76 <__udivmoddi4+0xe2>
 8000baa:	fab2 f382 	clz	r3, r2
 8000bae:	b143      	cbz	r3, 8000bc2 <__udivmoddi4+0x2e>
 8000bb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bb4:	f1c3 0220 	rsb	r2, r3, #32
 8000bb8:	409f      	lsls	r7, r3
 8000bba:	fa20 f202 	lsr.w	r2, r0, r2
 8000bbe:	4317      	orrs	r7, r2
 8000bc0:	409c      	lsls	r4, r3
 8000bc2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000bc6:	fa1f f58c 	uxth.w	r5, ip
 8000bca:	fbb7 f1fe 	udiv	r1, r7, lr
 8000bce:	0c22      	lsrs	r2, r4, #16
 8000bd0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000bd4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000bd8:	fb01 f005 	mul.w	r0, r1, r5
 8000bdc:	4290      	cmp	r0, r2
 8000bde:	d90a      	bls.n	8000bf6 <__udivmoddi4+0x62>
 8000be0:	eb1c 0202 	adds.w	r2, ip, r2
 8000be4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000be8:	f080 811c 	bcs.w	8000e24 <__udivmoddi4+0x290>
 8000bec:	4290      	cmp	r0, r2
 8000bee:	f240 8119 	bls.w	8000e24 <__udivmoddi4+0x290>
 8000bf2:	3902      	subs	r1, #2
 8000bf4:	4462      	add	r2, ip
 8000bf6:	1a12      	subs	r2, r2, r0
 8000bf8:	b2a4      	uxth	r4, r4
 8000bfa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000bfe:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c02:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c06:	fb00 f505 	mul.w	r5, r0, r5
 8000c0a:	42a5      	cmp	r5, r4
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x90>
 8000c0e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c12:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c16:	f080 8107 	bcs.w	8000e28 <__udivmoddi4+0x294>
 8000c1a:	42a5      	cmp	r5, r4
 8000c1c:	f240 8104 	bls.w	8000e28 <__udivmoddi4+0x294>
 8000c20:	4464      	add	r4, ip
 8000c22:	3802      	subs	r0, #2
 8000c24:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c28:	1b64      	subs	r4, r4, r5
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	b11e      	cbz	r6, 8000c36 <__udivmoddi4+0xa2>
 8000c2e:	40dc      	lsrs	r4, r3
 8000c30:	2300      	movs	r3, #0
 8000c32:	e9c6 4300 	strd	r4, r3, [r6]
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	428b      	cmp	r3, r1
 8000c3c:	d908      	bls.n	8000c50 <__udivmoddi4+0xbc>
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	f000 80ed 	beq.w	8000e1e <__udivmoddi4+0x28a>
 8000c44:	2100      	movs	r1, #0
 8000c46:	e9c6 0500 	strd	r0, r5, [r6]
 8000c4a:	4608      	mov	r0, r1
 8000c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c50:	fab3 f183 	clz	r1, r3
 8000c54:	2900      	cmp	r1, #0
 8000c56:	d149      	bne.n	8000cec <__udivmoddi4+0x158>
 8000c58:	42ab      	cmp	r3, r5
 8000c5a:	d302      	bcc.n	8000c62 <__udivmoddi4+0xce>
 8000c5c:	4282      	cmp	r2, r0
 8000c5e:	f200 80f8 	bhi.w	8000e52 <__udivmoddi4+0x2be>
 8000c62:	1a84      	subs	r4, r0, r2
 8000c64:	eb65 0203 	sbc.w	r2, r5, r3
 8000c68:	2001      	movs	r0, #1
 8000c6a:	4617      	mov	r7, r2
 8000c6c:	2e00      	cmp	r6, #0
 8000c6e:	d0e2      	beq.n	8000c36 <__udivmoddi4+0xa2>
 8000c70:	e9c6 4700 	strd	r4, r7, [r6]
 8000c74:	e7df      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000c76:	b902      	cbnz	r2, 8000c7a <__udivmoddi4+0xe6>
 8000c78:	deff      	udf	#255	; 0xff
 8000c7a:	fab2 f382 	clz	r3, r2
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f040 8090 	bne.w	8000da4 <__udivmoddi4+0x210>
 8000c84:	1a8a      	subs	r2, r1, r2
 8000c86:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c8a:	fa1f fe8c 	uxth.w	lr, ip
 8000c8e:	2101      	movs	r1, #1
 8000c90:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c94:	fb07 2015 	mls	r0, r7, r5, r2
 8000c98:	0c22      	lsrs	r2, r4, #16
 8000c9a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c9e:	fb0e f005 	mul.w	r0, lr, r5
 8000ca2:	4290      	cmp	r0, r2
 8000ca4:	d908      	bls.n	8000cb8 <__udivmoddi4+0x124>
 8000ca6:	eb1c 0202 	adds.w	r2, ip, r2
 8000caa:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cae:	d202      	bcs.n	8000cb6 <__udivmoddi4+0x122>
 8000cb0:	4290      	cmp	r0, r2
 8000cb2:	f200 80cb 	bhi.w	8000e4c <__udivmoddi4+0x2b8>
 8000cb6:	4645      	mov	r5, r8
 8000cb8:	1a12      	subs	r2, r2, r0
 8000cba:	b2a4      	uxth	r4, r4
 8000cbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000cc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000cc4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cc8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ccc:	45a6      	cmp	lr, r4
 8000cce:	d908      	bls.n	8000ce2 <__udivmoddi4+0x14e>
 8000cd0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cd8:	d202      	bcs.n	8000ce0 <__udivmoddi4+0x14c>
 8000cda:	45a6      	cmp	lr, r4
 8000cdc:	f200 80bb 	bhi.w	8000e56 <__udivmoddi4+0x2c2>
 8000ce0:	4610      	mov	r0, r2
 8000ce2:	eba4 040e 	sub.w	r4, r4, lr
 8000ce6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000cea:	e79f      	b.n	8000c2c <__udivmoddi4+0x98>
 8000cec:	f1c1 0720 	rsb	r7, r1, #32
 8000cf0:	408b      	lsls	r3, r1
 8000cf2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cf6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cfa:	fa05 f401 	lsl.w	r4, r5, r1
 8000cfe:	fa20 f307 	lsr.w	r3, r0, r7
 8000d02:	40fd      	lsrs	r5, r7
 8000d04:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d08:	4323      	orrs	r3, r4
 8000d0a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d0e:	fa1f fe8c 	uxth.w	lr, ip
 8000d12:	fb09 5518 	mls	r5, r9, r8, r5
 8000d16:	0c1c      	lsrs	r4, r3, #16
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	fb08 f50e 	mul.w	r5, r8, lr
 8000d20:	42a5      	cmp	r5, r4
 8000d22:	fa02 f201 	lsl.w	r2, r2, r1
 8000d26:	fa00 f001 	lsl.w	r0, r0, r1
 8000d2a:	d90b      	bls.n	8000d44 <__udivmoddi4+0x1b0>
 8000d2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d30:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d34:	f080 8088 	bcs.w	8000e48 <__udivmoddi4+0x2b4>
 8000d38:	42a5      	cmp	r5, r4
 8000d3a:	f240 8085 	bls.w	8000e48 <__udivmoddi4+0x2b4>
 8000d3e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d42:	4464      	add	r4, ip
 8000d44:	1b64      	subs	r4, r4, r5
 8000d46:	b29d      	uxth	r5, r3
 8000d48:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d4c:	fb09 4413 	mls	r4, r9, r3, r4
 8000d50:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d54:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x1da>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f103 35ff 	add.w	r5, r3, #4294967295
 8000d64:	d26c      	bcs.n	8000e40 <__udivmoddi4+0x2ac>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	d96a      	bls.n	8000e40 <__udivmoddi4+0x2ac>
 8000d6a:	3b02      	subs	r3, #2
 8000d6c:	4464      	add	r4, ip
 8000d6e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d72:	fba3 9502 	umull	r9, r5, r3, r2
 8000d76:	eba4 040e 	sub.w	r4, r4, lr
 8000d7a:	42ac      	cmp	r4, r5
 8000d7c:	46c8      	mov	r8, r9
 8000d7e:	46ae      	mov	lr, r5
 8000d80:	d356      	bcc.n	8000e30 <__udivmoddi4+0x29c>
 8000d82:	d053      	beq.n	8000e2c <__udivmoddi4+0x298>
 8000d84:	b156      	cbz	r6, 8000d9c <__udivmoddi4+0x208>
 8000d86:	ebb0 0208 	subs.w	r2, r0, r8
 8000d8a:	eb64 040e 	sbc.w	r4, r4, lr
 8000d8e:	fa04 f707 	lsl.w	r7, r4, r7
 8000d92:	40ca      	lsrs	r2, r1
 8000d94:	40cc      	lsrs	r4, r1
 8000d96:	4317      	orrs	r7, r2
 8000d98:	e9c6 7400 	strd	r7, r4, [r6]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	2100      	movs	r1, #0
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	f1c3 0120 	rsb	r1, r3, #32
 8000da8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000dac:	fa20 f201 	lsr.w	r2, r0, r1
 8000db0:	fa25 f101 	lsr.w	r1, r5, r1
 8000db4:	409d      	lsls	r5, r3
 8000db6:	432a      	orrs	r2, r5
 8000db8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dbc:	fa1f fe8c 	uxth.w	lr, ip
 8000dc0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dc4:	fb07 1510 	mls	r5, r7, r0, r1
 8000dc8:	0c11      	lsrs	r1, r2, #16
 8000dca:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000dce:	fb00 f50e 	mul.w	r5, r0, lr
 8000dd2:	428d      	cmp	r5, r1
 8000dd4:	fa04 f403 	lsl.w	r4, r4, r3
 8000dd8:	d908      	bls.n	8000dec <__udivmoddi4+0x258>
 8000dda:	eb1c 0101 	adds.w	r1, ip, r1
 8000dde:	f100 38ff 	add.w	r8, r0, #4294967295
 8000de2:	d22f      	bcs.n	8000e44 <__udivmoddi4+0x2b0>
 8000de4:	428d      	cmp	r5, r1
 8000de6:	d92d      	bls.n	8000e44 <__udivmoddi4+0x2b0>
 8000de8:	3802      	subs	r0, #2
 8000dea:	4461      	add	r1, ip
 8000dec:	1b49      	subs	r1, r1, r5
 8000dee:	b292      	uxth	r2, r2
 8000df0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000df4:	fb07 1115 	mls	r1, r7, r5, r1
 8000df8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000dfc:	fb05 f10e 	mul.w	r1, r5, lr
 8000e00:	4291      	cmp	r1, r2
 8000e02:	d908      	bls.n	8000e16 <__udivmoddi4+0x282>
 8000e04:	eb1c 0202 	adds.w	r2, ip, r2
 8000e08:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e0c:	d216      	bcs.n	8000e3c <__udivmoddi4+0x2a8>
 8000e0e:	4291      	cmp	r1, r2
 8000e10:	d914      	bls.n	8000e3c <__udivmoddi4+0x2a8>
 8000e12:	3d02      	subs	r5, #2
 8000e14:	4462      	add	r2, ip
 8000e16:	1a52      	subs	r2, r2, r1
 8000e18:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e1c:	e738      	b.n	8000c90 <__udivmoddi4+0xfc>
 8000e1e:	4631      	mov	r1, r6
 8000e20:	4630      	mov	r0, r6
 8000e22:	e708      	b.n	8000c36 <__udivmoddi4+0xa2>
 8000e24:	4639      	mov	r1, r7
 8000e26:	e6e6      	b.n	8000bf6 <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e6fb      	b.n	8000c24 <__udivmoddi4+0x90>
 8000e2c:	4548      	cmp	r0, r9
 8000e2e:	d2a9      	bcs.n	8000d84 <__udivmoddi4+0x1f0>
 8000e30:	ebb9 0802 	subs.w	r8, r9, r2
 8000e34:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	e7a3      	b.n	8000d84 <__udivmoddi4+0x1f0>
 8000e3c:	4645      	mov	r5, r8
 8000e3e:	e7ea      	b.n	8000e16 <__udivmoddi4+0x282>
 8000e40:	462b      	mov	r3, r5
 8000e42:	e794      	b.n	8000d6e <__udivmoddi4+0x1da>
 8000e44:	4640      	mov	r0, r8
 8000e46:	e7d1      	b.n	8000dec <__udivmoddi4+0x258>
 8000e48:	46d0      	mov	r8, sl
 8000e4a:	e77b      	b.n	8000d44 <__udivmoddi4+0x1b0>
 8000e4c:	3d02      	subs	r5, #2
 8000e4e:	4462      	add	r2, ip
 8000e50:	e732      	b.n	8000cb8 <__udivmoddi4+0x124>
 8000e52:	4608      	mov	r0, r1
 8000e54:	e70a      	b.n	8000c6c <__udivmoddi4+0xd8>
 8000e56:	4464      	add	r4, ip
 8000e58:	3802      	subs	r0, #2
 8000e5a:	e742      	b.n	8000ce2 <__udivmoddi4+0x14e>

08000e5c <__aeabi_idiv0>:
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop

08000e60 <codec_set_reg>:
 */

#include "codec.h"

HAL_StatusTypeDef codec_set_reg(I2C_HandleTypeDef *i2c_instance, unsigned char MemAddress, uint8_t *pdata, unsigned int size)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b088      	sub	sp, #32
 8000e64:	af04      	add	r7, sp, #16
 8000e66:	60f8      	str	r0, [r7, #12]
 8000e68:	607a      	str	r2, [r7, #4]
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	460b      	mov	r3, r1
 8000e6e:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 8000e70:	7afb      	ldrb	r3, [r7, #11]
 8000e72:	b29a      	uxth	r2, r3
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	9102      	str	r1, [sp, #8]
 8000e7e:	9301      	str	r3, [sp, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	9300      	str	r3, [sp, #0]
 8000e84:	2301      	movs	r3, #1
 8000e86:	2136      	movs	r1, #54	; 0x36
 8000e88:	68f8      	ldr	r0, [r7, #12]
 8000e8a:	f001 ff69 	bl	8002d60 <HAL_I2C_Mem_Write>
 8000e8e:	4603      	mov	r3, r0
}
 8000e90:	4618      	mov	r0, r3
 8000e92:	3710      	adds	r7, #16
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <codec_read_reg>:
uint8_t *pData,
uint16_t Size,
uint32_t Timeout)*/

HAL_StatusTypeDef codec_read_reg(I2C_HandleTypeDef *i2c_instance, uint16_t MemAddress, uint8_t * pdata, uint16_t size)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b088      	sub	sp, #32
 8000e9c:	af04      	add	r7, sp, #16
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	607a      	str	r2, [r7, #4]
 8000ea2:	461a      	mov	r2, r3
 8000ea4:	460b      	mov	r3, r1
 8000ea6:	817b      	strh	r3, [r7, #10]
 8000ea8:	4613      	mov	r3, r2
 8000eaa:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, 2, dCODEC_HAL_MAX_DELAY);
 8000eac:	897a      	ldrh	r2, [r7, #10]
 8000eae:	f04f 33ff 	mov.w	r3, #4294967295
 8000eb2:	9302      	str	r3, [sp, #8]
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	9300      	str	r3, [sp, #0]
 8000ebc:	2301      	movs	r3, #1
 8000ebe:	2136      	movs	r1, #54	; 0x36
 8000ec0:	68f8      	ldr	r0, [r7, #12]
 8000ec2:	f002 f847 	bl	8002f54 <HAL_I2C_Mem_Read>
 8000ec6:	4603      	mov	r3, r0
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <codec_init>:
	uint32_t Timeout)
*/


void codec_init(I2C_HandleTypeDef *i2c_instance)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b084      	sub	sp, #16
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
	aux[1] = ; // low byte data
	aux[0] = ; // high byte data
	result = codec_set_reg(i2c_instance, dREG_BLABLA, &aux[0], 2);
	*/

	aux[1] = 0x00;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8000edc:	2300      	movs	r3, #0
 8000ede:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_SW_RESET, &aux[0], 2);
 8000ee0:	f107 020c 	add.w	r2, r7, #12
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	2100      	movs	r1, #0
 8000ee8:	6878      	ldr	r0, [r7, #4]
 8000eea:	f7ff ffb9 	bl	8000e60 <codec_set_reg>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	73fb      	strb	r3, [r7, #15]


	aux[1] = 0b00001000;//0xC8;
 8000ef2:	2308      	movs	r3, #8
 8000ef4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;//0xC8;
 8000ef6:	2308      	movs	r3, #8
 8000ef8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOUT, &aux[0], 2);
 8000efa:	f107 020c 	add.w	r2, r7, #12
 8000efe:	2302      	movs	r3, #2
 8000f00:	2102      	movs	r1, #2
 8000f02:	6878      	ldr	r0, [r7, #4]
 8000f04:	f7ff ffac 	bl	8000e60 <codec_set_reg>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_HPOUT,databuffer, 2);
 8000f0c:	f107 0208 	add.w	r2, r7, #8
 8000f10:	2302      	movs	r3, #2
 8000f12:	2102      	movs	r1, #2
 8000f14:	6878      	ldr	r0, [r7, #4]
 8000f16:	f7ff ffbf 	bl	8000e98 <codec_read_reg>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	73fb      	strb	r3, [r7, #15]
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_SW_RESET, I2C_MEMADD_SIZE_8BIT, &aux[0], 2, dCODEC_HAL_MAX_DELAY);
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_HPOUT, I2C_MEMADD_SIZE_8BIT, &aux[0], 2, dCODEC_HAL_MAX_DELAY);

	aux[1] = 0x00;       // low byte data
 8000f1e:	2300      	movs	r3, #0
 8000f20:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b01000000; // high byte data
 8000f22:	2340      	movs	r3, #64	; 0x40
 8000f24:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOMIX_CTRL, &aux[0], 2);
 8000f26:	f107 020c 	add.w	r2, r7, #12
 8000f2a:	2302      	movs	r3, #2
 8000f2c:	2145      	movs	r1, #69	; 0x45
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff96 	bl	8000e60 <codec_set_reg>
 8000f34:	4603      	mov	r3, r0
 8000f36:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;//00001000;
 8000f38:	2308      	movs	r3, #8
 8000f3a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;//00001000;
 8000f3c:	2308      	movs	r3, #8
 8000f3e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT1, &aux[0], 2);
 8000f40:	f107 020c 	add.w	r2, r7, #12
 8000f44:	2302      	movs	r3, #2
 8000f46:	2103      	movs	r1, #3
 8000f48:	6878      	ldr	r0, [r7, #4]
 8000f4a:	f7ff ff89 	bl	8000e60 <codec_set_reg>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 8000f52:	2300      	movs	r3, #0
 8000f54:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8000f56:	2300      	movs	r3, #0
 8000f58:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT2, &aux[0], 2);
 8000f5a:	f107 020c 	add.w	r2, r7, #12
 8000f5e:	2302      	movs	r3, #2
 8000f60:	2105      	movs	r1, #5
 8000f62:	6878      	ldr	r0, [r7, #4]
 8000f64:	f7ff ff7c 	bl	8000e60 <codec_set_reg>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000f70:	2300      	movs	r3, #0
 8000f72:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_MIC_INPUT_MODE_GAIN, &aux[0], 2);
 8000f74:	f107 020c 	add.w	r2, r7, #12
 8000f78:	2302      	movs	r3, #2
 8000f7a:	210d      	movs	r1, #13
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff6f 	bl	8000e60 <codec_set_reg>
 8000f82:	4603      	mov	r3, r0
 8000f84:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;
 8000f86:	2308      	movs	r3, #8
 8000f88:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_INPUT_MODE, &aux[0], 2);
 8000f8e:	f107 020c 	add.w	r2, r7, #12
 8000f92:	2302      	movs	r3, #2
 8000f94:	210f      	movs	r1, #15
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f7ff ff62 	bl	8000e60 <codec_set_reg>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00100000;
 8000fa0:	2320      	movs	r3, #32
 8000fa2:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111000;
 8000fa4:	2338      	movs	r3, #56	; 0x38
 8000fa6:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_MIX_CONTROL, &aux[0], 2);
 8000fa8:	f107 020c 	add.w	r2, r7, #12
 8000fac:	2302      	movs	r3, #2
 8000fae:	2127      	movs	r1, #39	; 0x27
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f7ff ff55 	bl	8000e60 <codec_set_reg>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL1, &aux[0], 2);
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	2302      	movs	r3, #2
 8000fc8:	213b      	movs	r1, #59	; 0x3b
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ff48 	bl	8000e60 <codec_set_reg>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001001; 
 8000fd4:	2349      	movs	r3, #73	; 0x49
 8000fd6:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL2, &aux[0], 2);
 8000fdc:	f107 020c 	add.w	r2, r7, #12
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	213c      	movs	r1, #60	; 0x3c
 8000fe4:	6878      	ldr	r0, [r7, #4]
 8000fe6:	f7ff ff3b 	bl	8000e60 <codec_set_reg>
 8000fea:	4603      	mov	r3, r0
 8000fec:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001001; 
 8000fee:	2349      	movs	r3, #73	; 0x49
 8000ff0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL2, &aux[0], 2);
 8000ff6:	f107 020c 	add.w	r2, r7, #12
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	213e      	movs	r1, #62	; 0x3e
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff2e 	bl	8000e60 <codec_set_reg>
 8001004:	4603      	mov	r3, r0
 8001006:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 8001008:	2300      	movs	r3, #0
 800100a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 800100c:	2300      	movs	r3, #0
 800100e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL1, &aux[0], 2);
 8001010:	f107 020c 	add.w	r2, r7, #12
 8001014:	2302      	movs	r3, #2
 8001016:	213d      	movs	r1, #61	; 0x3d
 8001018:	6878      	ldr	r0, [r7, #4]
 800101a:	f7ff ff21 	bl	8000e60 <codec_set_reg>
 800101e:	4603      	mov	r3, r0
 8001020:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 8001022:	2300      	movs	r3, #0
 8001024:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8001026:	2300      	movs	r3, #0
 8001028:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL1, &aux[0], 2);
 800102a:	f107 020c 	add.w	r2, r7, #12
 800102e:	2302      	movs	r3, #2
 8001030:	214d      	movs	r1, #77	; 0x4d
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f7ff ff14 	bl	8000e60 <codec_set_reg>
 8001038:	4603      	mov	r3, r0
 800103a:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 800103c:	2300      	movs	r3, #0
 800103e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8001040:	2300      	movs	r3, #0
 8001042:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL2, &aux[0], 2);
 8001044:	f107 020c 	add.w	r2, r7, #12
 8001048:	2302      	movs	r3, #2
 800104a:	214e      	movs	r1, #78	; 0x4e
 800104c:	6878      	ldr	r0, [r7, #4]
 800104e:	f7ff ff07 	bl	8000e60 <codec_set_reg>
 8001052:	4603      	mov	r3, r0
 8001054:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111000;
 8001056:	2378      	movs	r3, #120	; 0x78
 8001058:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 800105a:	2302      	movs	r3, #2
 800105c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL3, &aux[0], 2);
 800105e:	f107 020c 	add.w	r2, r7, #12
 8001062:	2302      	movs	r3, #2
 8001064:	214f      	movs	r1, #79	; 0x4f
 8001066:	6878      	ldr	r0, [r7, #4]
 8001068:	f7ff fefa 	bl	8000e60 <codec_set_reg>
 800106c:	4603      	mov	r3, r0
 800106e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111000;
 8001070:	2378      	movs	r3, #120	; 0x78
 8001072:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 8001074:	2302      	movs	r3, #2
 8001076:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXR_CTRL3, &aux[0], 2);
 8001078:	f107 020c 	add.w	r2, r7, #12
 800107c:	2302      	movs	r3, #2
 800107e:	2152      	movs	r1, #82	; 0x52
 8001080:	6878      	ldr	r0, [r7, #4]
 8001082:	f7ff feed 	bl	8000e60 <codec_set_reg>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;//00000000;
 800108a:	2300      	movs	r3, #0
 800108c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11000000;//00110000;
 800108e:	23c0      	movs	r3, #192	; 0xc0
 8001090:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LOUTMIX_CTRL, &aux[0], 2);
 8001092:	f107 020c 	add.w	r2, r7, #12
 8001096:	2302      	movs	r3, #2
 8001098:	2153      	movs	r1, #83	; 0x53
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f7ff fee0 	bl	8000e60 <codec_set_reg>
 80010a0:	4603      	mov	r3, r0
 80010a2:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00101111;
 80010a4:	232f      	movs	r3, #47	; 0x2f
 80010a6:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00101111;
 80010a8:	232f      	movs	r3, #47	; 0x2f
 80010aa:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_VOL_CTRL, &aux[0], 2);
 80010ac:	f107 020c 	add.w	r2, r7, #12
 80010b0:	2302      	movs	r3, #2
 80010b2:	211c      	movs	r1, #28
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fed3 	bl	8000e60 <codec_set_reg>
 80010ba:	4603      	mov	r3, r0
 80010bc:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80010be:	2300      	movs	r3, #0
 80010c0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80010c2:	2300      	movs	r3, #0
 80010c4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_BOOST_CTRL, &aux[0], 2);
 80010c6:	f107 020c 	add.w	r2, r7, #12
 80010ca:	2302      	movs	r3, #2
 80010cc:	211e      	movs	r1, #30
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f7ff fec6 	bl	8000e60 <codec_set_reg>
 80010d4:	4603      	mov	r3, r0
 80010d6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01000000; //10000000; // TESTE ADC DIRETO PARA DAC
 80010d8:	2340      	movs	r3, #64	; 0x40
 80010da:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b01000000; //10000000; // TESTE ADC DIRETO PARA DAC
 80010dc:	2340      	movs	r3, #64	; 0x40
 80010de:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC2DAC_DIG_MIX_CTRL, &aux[0], 2);
 80010e0:	f107 020c 	add.w	r2, r7, #12
 80010e4:	2302      	movs	r3, #2
 80010e6:	2129      	movs	r1, #41	; 0x29
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff feb9 	bl	8000e60 <codec_set_reg>
 80010ee:	4603      	mov	r3, r0
 80010f0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0xAF;
 80010f2:	23af      	movs	r3, #175	; 0xaf
 80010f4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0xAF;
 80010f6:	23af      	movs	r3, #175	; 0xaf
 80010f8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DACL1_R1_DIG_VOL, &aux[0], 2);
 80010fa:	f107 020c 	add.w	r2, r7, #12
 80010fe:	2302      	movs	r3, #2
 8001100:	2119      	movs	r1, #25
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff feac 	bl	8000e60 <codec_set_reg>
 8001108:	4603      	mov	r3, r0
 800110a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00010010;
 800110c:	2312      	movs	r3, #18
 800110e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00010010;
 8001110:	2312      	movs	r3, #18
 8001112:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DAC_DIG_MIX_CTRL, &aux[0], 2);
 8001114:	f107 020c 	add.w	r2, r7, #12
 8001118:	2302      	movs	r3, #2
 800111a:	212a      	movs	r1, #42	; 0x2a
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f7ff fe9f 	bl	8000e60 <codec_set_reg>
 8001122:	4603      	mov	r3, r0
 8001124:	73fb      	strb	r3, [r7, #15]
	

	aux[1] = 0b00001001;
 8001126:	2309      	movs	r3, #9
 8001128:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 800112a:	2300      	movs	r3, #0
 800112c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GENERAL_CTRL1, &aux[0], 2);
 800112e:	f107 020c 	add.w	r2, r7, #12
 8001132:	2302      	movs	r3, #2
 8001134:	21fa      	movs	r1, #250	; 0xfa
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff fe92 	bl	8000e60 <codec_set_reg>
 800113c:	4603      	mov	r3, r0
 800113e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000110;
 8001140:	2306      	movs	r3, #6
 8001142:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10011000;
 8001144:	2398      	movs	r3, #152	; 0x98
 8001146:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL1, &aux[0], 2);
 8001148:	f107 020c 	add.w	r2, r7, #12
 800114c:	2302      	movs	r3, #2
 800114e:	2161      	movs	r1, #97	; 0x61
 8001150:	6878      	ldr	r0, [r7, #4]
 8001152:	f7ff fe85 	bl	8000e60 <codec_set_reg>
 8001156:	4603      	mov	r3, r0
 8001158:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 800115a:	2300      	movs	r3, #0
 800115c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10001000;
 800115e:	2388      	movs	r3, #136	; 0x88
 8001160:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL2, &aux[0], 2);
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	2302      	movs	r3, #2
 8001168:	2162      	movs	r1, #98	; 0x62
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f7ff fe78 	bl	8000e60 <codec_set_reg>
 8001170:	4603      	mov	r3, r0
 8001172:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b11111001;
 8001174:	23f9      	movs	r3, #249	; 0xf9
 8001176:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11010000;
 8001178:	23d0      	movs	r3, #208	; 0xd0
 800117a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL3, &aux[0], 2);
 800117c:	f107 020c 	add.w	r2, r7, #12
 8001180:	2302      	movs	r3, #2
 8001182:	2163      	movs	r1, #99	; 0x63
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff fe6b 	bl	8000e60 <codec_set_reg>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00110110;
 800118e:	2336      	movs	r3, #54	; 0x36
 8001190:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8001192:	2300      	movs	r3, #0
 8001194:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL4, &aux[0], 2);
 8001196:	f107 020c 	add.w	r2, r7, #12
 800119a:	2302      	movs	r3, #2
 800119c:	2164      	movs	r1, #100	; 0x64
 800119e:	6878      	ldr	r0, [r7, #4]
 80011a0:	f7ff fe5e 	bl	8000e60 <codec_set_reg>
 80011a4:	4603      	mov	r3, r0
 80011a6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80011a8:	2300      	movs	r3, #0
 80011aa:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11001100;
 80011ac:	23cc      	movs	r3, #204	; 0xcc
 80011ae:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL5, &aux[0], 2);
 80011b0:	f107 020c 	add.w	r2, r7, #12
 80011b4:	2302      	movs	r3, #2
 80011b6:	2165      	movs	r1, #101	; 0x65
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff fe51 	bl	8000e60 <codec_set_reg>
 80011be:	4603      	mov	r3, r0
 80011c0:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 80011c2:	2300      	movs	r3, #0
 80011c4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111111;
 80011c6:	233f      	movs	r3, #63	; 0x3f
 80011c8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL6, &aux[0], 2);
 80011ca:	f107 020c 	add.w	r2, r7, #12
 80011ce:	2302      	movs	r3, #2
 80011d0:	2166      	movs	r1, #102	; 0x66
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f7ff fe44 	bl	8000e60 <codec_set_reg>
 80011d8:	4603      	mov	r3, r0
 80011da:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;//00000110;
 80011dc:	2300      	movs	r3, #0
 80011de:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10011000; // config device as slave
 80011e0:	2398      	movs	r3, #152	; 0x98
 80011e2:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DIG_INTERFACE_CONTROL, &aux[0], 2);
 80011e4:	f107 020c 	add.w	r2, r7, #12
 80011e8:	2302      	movs	r3, #2
 80011ea:	2170      	movs	r1, #112	; 0x70
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff fe37 	bl	8000e60 <codec_set_reg>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001010;//00000101;
 80011f6:	230a      	movs	r3, #10
 80011f8:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000001;//00010000;
 80011fa:	2301      	movs	r3, #1
 80011fc:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DAC_CLK_CTRL1, &aux[0], 2);
 80011fe:	f107 020c 	add.w	r2, r7, #12
 8001202:	2302      	movs	r3, #2
 8001204:	2173      	movs	r1, #115	; 0x73
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f7ff fe2a 	bl	8000e60 <codec_set_reg>
 800120c:	4603      	mov	r3, r0
 800120e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8001210:	2300      	movs	r3, #0
 8001212:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8001214:	2300      	movs	r3, #0
 8001216:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GLOBAL_CLK_CTRL, &aux[0], 2);
 8001218:	f107 020c 	add.w	r2, r7, #12
 800121c:	2302      	movs	r3, #2
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	6878      	ldr	r0, [r7, #4]
 8001222:	f7ff fe1d 	bl	8000e60 <codec_set_reg>
 8001226:	4603      	mov	r3, r0
 8001228:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00011101;
 800122a:	231d      	movs	r3, #29
 800122c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000;
 800122e:	2380      	movs	r3, #128	; 0x80
 8001230:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HP_AMP_CTRL1, &aux[0], 2);
 8001232:	f107 020c 	add.w	r2, r7, #12
 8001236:	2302      	movs	r3, #2
 8001238:	218e      	movs	r1, #142	; 0x8e
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f7ff fe10 	bl	8000e60 <codec_set_reg>
 8001240:	4603      	mov	r3, r0
 8001242:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x20;
 8001244:	2320      	movs	r3, #32
 8001246:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00100010;
 8001248:	2322      	movs	r3, #34	; 0x22
 800124a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_WIND_FILTER_CTRL2, &aux[0], 2);
 800124c:	f107 020c 	add.w	r2, r7, #12
 8001250:	2302      	movs	r3, #2
 8001252:	21d3      	movs	r1, #211	; 0xd3
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff fe03 	bl	8000e60 <codec_set_reg>
 800125a:	4603      	mov	r3, r0
 800125c:	73fb      	strb	r3, [r7, #15]
}
 800125e:	bf00      	nop
 8001260:	3710      	adds	r7, #16
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
	...

08001268 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[0];
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8001272:	4a08      	ldr	r2, [pc, #32]	; (8001294 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8001274:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[0];
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 800127a:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 800127c:	4b08      	ldr	r3, [pc, #32]	; (80012a0 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 800127e:	2201      	movs	r2, #1
 8001280:	701a      	strb	r2, [r3, #0]
}
 8001282:	bf00      	nop
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	200002e4 	.word	0x200002e4
 8001294:	200001e4 	.word	0x200001e4
 8001298:	20000000 	.word	0x20000000
 800129c:	20000264 	.word	0x20000264
 80012a0:	200002e8 	.word	0x200002e8

080012a4 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[dBUFFER_SIZE / 2];
 80012ac:	4b07      	ldr	r3, [pc, #28]	; (80012cc <HAL_I2SEx_TxRxCpltCallback+0x28>)
 80012ae:	4a08      	ldr	r2, [pc, #32]	; (80012d0 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 80012b0:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[dBUFFER_SIZE / 2];
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 80012b4:	4a08      	ldr	r2, [pc, #32]	; (80012d8 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 80012b6:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 80012b8:	4b08      	ldr	r3, [pc, #32]	; (80012dc <HAL_I2SEx_TxRxCpltCallback+0x38>)
 80012ba:	2201      	movs	r2, #1
 80012bc:	701a      	strb	r2, [r3, #0]
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200002e4 	.word	0x200002e4
 80012d0:	20000224 	.word	0x20000224
 80012d4:	20000000 	.word	0x20000000
 80012d8:	200002a4 	.word	0x200002a4
 80012dc:	200002e8 	.word	0x200002e8

080012e0 <processData>:
        buffer[i] = amplitude * sin(2 * M_PI * FREQUENCY * t);
    }
}

void processData()
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  static float leftIn, leftOut;
  static float rightIn, rightOut;
  static uint32_t time = 0;

  if(time++ > 100000)
 80012e6:	4b74      	ldr	r3, [pc, #464]	; (80014b8 <processData+0x1d8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	1c5a      	adds	r2, r3, #1
 80012ec:	4972      	ldr	r1, [pc, #456]	; (80014b8 <processData+0x1d8>)
 80012ee:	600a      	str	r2, [r1, #0]
 80012f0:	4a72      	ldr	r2, [pc, #456]	; (80014bc <processData+0x1dc>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d902      	bls.n	80012fc <processData+0x1c>
  {
	  time = 0;
 80012f6:	4b70      	ldr	r3, [pc, #448]	; (80014b8 <processData+0x1d8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
  }

  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 80012fc:	2300      	movs	r3, #0
 80012fe:	80fb      	strh	r3, [r7, #6]
 8001300:	e0c4      	b.n	800148c <processData+0x1ac>
  {

    //================ LEFT CHANNEL ================
    // Get ADC input and convert it to float
    leftIn = INT16_TO_FLOAT * inBufferPtr[n];
 8001302:	4b6f      	ldr	r3, [pc, #444]	; (80014c0 <processData+0x1e0>)
 8001304:	681a      	ldr	r2, [r3, #0]
 8001306:	88fb      	ldrh	r3, [r7, #6]
 8001308:	005b      	lsls	r3, r3, #1
 800130a:	4413      	add	r3, r2
 800130c:	881b      	ldrh	r3, [r3, #0]
 800130e:	b21b      	sxth	r3, r3
 8001310:	ee07 3a90 	vmov	s15, r3
 8001314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001318:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80014c4 <processData+0x1e4>
 800131c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <processData+0x1e8>)
 8001322:	edc3 7a00 	vstr	s15, [r3]
    if (leftIn > 1.0f)
 8001326:	4b68      	ldr	r3, [pc, #416]	; (80014c8 <processData+0x1e8>)
 8001328:	edd3 7a00 	vldr	s15, [r3]
 800132c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001330:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001338:	dd09      	ble.n	800134e <processData+0x6e>
    {
      leftIn -= 2.0f;
 800133a:	4b63      	ldr	r3, [pc, #396]	; (80014c8 <processData+0x1e8>)
 800133c:	edd3 7a00 	vldr	s15, [r3]
 8001340:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001344:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001348:	4b5f      	ldr	r3, [pc, #380]	; (80014c8 <processData+0x1e8>)
 800134a:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    leftOut = leftIn;
 800134e:	4b5e      	ldr	r3, [pc, #376]	; (80014c8 <processData+0x1e8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a5e      	ldr	r2, [pc, #376]	; (80014cc <processData+0x1ec>)
 8001354:	6013      	str	r3, [r2, #0]
    leftOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);
 8001356:	4b58      	ldr	r3, [pc, #352]	; (80014b8 <processData+0x1d8>)
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff f876 	bl	800044c <__aeabi_ui2d>
 8001360:	a351      	add	r3, pc, #324	; (adr r3, 80014a8 <processData+0x1c8>)
 8001362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001366:	f7ff f8eb 	bl	8000540 <__aeabi_dmul>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	ec43 2b17 	vmov	d7, r2, r3
 8001372:	eeb0 0a47 	vmov.f32	s0, s14
 8001376:	eef0 0a67 	vmov.f32	s1, s15
 800137a:	f004 fa9d 	bl	80058b8 <sin>
 800137e:	ec51 0b10 	vmov	r0, r1, d0
 8001382:	a34b      	add	r3, pc, #300	; (adr r3, 80014b0 <processData+0x1d0>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff f8da 	bl	8000540 <__aeabi_dmul>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fb96 	bl	8000ac4 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	4a4c      	ldr	r2, [pc, #304]	; (80014cc <processData+0x1ec>)
 800139c:	6013      	str	r3, [r2, #0]

    // Convert back to signed int  and set DAC output
    outBufferPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 800139e:	4b4b      	ldr	r3, [pc, #300]	; (80014cc <processData+0x1ec>)
 80013a0:	edd3 7a00 	vldr	s15, [r3]
 80013a4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80014d0 <processData+0x1f0>
 80013a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ac:	4b49      	ldr	r3, [pc, #292]	; (80014d4 <processData+0x1f4>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	88fb      	ldrh	r3, [r7, #6]
 80013b2:	005b      	lsls	r3, r3, #1
 80013b4:	4413      	add	r3, r2
 80013b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ba:	ee17 2a90 	vmov	r2, s15
 80013be:	b212      	sxth	r2, r2
 80013c0:	801a      	strh	r2, [r3, #0]

    //================ RIGHT CHANNEL ================
    // Get ADC input and convert it to float
    rightIn = INT16_TO_FLOAT * inBufferPtr[n+1];
 80013c2:	4b3f      	ldr	r3, [pc, #252]	; (80014c0 <processData+0x1e0>)
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	3301      	adds	r3, #1
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4413      	add	r3, r2
 80013ce:	881b      	ldrh	r3, [r3, #0]
 80013d0:	b21b      	sxth	r3, r3
 80013d2:	ee07 3a90 	vmov	s15, r3
 80013d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013da:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 80014c4 <processData+0x1e4>
 80013de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013e2:	4b3d      	ldr	r3, [pc, #244]	; (80014d8 <processData+0x1f8>)
 80013e4:	edc3 7a00 	vstr	s15, [r3]
    if (rightIn > 1.0f)
 80013e8:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <processData+0x1f8>)
 80013ea:	edd3 7a00 	vldr	s15, [r3]
 80013ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80013f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013fa:	dd09      	ble.n	8001410 <processData+0x130>
    {
      rightIn -= 2.0f;
 80013fc:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <processData+0x1f8>)
 80013fe:	edd3 7a00 	vldr	s15, [r3]
 8001402:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8001406:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800140a:	4b33      	ldr	r3, [pc, #204]	; (80014d8 <processData+0x1f8>)
 800140c:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    rightOut = rightIn;
 8001410:	4b31      	ldr	r3, [pc, #196]	; (80014d8 <processData+0x1f8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a31      	ldr	r2, [pc, #196]	; (80014dc <processData+0x1fc>)
 8001416:	6013      	str	r3, [r2, #0]
    rightOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);
 8001418:	4b27      	ldr	r3, [pc, #156]	; (80014b8 <processData+0x1d8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff f815 	bl	800044c <__aeabi_ui2d>
 8001422:	a321      	add	r3, pc, #132	; (adr r3, 80014a8 <processData+0x1c8>)
 8001424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001428:	f7ff f88a 	bl	8000540 <__aeabi_dmul>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	ec43 2b17 	vmov	d7, r2, r3
 8001434:	eeb0 0a47 	vmov.f32	s0, s14
 8001438:	eef0 0a67 	vmov.f32	s1, s15
 800143c:	f004 fa3c 	bl	80058b8 <sin>
 8001440:	ec51 0b10 	vmov	r0, r1, d0
 8001444:	a31a      	add	r3, pc, #104	; (adr r3, 80014b0 <processData+0x1d0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f879 	bl	8000540 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fb35 	bl	8000ac4 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	4a1f      	ldr	r2, [pc, #124]	; (80014dc <processData+0x1fc>)
 800145e:	6013      	str	r3, [r2, #0]

    // Convert back to signed int  and set DAC output
    outBufferPtr[n+1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 8001460:	4b1e      	ldr	r3, [pc, #120]	; (80014dc <processData+0x1fc>)
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 80014d0 <processData+0x1f0>
 800146a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <processData+0x1f4>)
 8001470:	681a      	ldr	r2, [r3, #0]
 8001472:	88fb      	ldrh	r3, [r7, #6]
 8001474:	3301      	adds	r3, #1
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800147e:	ee17 2a90 	vmov	r2, s15
 8001482:	b212      	sxth	r2, r2
 8001484:	801a      	strh	r2, [r3, #0]
  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 8001486:	88fb      	ldrh	r3, [r7, #6]
 8001488:	3302      	adds	r3, #2
 800148a:	80fb      	strh	r3, [r7, #6]
 800148c:	88fb      	ldrh	r3, [r7, #6]
 800148e:	2b1e      	cmp	r3, #30
 8001490:	f67f af37 	bls.w	8001302 <processData+0x22>

  }
  flagDataReady = 0;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <processData+0x200>)
 8001496:	2200      	movs	r2, #0
 8001498:	701a      	strb	r2, [r3, #0]
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	f3af 8000 	nop.w
 80014a8:	b73fefb5 	.word	0xb73fefb5
 80014ac:	40c1abe4 	.word	0x40c1abe4
 80014b0:	00000000 	.word	0x00000000
 80014b4:	41cdcd65 	.word	0x41cdcd65
 80014b8:	200002ec 	.word	0x200002ec
 80014bc:	000186a0 	.word	0x000186a0
 80014c0:	200002e4 	.word	0x200002e4
 80014c4:	38000000 	.word	0x38000000
 80014c8:	200002f0 	.word	0x200002f0
 80014cc:	200002f4 	.word	0x200002f4
 80014d0:	47000000 	.word	0x47000000
 80014d4:	20000000 	.word	0x20000000
 80014d8:	200002f8 	.word	0x200002f8
 80014dc:	200002fc 	.word	0x200002fc
 80014e0:	200002e8 	.word	0x200002e8

080014e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014ea:	f000 fc31 	bl	8001d50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014ee:	f000 f82b 	bl	8001548 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014f2:	f000 f93b 	bl	800176c <MX_GPIO_Init>
  MX_DMA_Init();
 80014f6:	f000 f911 	bl	800171c <MX_DMA_Init>
  MX_I2C2_Init();
 80014fa:	f000 f88f 	bl	800161c <MX_I2C2_Init>
  MX_I2S2_Init();
 80014fe:	f000 f8bb 	bl	8001678 <MX_I2S2_Init>
  //MX_ADC1_Init();
  //MX_USART1_UART_Init();
  MX_TIM14_Init();
 8001502:	f000 f8e7 	bl	80016d4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  codec_init(&hi2c2);
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <main+0x4c>)
 8001508:	f7ff fce2 	bl	8000ed0 <codec_init>
  //codec_init_teste(&hi2c2);
  HAL_TIM_Base_Start_IT(&htim14);
 800150c:	4809      	ldr	r0, [pc, #36]	; (8001534 <main+0x50>)
 800150e:	f003 ff51 	bl	80053b4 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef status = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)dacData, (uint16_t *)adcData, dBUFFER_SIZE);
 8001512:	2340      	movs	r3, #64	; 0x40
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <main+0x54>)
 8001516:	4909      	ldr	r1, [pc, #36]	; (800153c <main+0x58>)
 8001518:	4809      	ldr	r0, [pc, #36]	; (8001540 <main+0x5c>)
 800151a:	f002 fce3 	bl	8003ee4 <HAL_I2SEx_TransmitReceive_DMA>
 800151e:	4603      	mov	r3, r0
 8001520:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (flagDataReady)
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <main+0x60>)
 8001524:	781b      	ldrb	r3, [r3, #0]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d0fb      	beq.n	8001522 <main+0x3e>
    {
		processData();
 800152a:	f7ff fed9 	bl	80012e0 <processData>
    if (flagDataReady)
 800152e:	e7f8      	b.n	8001522 <main+0x3e>
 8001530:	20000040 	.word	0x20000040
 8001534:	2000019c 	.word	0x2000019c
 8001538:	200001e4 	.word	0x200001e4
 800153c:	20000264 	.word	0x20000264
 8001540:	20000094 	.word	0x20000094
 8001544:	200002e8 	.word	0x200002e8

08001548 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b094      	sub	sp, #80	; 0x50
 800154c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800154e:	f107 0320 	add.w	r3, r7, #32
 8001552:	2230      	movs	r2, #48	; 0x30
 8001554:	2100      	movs	r1, #0
 8001556:	4618      	mov	r0, r3
 8001558:	f004 f980 	bl	800585c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800155c:	f107 030c 	add.w	r3, r7, #12
 8001560:	2200      	movs	r2, #0
 8001562:	601a      	str	r2, [r3, #0]
 8001564:	605a      	str	r2, [r3, #4]
 8001566:	609a      	str	r2, [r3, #8]
 8001568:	60da      	str	r2, [r3, #12]
 800156a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
 8001570:	4b28      	ldr	r3, [pc, #160]	; (8001614 <SystemClock_Config+0xcc>)
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	4a27      	ldr	r2, [pc, #156]	; (8001614 <SystemClock_Config+0xcc>)
 8001576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800157a:	6413      	str	r3, [r2, #64]	; 0x40
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <SystemClock_Config+0xcc>)
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
 800158c:	4b22      	ldr	r3, [pc, #136]	; (8001618 <SystemClock_Config+0xd0>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a21      	ldr	r2, [pc, #132]	; (8001618 <SystemClock_Config+0xd0>)
 8001592:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <SystemClock_Config+0xd0>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015a0:	607b      	str	r3, [r7, #4]
 80015a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015a4:	2301      	movs	r3, #1
 80015a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80015ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015ae:	2302      	movs	r3, #2
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 80015b8:	230d      	movs	r3, #13
 80015ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80015bc:	23a8      	movs	r3, #168	; 0xa8
 80015be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015c0:	2302      	movs	r3, #2
 80015c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015c4:	2304      	movs	r3, #4
 80015c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015c8:	f107 0320 	add.w	r3, r7, #32
 80015cc:	4618      	mov	r0, r3
 80015ce:	f003 f91d 	bl	800480c <HAL_RCC_OscConfig>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015d8:	f000 f99c 	bl	8001914 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015dc:	230f      	movs	r3, #15
 80015de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015e0:	2302      	movs	r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2105      	movs	r1, #5
 80015fa:	4618      	mov	r0, r3
 80015fc:	f003 fb7e 	bl	8004cfc <HAL_RCC_ClockConfig>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001606:	f000 f985 	bl	8001914 <Error_Handler>
  }
}
 800160a:	bf00      	nop
 800160c:	3750      	adds	r7, #80	; 0x50
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	40023800 	.word	0x40023800
 8001618:	40007000 	.word	0x40007000

0800161c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001620:	4b12      	ldr	r3, [pc, #72]	; (800166c <MX_I2C2_Init+0x50>)
 8001622:	4a13      	ldr	r2, [pc, #76]	; (8001670 <MX_I2C2_Init+0x54>)
 8001624:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001626:	4b11      	ldr	r3, [pc, #68]	; (800166c <MX_I2C2_Init+0x50>)
 8001628:	4a12      	ldr	r2, [pc, #72]	; (8001674 <MX_I2C2_Init+0x58>)
 800162a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800162c:	4b0f      	ldr	r3, [pc, #60]	; (800166c <MX_I2C2_Init+0x50>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <MX_I2C2_Init+0x50>)
 8001634:	2200      	movs	r2, #0
 8001636:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001638:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_I2C2_Init+0x50>)
 800163a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800163e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001640:	4b0a      	ldr	r3, [pc, #40]	; (800166c <MX_I2C2_Init+0x50>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_I2C2_Init+0x50>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800164c:	4b07      	ldr	r3, [pc, #28]	; (800166c <MX_I2C2_Init+0x50>)
 800164e:	2200      	movs	r2, #0
 8001650:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001652:	4b06      	ldr	r3, [pc, #24]	; (800166c <MX_I2C2_Init+0x50>)
 8001654:	2200      	movs	r2, #0
 8001656:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001658:	4804      	ldr	r0, [pc, #16]	; (800166c <MX_I2C2_Init+0x50>)
 800165a:	f001 fa3d 	bl	8002ad8 <HAL_I2C_Init>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001664:	f000 f956 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}
 800166c:	20000040 	.word	0x20000040
 8001670:	40005800 	.word	0x40005800
 8001674:	000186a0 	.word	0x000186a0

08001678 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800167c:	4b13      	ldr	r3, [pc, #76]	; (80016cc <MX_I2S2_Init+0x54>)
 800167e:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <MX_I2S2_Init+0x58>)
 8001680:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001682:	4b12      	ldr	r3, [pc, #72]	; (80016cc <MX_I2S2_Init+0x54>)
 8001684:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001688:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800168a:	4b10      	ldr	r3, [pc, #64]	; (80016cc <MX_I2S2_Init+0x54>)
 800168c:	2200      	movs	r2, #0
 800168e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001690:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <MX_I2S2_Init+0x54>)
 8001692:	2200      	movs	r2, #0
 8001694:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001696:	4b0d      	ldr	r3, [pc, #52]	; (80016cc <MX_I2S2_Init+0x54>)
 8001698:	f44f 7200 	mov.w	r2, #512	; 0x200
 800169c:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800169e:	4b0b      	ldr	r3, [pc, #44]	; (80016cc <MX_I2S2_Init+0x54>)
 80016a0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 80016a4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80016a6:	4b09      	ldr	r3, [pc, #36]	; (80016cc <MX_I2S2_Init+0x54>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80016ac:	4b07      	ldr	r3, [pc, #28]	; (80016cc <MX_I2S2_Init+0x54>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 80016b2:	4b06      	ldr	r3, [pc, #24]	; (80016cc <MX_I2S2_Init+0x54>)
 80016b4:	2201      	movs	r2, #1
 80016b6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80016b8:	4804      	ldr	r0, [pc, #16]	; (80016cc <MX_I2S2_Init+0x54>)
 80016ba:	f002 f9cd 	bl	8003a58 <HAL_I2S_Init>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 80016c4:	f000 f926 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	20000094 	.word	0x20000094
 80016d0:	40003800 	.word	0x40003800

080016d4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <MX_TIM14_Init+0x40>)
 80016da:	4a0f      	ldr	r2, [pc, #60]	; (8001718 <MX_TIM14_Init+0x44>)
 80016dc:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <MX_TIM14_Init+0x40>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <MX_TIM14_Init+0x40>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 80016ea:	4b0a      	ldr	r3, [pc, #40]	; (8001714 <MX_TIM14_Init+0x40>)
 80016ec:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80016f0:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f2:	4b08      	ldr	r3, [pc, #32]	; (8001714 <MX_TIM14_Init+0x40>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016f8:	4b06      	ldr	r3, [pc, #24]	; (8001714 <MX_TIM14_Init+0x40>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80016fe:	4805      	ldr	r0, [pc, #20]	; (8001714 <MX_TIM14_Init+0x40>)
 8001700:	f003 fe08 	bl	8005314 <HAL_TIM_Base_Init>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800170a:	f000 f903 	bl	8001914 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 800170e:	bf00      	nop
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	2000019c 	.word	0x2000019c
 8001718:	40002000 	.word	0x40002000

0800171c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	607b      	str	r3, [r7, #4]
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <MX_DMA_Init+0x4c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <MX_DMA_Init+0x4c>)
 800172c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <MX_DMA_Init+0x4c>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800173a:	607b      	str	r3, [r7, #4]
 800173c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800173e:	2200      	movs	r2, #0
 8001740:	2100      	movs	r1, #0
 8001742:	200e      	movs	r0, #14
 8001744:	f000 fc51 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001748:	200e      	movs	r0, #14
 800174a:	f000 fc6a 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	200f      	movs	r0, #15
 8001754:	f000 fc49 	bl	8001fea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001758:	200f      	movs	r0, #15
 800175a:	f000 fc62 	bl	8002022 <HAL_NVIC_EnableIRQ>

}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800

0800176c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	b08a      	sub	sp, #40	; 0x28
 8001770:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	2200      	movs	r2, #0
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	605a      	str	r2, [r3, #4]
 800177c:	609a      	str	r2, [r3, #8]
 800177e:	60da      	str	r2, [r3, #12]
 8001780:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	4b2e      	ldr	r3, [pc, #184]	; (8001840 <MX_GPIO_Init+0xd4>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a2d      	ldr	r2, [pc, #180]	; (8001840 <MX_GPIO_Init+0xd4>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b2b      	ldr	r3, [pc, #172]	; (8001840 <MX_GPIO_Init+0xd4>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	613b      	str	r3, [r7, #16]
 800179c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b27      	ldr	r3, [pc, #156]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a26      	ldr	r2, [pc, #152]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b24      	ldr	r3, [pc, #144]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60bb      	str	r3, [r7, #8]
 80017be:	4b20      	ldr	r3, [pc, #128]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a1f      	ldr	r2, [pc, #124]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b1d      	ldr	r3, [pc, #116]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	60bb      	str	r3, [r7, #8]
 80017d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	607b      	str	r3, [r7, #4]
 80017da:	4b19      	ldr	r3, [pc, #100]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	4a18      	ldr	r2, [pc, #96]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017e0:	f043 0304 	orr.w	r3, r3, #4
 80017e4:	6313      	str	r3, [r2, #48]	; 0x30
 80017e6:	4b16      	ldr	r3, [pc, #88]	; (8001840 <MX_GPIO_Init+0xd4>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	f003 0304 	and.w	r3, r3, #4
 80017ee:	607b      	str	r3, [r7, #4]
 80017f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 80017f2:	2200      	movs	r2, #0
 80017f4:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 80017f8:	4812      	ldr	r0, [pc, #72]	; (8001844 <MX_GPIO_Init+0xd8>)
 80017fa:	f001 f939 	bl	8002a70 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 80017fe:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001804:	2301      	movs	r3, #1
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180c:	2300      	movs	r3, #0
 800180e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	4619      	mov	r1, r3
 8001816:	480b      	ldr	r0, [pc, #44]	; (8001844 <MX_GPIO_Init+0xd8>)
 8001818:	f000 ff8e 	bl	8002738 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 800181c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001822:	2300      	movs	r3, #0
 8001824:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001826:	2300      	movs	r3, #0
 8001828:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 800182a:	f107 0314 	add.w	r3, r7, #20
 800182e:	4619      	mov	r1, r3
 8001830:	4804      	ldr	r0, [pc, #16]	; (8001844 <MX_GPIO_Init+0xd8>)
 8001832:	f000 ff81 	bl	8002738 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001836:	bf00      	nop
 8001838:	3728      	adds	r7, #40	; 0x28
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	40023800 	.word	0x40023800
 8001844:	40020400 	.word	0x40020400

08001848 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  //static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a24      	ldr	r2, [pc, #144]	; (80018e8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d142      	bne.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x98>
  {
    

    GL_timer_100us = 1;
 800185a:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800185c:	2201      	movs	r2, #1
 800185e:	601a      	str	r2, [r3, #0]
    count_100us++;
 8001860:	4b23      	ldr	r3, [pc, #140]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	3301      	adds	r3, #1
 8001866:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001868:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 800186a:	4b21      	ldr	r3, [pc, #132]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b09      	cmp	r3, #9
 8001870:	dd0a      	ble.n	8001888 <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8001872:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8001874:	2200      	movs	r2, #0
 8001876:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8001878:	4b1e      	ldr	r3, [pc, #120]	; (80018f4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 800187a:	2201      	movs	r2, #1
 800187c:	601a      	str	r2, [r3, #0]
      count_1ms++;
 800187e:	4b1e      	ldr	r3, [pc, #120]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	4a1c      	ldr	r2, [pc, #112]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001886:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2b09      	cmp	r3, #9
 800188e:	dd0a      	ble.n	80018a6 <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8001890:	4b19      	ldr	r3, [pc, #100]	; (80018f8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001892:	2200      	movs	r2, #0
 8001894:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8001896:	4b19      	ldr	r3, [pc, #100]	; (80018fc <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001898:	2201      	movs	r2, #1
 800189a:	601a      	str	r2, [r3, #0]
      count_10ms++;
 800189c:	4b18      	ldr	r3, [pc, #96]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	3301      	adds	r3, #1
 80018a2:	4a17      	ldr	r2, [pc, #92]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018a4:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2b09      	cmp	r3, #9
 80018ac:	dd0e      	ble.n	80018cc <HAL_TIM_PeriodElapsedCallback+0x84>
    {
      count_10ms = 0;
 80018ae:	4b14      	ldr	r3, [pc, #80]	; (8001900 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 80018b4:	4b13      	ldr	r3, [pc, #76]	; (8001904 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80018b6:	2201      	movs	r2, #1
 80018b8:	601a      	str	r2, [r3, #0]
      count_100ms++;
 80018ba:	4b13      	ldr	r3, [pc, #76]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	3301      	adds	r3, #1
 80018c0:	4a11      	ldr	r2, [pc, #68]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018c2:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 80018c4:	2180      	movs	r1, #128	; 0x80
 80018c6:	4811      	ldr	r0, [pc, #68]	; (800190c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80018c8:	f001 f8eb 	bl	8002aa2 <HAL_GPIO_TogglePin>
    }

    if(count_100ms >= 10)
 80018cc:	4b0e      	ldr	r3, [pc, #56]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b09      	cmp	r3, #9
 80018d2:	dd05      	ble.n	80018e0 <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      count_100ms = 0;
 80018d4:	4b0c      	ldr	r3, [pc, #48]	; (8001908 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 80018da:	4b0d      	ldr	r3, [pc, #52]	; (8001910 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 80018dc:	2201      	movs	r2, #1
 80018de:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }
}
 80018e0:	bf00      	nop
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40002000 	.word	0x40002000
 80018ec:	2000002c 	.word	0x2000002c
 80018f0:	20000300 	.word	0x20000300
 80018f4:	20000030 	.word	0x20000030
 80018f8:	20000304 	.word	0x20000304
 80018fc:	20000034 	.word	0x20000034
 8001900:	20000308 	.word	0x20000308
 8001904:	20000038 	.word	0x20000038
 8001908:	2000030c 	.word	0x2000030c
 800190c:	40020400 	.word	0x40020400
 8001910:	2000003c 	.word	0x2000003c

08001914 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001918:	b672      	cpsid	i
}
 800191a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800191c:	e7fe      	b.n	800191c <Error_Handler+0x8>
	...

08001920 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	607b      	str	r3, [r7, #4]
 800192a:	4b10      	ldr	r3, [pc, #64]	; (800196c <HAL_MspInit+0x4c>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	4a0f      	ldr	r2, [pc, #60]	; (800196c <HAL_MspInit+0x4c>)
 8001930:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001934:	6453      	str	r3, [r2, #68]	; 0x44
 8001936:	4b0d      	ldr	r3, [pc, #52]	; (800196c <HAL_MspInit+0x4c>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	603b      	str	r3, [r7, #0]
 8001946:	4b09      	ldr	r3, [pc, #36]	; (800196c <HAL_MspInit+0x4c>)
 8001948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194a:	4a08      	ldr	r2, [pc, #32]	; (800196c <HAL_MspInit+0x4c>)
 800194c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001950:	6413      	str	r3, [r2, #64]	; 0x40
 8001952:	4b06      	ldr	r3, [pc, #24]	; (800196c <HAL_MspInit+0x4c>)
 8001954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001956:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800195a:	603b      	str	r3, [r7, #0]
 800195c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
 800196a:	bf00      	nop
 800196c:	40023800 	.word	0x40023800

08001970 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b08a      	sub	sp, #40	; 0x28
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001978:	f107 0314 	add.w	r3, r7, #20
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
 8001982:	609a      	str	r2, [r3, #8]
 8001984:	60da      	str	r2, [r3, #12]
 8001986:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a19      	ldr	r2, [pc, #100]	; (80019f4 <HAL_I2C_MspInit+0x84>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d12c      	bne.n	80019ec <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	613b      	str	r3, [r7, #16]
 8001996:	4b18      	ldr	r3, [pc, #96]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b15      	ldr	r3, [pc, #84]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ae:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80019b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019b4:	2312      	movs	r3, #18
 80019b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b8:	2300      	movs	r3, #0
 80019ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019bc:	2303      	movs	r3, #3
 80019be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80019c0:	2304      	movs	r3, #4
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	4619      	mov	r1, r3
 80019ca:	480c      	ldr	r0, [pc, #48]	; (80019fc <HAL_I2C_MspInit+0x8c>)
 80019cc:	f000 feb4 	bl	8002738 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80019d0:	2300      	movs	r3, #0
 80019d2:	60fb      	str	r3, [r7, #12]
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019da:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019de:	6413      	str	r3, [r2, #64]	; 0x40
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <HAL_I2C_MspInit+0x88>)
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80019ec:	bf00      	nop
 80019ee:	3728      	adds	r7, #40	; 0x28
 80019f0:	46bd      	mov	sp, r7
 80019f2:	bd80      	pop	{r7, pc}
 80019f4:	40005800 	.word	0x40005800
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40020400 	.word	0x40020400

08001a00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b08e      	sub	sp, #56	; 0x38
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a18:	f107 0314 	add.w	r3, r7, #20
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	601a      	str	r2, [r3, #0]
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	609a      	str	r2, [r3, #8]
 8001a24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a6b      	ldr	r2, [pc, #428]	; (8001bd8 <HAL_I2S_MspInit+0x1d8>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	f040 80cf 	bne.w	8001bd0 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001a32:	2301      	movs	r3, #1
 8001a34:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001a36:	2332      	movs	r3, #50	; 0x32
 8001a38:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001a3e:	f107 0314 	add.w	r3, r7, #20
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 fb26 	bl	8005094 <HAL_RCCEx_PeriphCLKConfig>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001a4e:	f7ff ff61 	bl	8001914 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5a:	4a60      	ldr	r2, [pc, #384]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a60:	6413      	str	r3, [r2, #64]	; 0x40
 8001a62:	4b5e      	ldr	r3, [pc, #376]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	60fb      	str	r3, [r7, #12]
 8001a72:	4b5a      	ldr	r3, [pc, #360]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	4a59      	ldr	r2, [pc, #356]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a78:	f043 0302 	orr.w	r3, r3, #2
 8001a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a7e:	4b57      	ldr	r3, [pc, #348]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a82:	f003 0302 	and.w	r3, r3, #2
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	4b53      	ldr	r3, [pc, #332]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	4a52      	ldr	r2, [pc, #328]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a94:	f043 0304 	orr.w	r3, r3, #4
 8001a98:	6313      	str	r3, [r2, #48]	; 0x30
 8001a9a:	4b50      	ldr	r3, [pc, #320]	; (8001bdc <HAL_I2S_MspInit+0x1dc>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	f003 0304 	and.w	r3, r3, #4
 8001aa2:	60bb      	str	r3, [r7, #8]
 8001aa4:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001aa6:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001aaa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aac:	2302      	movs	r3, #2
 8001aae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ab8:	2305      	movs	r3, #5
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001abc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4847      	ldr	r0, [pc, #284]	; (8001be0 <HAL_I2S_MspInit+0x1e0>)
 8001ac4:	f000 fe38 	bl	8002738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001ac8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001acc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8001ada:	2306      	movs	r3, #6
 8001adc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ade:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	483e      	ldr	r0, [pc, #248]	; (8001be0 <HAL_I2S_MspInit+0x1e0>)
 8001ae6:	f000 fe27 	bl	8002738 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aea:	2340      	movs	r3, #64	; 0x40
 8001aec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af6:	2300      	movs	r3, #0
 8001af8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afa:	2305      	movs	r3, #5
 8001afc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b02:	4619      	mov	r1, r3
 8001b04:	4837      	ldr	r0, [pc, #220]	; (8001be4 <HAL_I2S_MspInit+0x1e4>)
 8001b06:	f000 fe17 	bl	8002738 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b0c:	4a37      	ldr	r2, [pc, #220]	; (8001bec <HAL_I2S_MspInit+0x1ec>)
 8001b0e:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8001b10:	4b35      	ldr	r3, [pc, #212]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b16:	4b34      	ldr	r3, [pc, #208]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b18:	2240      	movs	r2, #64	; 0x40
 8001b1a:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b1c:	4b32      	ldr	r3, [pc, #200]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001b22:	4b31      	ldr	r3, [pc, #196]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b28:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b2a:	4b2f      	ldr	r3, [pc, #188]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b2c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b30:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b32:	4b2d      	ldr	r3, [pc, #180]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b34:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b38:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001b3a:	4b2b      	ldr	r3, [pc, #172]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001b40:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001b42:	4b29      	ldr	r3, [pc, #164]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b44:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001b48:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4a:	4b27      	ldr	r3, [pc, #156]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001b50:	4825      	ldr	r0, [pc, #148]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b52:	f000 fa81 	bl	8002058 <HAL_DMA_Init>
 8001b56:	4603      	mov	r3, r0
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d001      	beq.n	8001b60 <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8001b5c:	f7ff feda 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	4a21      	ldr	r2, [pc, #132]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b64:	639a      	str	r2, [r3, #56]	; 0x38
 8001b66:	4a20      	ldr	r2, [pc, #128]	; (8001be8 <HAL_I2S_MspInit+0x1e8>)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001b6c:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b6e:	4a21      	ldr	r2, [pc, #132]	; (8001bf4 <HAL_I2S_MspInit+0x1f4>)
 8001b70:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8001b72:	4b1f      	ldr	r3, [pc, #124]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b74:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001b78:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b7a:	4b1d      	ldr	r3, [pc, #116]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b80:	4b1b      	ldr	r3, [pc, #108]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8c:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b8e:	4b18      	ldr	r3, [pc, #96]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b94:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b96:	4b16      	ldr	r3, [pc, #88]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001b98:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b9c:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001b9e:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001ba0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ba4:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001ba6:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001ba8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001bac:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001bae:	4b10      	ldr	r3, [pc, #64]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8001bb4:	480e      	ldr	r0, [pc, #56]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001bb6:	f000 fa4f 	bl	8002058 <HAL_DMA_Init>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001bc0:	f7ff fea8 	bl	8001914 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001bc8:	63da      	str	r2, [r3, #60]	; 0x3c
 8001bca:	4a09      	ldr	r2, [pc, #36]	; (8001bf0 <HAL_I2S_MspInit+0x1f0>)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001bd0:	bf00      	nop
 8001bd2:	3738      	adds	r7, #56	; 0x38
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40003800 	.word	0x40003800
 8001bdc:	40023800 	.word	0x40023800
 8001be0:	40020400 	.word	0x40020400
 8001be4:	40020800 	.word	0x40020800
 8001be8:	200000dc 	.word	0x200000dc
 8001bec:	40026070 	.word	0x40026070
 8001bf0:	2000013c 	.word	0x2000013c
 8001bf4:	40026058 	.word	0x40026058

08001bf8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_TIM_Base_MspInit+0x48>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d115      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	60fb      	str	r3, [r7, #12]
 8001c0e:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <HAL_TIM_Base_MspInit+0x4c>)
 8001c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c12:	4a0c      	ldr	r2, [pc, #48]	; (8001c44 <HAL_TIM_Base_MspInit+0x4c>)
 8001c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c18:	6413      	str	r3, [r2, #64]	; 0x40
 8001c1a:	4b0a      	ldr	r3, [pc, #40]	; (8001c44 <HAL_TIM_Base_MspInit+0x4c>)
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c22:	60fb      	str	r3, [r7, #12]
 8001c24:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2100      	movs	r1, #0
 8001c2a:	202d      	movs	r0, #45	; 0x2d
 8001c2c:	f000 f9dd 	bl	8001fea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001c30:	202d      	movs	r0, #45	; 0x2d
 8001c32:	f000 f9f6 	bl	8002022 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40002000 	.word	0x40002000
 8001c44:	40023800 	.word	0x40023800

08001c48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c4c:	e7fe      	b.n	8001c4c <NMI_Handler+0x4>

08001c4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c4e:	b480      	push	{r7}
 8001c50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c52:	e7fe      	b.n	8001c52 <HardFault_Handler+0x4>

08001c54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c58:	e7fe      	b.n	8001c58 <MemManage_Handler+0x4>

08001c5a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c5e:	e7fe      	b.n	8001c5e <BusFault_Handler+0x4>

08001c60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c64:	e7fe      	b.n	8001c64 <UsageFault_Handler+0x4>

08001c66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c66:	b480      	push	{r7}
 8001c68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6a:	bf00      	nop
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c82:	b480      	push	{r7}
 8001c84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c86:	bf00      	nop
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr

08001c90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c94:	f000 f8ae 	bl	8001df4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c98:	bf00      	nop
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA1_Stream3_IRQHandler+0x10>)
 8001ca2:	f000 fadf 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	2000013c 	.word	0x2000013c

08001cb0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <DMA1_Stream4_IRQHandler+0x10>)
 8001cb6:	f000 fad5 	bl	8002264 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	200000dc 	.word	0x200000dc

08001cc4 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001cca:	f003 fbe3 	bl	8005494 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	2000019c 	.word	0x2000019c

08001cd8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cdc:	4b06      	ldr	r3, [pc, #24]	; (8001cf8 <SystemInit+0x20>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	4a05      	ldr	r2, [pc, #20]	; (8001cf8 <SystemInit+0x20>)
 8001ce4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ce8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000ed00 	.word	0xe000ed00

08001cfc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001cfc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d34 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d00:	480d      	ldr	r0, [pc, #52]	; (8001d38 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d02:	490e      	ldr	r1, [pc, #56]	; (8001d3c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d04:	4a0e      	ldr	r2, [pc, #56]	; (8001d40 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d08:	e002      	b.n	8001d10 <LoopCopyDataInit>

08001d0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d0e:	3304      	adds	r3, #4

08001d10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d14:	d3f9      	bcc.n	8001d0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d16:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d18:	4c0b      	ldr	r4, [pc, #44]	; (8001d48 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d1c:	e001      	b.n	8001d22 <LoopFillZerobss>

08001d1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d20:	3204      	adds	r2, #4

08001d22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d24:	d3fb      	bcc.n	8001d1e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d26:	f7ff ffd7 	bl	8001cd8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d2a:	f003 fd9f 	bl	800586c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d2e:	f7ff fbd9 	bl	80014e4 <main>
  bx  lr    
 8001d32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001d38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d3c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001d40:	08006b58 	.word	0x08006b58
  ldr r2, =_sbss
 8001d44:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001d48:	20000314 	.word	0x20000314

08001d4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d4c:	e7fe      	b.n	8001d4c <ADC_IRQHandler>
	...

08001d50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d54:	4b0e      	ldr	r3, [pc, #56]	; (8001d90 <HAL_Init+0x40>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0d      	ldr	r2, [pc, #52]	; (8001d90 <HAL_Init+0x40>)
 8001d5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_Init+0x40>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a0a      	ldr	r2, [pc, #40]	; (8001d90 <HAL_Init+0x40>)
 8001d66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d6c:	4b08      	ldr	r3, [pc, #32]	; (8001d90 <HAL_Init+0x40>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a07      	ldr	r2, [pc, #28]	; (8001d90 <HAL_Init+0x40>)
 8001d72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d78:	2003      	movs	r0, #3
 8001d7a:	f000 f92b 	bl	8001fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d7e:	200f      	movs	r0, #15
 8001d80:	f000 f808 	bl	8001d94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d84:	f7ff fdcc 	bl	8001920 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023c00 	.word	0x40023c00

08001d94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d9c:	4b12      	ldr	r3, [pc, #72]	; (8001de8 <HAL_InitTick+0x54>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	4b12      	ldr	r3, [pc, #72]	; (8001dec <HAL_InitTick+0x58>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	4619      	mov	r1, r3
 8001da6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001daa:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	4618      	mov	r0, r3
 8001db4:	f000 f943 	bl	800203e <HAL_SYSTICK_Config>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e00e      	b.n	8001de0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2b0f      	cmp	r3, #15
 8001dc6:	d80a      	bhi.n	8001dde <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dc8:	2200      	movs	r2, #0
 8001dca:	6879      	ldr	r1, [r7, #4]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	f000 f90b 	bl	8001fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001dd4:	4a06      	ldr	r2, [pc, #24]	; (8001df0 <HAL_InitTick+0x5c>)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	e000      	b.n	8001de0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001dde:	2301      	movs	r3, #1
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20000004 	.word	0x20000004
 8001dec:	2000000c 	.word	0x2000000c
 8001df0:	20000008 	.word	0x20000008

08001df4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001df8:	4b06      	ldr	r3, [pc, #24]	; (8001e14 <HAL_IncTick+0x20>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_IncTick+0x24>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4413      	add	r3, r2
 8001e04:	4a04      	ldr	r2, [pc, #16]	; (8001e18 <HAL_IncTick+0x24>)
 8001e06:	6013      	str	r3, [r2, #0]
}
 8001e08:	bf00      	nop
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
 8001e12:	bf00      	nop
 8001e14:	2000000c 	.word	0x2000000c
 8001e18:	20000310 	.word	0x20000310

08001e1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8001e20:	4b03      	ldr	r3, [pc, #12]	; (8001e30 <HAL_GetTick+0x14>)
 8001e22:	681b      	ldr	r3, [r3, #0]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	20000310 	.word	0x20000310

08001e34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b085      	sub	sp, #20
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f003 0307 	and.w	r3, r3, #7
 8001e42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e46:	68db      	ldr	r3, [r3, #12]
 8001e48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e4a:	68ba      	ldr	r2, [r7, #8]
 8001e4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e50:	4013      	ands	r3, r2
 8001e52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e66:	4a04      	ldr	r2, [pc, #16]	; (8001e78 <__NVIC_SetPriorityGrouping+0x44>)
 8001e68:	68bb      	ldr	r3, [r7, #8]
 8001e6a:	60d3      	str	r3, [r2, #12]
}
 8001e6c:	bf00      	nop
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00

08001e7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e80:	4b04      	ldr	r3, [pc, #16]	; (8001e94 <__NVIC_GetPriorityGrouping+0x18>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	0a1b      	lsrs	r3, r3, #8
 8001e86:	f003 0307 	and.w	r3, r3, #7
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	46bd      	mov	sp, r7
 8001e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e92:	4770      	bx	lr
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	db0b      	blt.n	8001ec2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	f003 021f 	and.w	r2, r3, #31
 8001eb0:	4907      	ldr	r1, [pc, #28]	; (8001ed0 <__NVIC_EnableIRQ+0x38>)
 8001eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001eb6:	095b      	lsrs	r3, r3, #5
 8001eb8:	2001      	movs	r0, #1
 8001eba:	fa00 f202 	lsl.w	r2, r0, r2
 8001ebe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr
 8001ece:	bf00      	nop
 8001ed0:	e000e100 	.word	0xe000e100

08001ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ed4:	b480      	push	{r7}
 8001ed6:	b083      	sub	sp, #12
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	6039      	str	r1, [r7, #0]
 8001ede:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ee0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	db0a      	blt.n	8001efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	b2da      	uxtb	r2, r3
 8001eec:	490c      	ldr	r1, [pc, #48]	; (8001f20 <__NVIC_SetPriority+0x4c>)
 8001eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ef2:	0112      	lsls	r2, r2, #4
 8001ef4:	b2d2      	uxtb	r2, r2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001efc:	e00a      	b.n	8001f14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	b2da      	uxtb	r2, r3
 8001f02:	4908      	ldr	r1, [pc, #32]	; (8001f24 <__NVIC_SetPriority+0x50>)
 8001f04:	79fb      	ldrb	r3, [r7, #7]
 8001f06:	f003 030f 	and.w	r3, r3, #15
 8001f0a:	3b04      	subs	r3, #4
 8001f0c:	0112      	lsls	r2, r2, #4
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	440b      	add	r3, r1
 8001f12:	761a      	strb	r2, [r3, #24]
}
 8001f14:	bf00      	nop
 8001f16:	370c      	adds	r7, #12
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1e:	4770      	bx	lr
 8001f20:	e000e100 	.word	0xe000e100
 8001f24:	e000ed00 	.word	0xe000ed00

08001f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b089      	sub	sp, #36	; 0x24
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	60f8      	str	r0, [r7, #12]
 8001f30:	60b9      	str	r1, [r7, #8]
 8001f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f003 0307 	and.w	r3, r3, #7
 8001f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f1c3 0307 	rsb	r3, r3, #7
 8001f42:	2b04      	cmp	r3, #4
 8001f44:	bf28      	it	cs
 8001f46:	2304      	movcs	r3, #4
 8001f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	2b06      	cmp	r3, #6
 8001f50:	d902      	bls.n	8001f58 <NVIC_EncodePriority+0x30>
 8001f52:	69fb      	ldr	r3, [r7, #28]
 8001f54:	3b03      	subs	r3, #3
 8001f56:	e000      	b.n	8001f5a <NVIC_EncodePriority+0x32>
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	fa02 f303 	lsl.w	r3, r2, r3
 8001f66:	43da      	mvns	r2, r3
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	401a      	ands	r2, r3
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f70:	f04f 31ff 	mov.w	r1, #4294967295
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7a:	43d9      	mvns	r1, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f80:	4313      	orrs	r3, r2
         );
}
 8001f82:	4618      	mov	r0, r3
 8001f84:	3724      	adds	r7, #36	; 0x24
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
	...

08001f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	3b01      	subs	r3, #1
 8001f9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001fa0:	d301      	bcc.n	8001fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e00f      	b.n	8001fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fa6:	4a0a      	ldr	r2, [pc, #40]	; (8001fd0 <SysTick_Config+0x40>)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	3b01      	subs	r3, #1
 8001fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fae:	210f      	movs	r1, #15
 8001fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fb4:	f7ff ff8e 	bl	8001ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fb8:	4b05      	ldr	r3, [pc, #20]	; (8001fd0 <SysTick_Config+0x40>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fbe:	4b04      	ldr	r3, [pc, #16]	; (8001fd0 <SysTick_Config+0x40>)
 8001fc0:	2207      	movs	r2, #7
 8001fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fc4:	2300      	movs	r3, #0
}
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	e000e010 	.word	0xe000e010

08001fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b082      	sub	sp, #8
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fdc:	6878      	ldr	r0, [r7, #4]
 8001fde:	f7ff ff29 	bl	8001e34 <__NVIC_SetPriorityGrouping>
}
 8001fe2:	bf00      	nop
 8001fe4:	3708      	adds	r7, #8
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fea:	b580      	push	{r7, lr}
 8001fec:	b086      	sub	sp, #24
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	60b9      	str	r1, [r7, #8]
 8001ff4:	607a      	str	r2, [r7, #4]
 8001ff6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ffc:	f7ff ff3e 	bl	8001e7c <__NVIC_GetPriorityGrouping>
 8002000:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	68b9      	ldr	r1, [r7, #8]
 8002006:	6978      	ldr	r0, [r7, #20]
 8002008:	f7ff ff8e 	bl	8001f28 <NVIC_EncodePriority>
 800200c:	4602      	mov	r2, r0
 800200e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff ff5d 	bl	8001ed4 <__NVIC_SetPriority>
}
 800201a:	bf00      	nop
 800201c:	3718      	adds	r7, #24
 800201e:	46bd      	mov	sp, r7
 8002020:	bd80      	pop	{r7, pc}

08002022 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002022:	b580      	push	{r7, lr}
 8002024:	b082      	sub	sp, #8
 8002026:	af00      	add	r7, sp, #0
 8002028:	4603      	mov	r3, r0
 800202a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800202c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff ff31 	bl	8001e98 <__NVIC_EnableIRQ>
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}

0800203e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800203e:	b580      	push	{r7, lr}
 8002040:	b082      	sub	sp, #8
 8002042:	af00      	add	r7, sp, #0
 8002044:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ffa2 	bl	8001f90 <SysTick_Config>
 800204c:	4603      	mov	r3, r0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
	...

08002058 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002064:	f7ff feda 	bl	8001e1c <HAL_GetTick>
 8002068:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e099      	b.n	80021a8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	2202      	movs	r2, #2
 8002078:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f022 0201 	bic.w	r2, r2, #1
 8002092:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002094:	e00f      	b.n	80020b6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002096:	f7ff fec1 	bl	8001e1c <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b05      	cmp	r3, #5
 80020a2:	d908      	bls.n	80020b6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2220      	movs	r2, #32
 80020a8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2203      	movs	r2, #3
 80020ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80020b2:	2303      	movs	r3, #3
 80020b4:	e078      	b.n	80021a8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1e8      	bne.n	8002096 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4b38      	ldr	r3, [pc, #224]	; (80021b0 <HAL_DMA_Init+0x158>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685a      	ldr	r2, [r3, #4]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80020e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80020ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	699b      	ldr	r3, [r3, #24]
 80020f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80020fa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6a1b      	ldr	r3, [r3, #32]
 8002100:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002102:	697a      	ldr	r2, [r7, #20]
 8002104:	4313      	orrs	r3, r2
 8002106:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	2b04      	cmp	r3, #4
 800210e:	d107      	bne.n	8002120 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002118:	4313      	orrs	r3, r2
 800211a:	697a      	ldr	r2, [r7, #20]
 800211c:	4313      	orrs	r3, r2
 800211e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	697a      	ldr	r2, [r7, #20]
 8002126:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	695b      	ldr	r3, [r3, #20]
 800212e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f023 0307 	bic.w	r3, r3, #7
 8002136:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002146:	2b04      	cmp	r3, #4
 8002148:	d117      	bne.n	800217a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	4313      	orrs	r3, r2
 8002152:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002158:	2b00      	cmp	r3, #0
 800215a:	d00e      	beq.n	800217a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f000 fa6f 	bl	8002640 <DMA_CheckFifoParam>
 8002162:	4603      	mov	r3, r0
 8002164:	2b00      	cmp	r3, #0
 8002166:	d008      	beq.n	800217a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	2240      	movs	r2, #64	; 0x40
 800216c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	2201      	movs	r2, #1
 8002172:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002176:	2301      	movs	r3, #1
 8002178:	e016      	b.n	80021a8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	697a      	ldr	r2, [r7, #20]
 8002180:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002182:	6878      	ldr	r0, [r7, #4]
 8002184:	f000 fa26 	bl	80025d4 <DMA_CalcBaseAndBitshift>
 8002188:	4603      	mov	r3, r0
 800218a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002190:	223f      	movs	r2, #63	; 0x3f
 8002192:	409a      	lsls	r2, r3
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80021a6:	2300      	movs	r3, #0
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	3718      	adds	r7, #24
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	f010803f 	.word	0xf010803f

080021b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	60f8      	str	r0, [r7, #12]
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c2:	2300      	movs	r3, #0
 80021c4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d101      	bne.n	80021da <HAL_DMA_Start_IT+0x26>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e040      	b.n	800225c <HAL_DMA_Start_IT+0xa8>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2201      	movs	r2, #1
 80021de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d12f      	bne.n	800224e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2202      	movs	r2, #2
 80021f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2200      	movs	r2, #0
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	68b9      	ldr	r1, [r7, #8]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f9b8 	bl	8002578 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220c:	223f      	movs	r2, #63	; 0x3f
 800220e:	409a      	lsls	r2, r3
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f042 0216 	orr.w	r2, r2, #22
 8002222:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	2b00      	cmp	r3, #0
 800222a:	d007      	beq.n	800223c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f042 0208 	orr.w	r2, r2, #8
 800223a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f042 0201 	orr.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	e005      	b.n	800225a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2200      	movs	r2, #0
 8002252:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002256:	2302      	movs	r3, #2
 8002258:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800225a:	7dfb      	ldrb	r3, [r7, #23]
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}

08002264 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b086      	sub	sp, #24
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002270:	4b8e      	ldr	r3, [pc, #568]	; (80024ac <HAL_DMA_IRQHandler+0x248>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a8e      	ldr	r2, [pc, #568]	; (80024b0 <HAL_DMA_IRQHandler+0x24c>)
 8002276:	fba2 2303 	umull	r2, r3, r2, r3
 800227a:	0a9b      	lsrs	r3, r3, #10
 800227c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002282:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228e:	2208      	movs	r2, #8
 8002290:	409a      	lsls	r2, r3
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	4013      	ands	r3, r2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d013      	beq.n	80022d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0204 	bic.w	r2, r2, #4
 80022b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022bc:	2208      	movs	r2, #8
 80022be:	409a      	lsls	r2, r3
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	f043 0201 	orr.w	r2, r3, #1
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022d4:	2201      	movs	r2, #1
 80022d6:	409a      	lsls	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d012      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00b      	beq.n	8002306 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022f2:	2201      	movs	r2, #1
 80022f4:	409a      	lsls	r2, r3
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022fe:	f043 0202 	orr.w	r2, r3, #2
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800230a:	2204      	movs	r2, #4
 800230c:	409a      	lsls	r2, r3
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	4013      	ands	r3, r2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d012      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0302 	and.w	r3, r3, #2
 8002320:	2b00      	cmp	r3, #0
 8002322:	d00b      	beq.n	800233c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002328:	2204      	movs	r2, #4
 800232a:	409a      	lsls	r2, r3
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002340:	2210      	movs	r2, #16
 8002342:	409a      	lsls	r2, r3
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	4013      	ands	r3, r2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d043      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0308 	and.w	r3, r3, #8
 8002356:	2b00      	cmp	r3, #0
 8002358:	d03c      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235e:	2210      	movs	r2, #16
 8002360:	409a      	lsls	r2, r3
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d018      	beq.n	80023a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d108      	bne.n	8002394 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d024      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	4798      	blx	r3
 8002392:	e01f      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01b      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	4798      	blx	r3
 80023a4:	e016      	b.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d107      	bne.n	80023c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f022 0208 	bic.w	r2, r2, #8
 80023c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023d8:	2220      	movs	r2, #32
 80023da:	409a      	lsls	r2, r3
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	4013      	ands	r3, r2
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 808f 	beq.w	8002504 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0310 	and.w	r3, r3, #16
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	f000 8087 	beq.w	8002504 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023fa:	2220      	movs	r2, #32
 80023fc:	409a      	lsls	r2, r3
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002408:	b2db      	uxtb	r3, r3
 800240a:	2b05      	cmp	r3, #5
 800240c:	d136      	bne.n	800247c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	681a      	ldr	r2, [r3, #0]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 0216 	bic.w	r2, r2, #22
 800241c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695a      	ldr	r2, [r3, #20]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800242c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <HAL_DMA_IRQHandler+0x1da>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800243a:	2b00      	cmp	r3, #0
 800243c:	d007      	beq.n	800244e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f022 0208 	bic.w	r2, r2, #8
 800244c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002452:	223f      	movs	r2, #63	; 0x3f
 8002454:	409a      	lsls	r2, r3
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	2b00      	cmp	r3, #0
 8002470:	d07e      	beq.n	8002570 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	4798      	blx	r3
        }
        return;
 800247a:	e079      	b.n	8002570 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002486:	2b00      	cmp	r3, #0
 8002488:	d01d      	beq.n	80024c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d10d      	bne.n	80024b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800249c:	2b00      	cmp	r3, #0
 800249e:	d031      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	4798      	blx	r3
 80024a8:	e02c      	b.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
 80024aa:	bf00      	nop
 80024ac:	20000004 	.word	0x20000004
 80024b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d023      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c0:	6878      	ldr	r0, [r7, #4]
 80024c2:	4798      	blx	r3
 80024c4:	e01e      	b.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d10f      	bne.n	80024f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	681a      	ldr	r2, [r3, #0]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 0210 	bic.w	r2, r2, #16
 80024e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2201      	movs	r2, #1
 80024e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2200      	movs	r2, #0
 80024f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d003      	beq.n	8002504 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002508:	2b00      	cmp	r3, #0
 800250a:	d032      	beq.n	8002572 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d022      	beq.n	800255e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2205      	movs	r2, #5
 800251c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f022 0201 	bic.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	3301      	adds	r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	429a      	cmp	r2, r3
 800253a:	d307      	bcc.n	800254c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f2      	bne.n	8002530 <HAL_DMA_IRQHandler+0x2cc>
 800254a:	e000      	b.n	800254e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800254c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2201      	movs	r2, #1
 8002552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
 800256e:	e000      	b.n	8002572 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002570:	bf00      	nop
    }
  }
}
 8002572:	3718      	adds	r7, #24
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
 8002584:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002594:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	683a      	ldr	r2, [r7, #0]
 800259c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	2b40      	cmp	r3, #64	; 0x40
 80025a4:	d108      	bne.n	80025b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68ba      	ldr	r2, [r7, #8]
 80025b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80025b6:	e007      	b.n	80025c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	68ba      	ldr	r2, [r7, #8]
 80025be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	60da      	str	r2, [r3, #12]
}
 80025c8:	bf00      	nop
 80025ca:	3714      	adds	r7, #20
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	3b10      	subs	r3, #16
 80025e4:	4a14      	ldr	r2, [pc, #80]	; (8002638 <DMA_CalcBaseAndBitshift+0x64>)
 80025e6:	fba2 2303 	umull	r2, r3, r2, r3
 80025ea:	091b      	lsrs	r3, r3, #4
 80025ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80025ee:	4a13      	ldr	r2, [pc, #76]	; (800263c <DMA_CalcBaseAndBitshift+0x68>)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	4413      	add	r3, r2
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	461a      	mov	r2, r3
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b03      	cmp	r3, #3
 8002600:	d909      	bls.n	8002616 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800260a:	f023 0303 	bic.w	r3, r3, #3
 800260e:	1d1a      	adds	r2, r3, #4
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	659a      	str	r2, [r3, #88]	; 0x58
 8002614:	e007      	b.n	8002626 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800261e:	f023 0303 	bic.w	r3, r3, #3
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800262a:	4618      	mov	r0, r3
 800262c:	3714      	adds	r7, #20
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	aaaaaaab 	.word	0xaaaaaaab
 800263c:	08006968 	.word	0x08006968

08002640 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002640:	b480      	push	{r7}
 8002642:	b085      	sub	sp, #20
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002648:	2300      	movs	r3, #0
 800264a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d11f      	bne.n	800269a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d856      	bhi.n	800270e <DMA_CheckFifoParam+0xce>
 8002660:	a201      	add	r2, pc, #4	; (adr r2, 8002668 <DMA_CheckFifoParam+0x28>)
 8002662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002666:	bf00      	nop
 8002668:	08002679 	.word	0x08002679
 800266c:	0800268b 	.word	0x0800268b
 8002670:	08002679 	.word	0x08002679
 8002674:	0800270f 	.word	0x0800270f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d046      	beq.n	8002712 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002684:	2301      	movs	r3, #1
 8002686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002688:	e043      	b.n	8002712 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800268e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002692:	d140      	bne.n	8002716 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002698:	e03d      	b.n	8002716 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	699b      	ldr	r3, [r3, #24]
 800269e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026a2:	d121      	bne.n	80026e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	2b03      	cmp	r3, #3
 80026a8:	d837      	bhi.n	800271a <DMA_CheckFifoParam+0xda>
 80026aa:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <DMA_CheckFifoParam+0x70>)
 80026ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026c7 	.word	0x080026c7
 80026b8:	080026c1 	.word	0x080026c1
 80026bc:	080026d9 	.word	0x080026d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
      break;
 80026c4:	e030      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d025      	beq.n	800271e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80026d2:	2301      	movs	r3, #1
 80026d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026d6:	e022      	b.n	800271e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80026e0:	d11f      	bne.n	8002722 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80026e6:	e01c      	b.n	8002722 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d903      	bls.n	80026f6 <DMA_CheckFifoParam+0xb6>
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	2b03      	cmp	r3, #3
 80026f2:	d003      	beq.n	80026fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80026f4:	e018      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	73fb      	strb	r3, [r7, #15]
      break;
 80026fa:	e015      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002700:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
      break;
 800270c:	e00b      	b.n	8002726 <DMA_CheckFifoParam+0xe6>
      break;
 800270e:	bf00      	nop
 8002710:	e00a      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002712:	bf00      	nop
 8002714:	e008      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002716:	bf00      	nop
 8002718:	e006      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 800271a:	bf00      	nop
 800271c:	e004      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 800271e:	bf00      	nop
 8002720:	e002      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;   
 8002722:	bf00      	nop
 8002724:	e000      	b.n	8002728 <DMA_CheckFifoParam+0xe8>
      break;
 8002726:	bf00      	nop
    }
  } 
  
  return status; 
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3714      	adds	r7, #20
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop

08002738 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800274a:	2300      	movs	r3, #0
 800274c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274e:	2300      	movs	r3, #0
 8002750:	61fb      	str	r3, [r7, #28]
 8002752:	e16b      	b.n	8002a2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002754:	2201      	movs	r2, #1
 8002756:	69fb      	ldr	r3, [r7, #28]
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	4013      	ands	r3, r2
 8002766:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002768:	693a      	ldr	r2, [r7, #16]
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	429a      	cmp	r2, r3
 800276e:	f040 815a 	bne.w	8002a26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f003 0303 	and.w	r3, r3, #3
 800277a:	2b01      	cmp	r3, #1
 800277c:	d005      	beq.n	800278a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002786:	2b02      	cmp	r3, #2
 8002788:	d130      	bne.n	80027ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	2203      	movs	r2, #3
 8002796:	fa02 f303 	lsl.w	r3, r2, r3
 800279a:	43db      	mvns	r3, r3
 800279c:	69ba      	ldr	r2, [r7, #24]
 800279e:	4013      	ands	r3, r2
 80027a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	68da      	ldr	r2, [r3, #12]
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	fa02 f303 	lsl.w	r3, r2, r3
 80027ae:	69ba      	ldr	r2, [r7, #24]
 80027b0:	4313      	orrs	r3, r2
 80027b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027c0:	2201      	movs	r2, #1
 80027c2:	69fb      	ldr	r3, [r7, #28]
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	43db      	mvns	r3, r3
 80027ca:	69ba      	ldr	r2, [r7, #24]
 80027cc:	4013      	ands	r3, r2
 80027ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	091b      	lsrs	r3, r3, #4
 80027d6:	f003 0201 	and.w	r2, r3, #1
 80027da:	69fb      	ldr	r3, [r7, #28]
 80027dc:	fa02 f303 	lsl.w	r3, r2, r3
 80027e0:	69ba      	ldr	r2, [r7, #24]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	685b      	ldr	r3, [r3, #4]
 80027f0:	f003 0303 	and.w	r3, r3, #3
 80027f4:	2b03      	cmp	r3, #3
 80027f6:	d017      	beq.n	8002828 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fe:	69fb      	ldr	r3, [r7, #28]
 8002800:	005b      	lsls	r3, r3, #1
 8002802:	2203      	movs	r2, #3
 8002804:	fa02 f303 	lsl.w	r3, r2, r3
 8002808:	43db      	mvns	r3, r3
 800280a:	69ba      	ldr	r2, [r7, #24]
 800280c:	4013      	ands	r3, r2
 800280e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	69fb      	ldr	r3, [r7, #28]
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	fa02 f303 	lsl.w	r3, r2, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4313      	orrs	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 0303 	and.w	r3, r3, #3
 8002830:	2b02      	cmp	r3, #2
 8002832:	d123      	bne.n	800287c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002834:	69fb      	ldr	r3, [r7, #28]
 8002836:	08da      	lsrs	r2, r3, #3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	3208      	adds	r2, #8
 800283c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002840:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f003 0307 	and.w	r3, r3, #7
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	220f      	movs	r2, #15
 800284c:	fa02 f303 	lsl.w	r3, r2, r3
 8002850:	43db      	mvns	r3, r3
 8002852:	69ba      	ldr	r2, [r7, #24]
 8002854:	4013      	ands	r3, r2
 8002856:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	691a      	ldr	r2, [r3, #16]
 800285c:	69fb      	ldr	r3, [r7, #28]
 800285e:	f003 0307 	and.w	r3, r3, #7
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	fa02 f303 	lsl.w	r3, r2, r3
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	4313      	orrs	r3, r2
 800286c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	08da      	lsrs	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	3208      	adds	r2, #8
 8002876:	69b9      	ldr	r1, [r7, #24]
 8002878:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	2203      	movs	r2, #3
 8002888:	fa02 f303 	lsl.w	r3, r2, r3
 800288c:	43db      	mvns	r3, r3
 800288e:	69ba      	ldr	r2, [r7, #24]
 8002890:	4013      	ands	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f003 0203 	and.w	r2, r3, #3
 800289c:	69fb      	ldr	r3, [r7, #28]
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	fa02 f303 	lsl.w	r3, r2, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80b4 	beq.w	8002a26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	60fb      	str	r3, [r7, #12]
 80028c2:	4b60      	ldr	r3, [pc, #384]	; (8002a44 <HAL_GPIO_Init+0x30c>)
 80028c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c6:	4a5f      	ldr	r2, [pc, #380]	; (8002a44 <HAL_GPIO_Init+0x30c>)
 80028c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028cc:	6453      	str	r3, [r2, #68]	; 0x44
 80028ce:	4b5d      	ldr	r3, [pc, #372]	; (8002a44 <HAL_GPIO_Init+0x30c>)
 80028d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028d6:	60fb      	str	r3, [r7, #12]
 80028d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028da:	4a5b      	ldr	r2, [pc, #364]	; (8002a48 <HAL_GPIO_Init+0x310>)
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	089b      	lsrs	r3, r3, #2
 80028e0:	3302      	adds	r3, #2
 80028e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e8:	69fb      	ldr	r3, [r7, #28]
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	220f      	movs	r2, #15
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	4013      	ands	r3, r2
 80028fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a52      	ldr	r2, [pc, #328]	; (8002a4c <HAL_GPIO_Init+0x314>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d02b      	beq.n	800295e <HAL_GPIO_Init+0x226>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a51      	ldr	r2, [pc, #324]	; (8002a50 <HAL_GPIO_Init+0x318>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d025      	beq.n	800295a <HAL_GPIO_Init+0x222>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_GPIO_Init+0x31c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d01f      	beq.n	8002956 <HAL_GPIO_Init+0x21e>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_GPIO_Init+0x320>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d019      	beq.n	8002952 <HAL_GPIO_Init+0x21a>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	4a4e      	ldr	r2, [pc, #312]	; (8002a5c <HAL_GPIO_Init+0x324>)
 8002922:	4293      	cmp	r3, r2
 8002924:	d013      	beq.n	800294e <HAL_GPIO_Init+0x216>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a4d      	ldr	r2, [pc, #308]	; (8002a60 <HAL_GPIO_Init+0x328>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d00d      	beq.n	800294a <HAL_GPIO_Init+0x212>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a4c      	ldr	r2, [pc, #304]	; (8002a64 <HAL_GPIO_Init+0x32c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d007      	beq.n	8002946 <HAL_GPIO_Init+0x20e>
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a4b      	ldr	r2, [pc, #300]	; (8002a68 <HAL_GPIO_Init+0x330>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d101      	bne.n	8002942 <HAL_GPIO_Init+0x20a>
 800293e:	2307      	movs	r3, #7
 8002940:	e00e      	b.n	8002960 <HAL_GPIO_Init+0x228>
 8002942:	2308      	movs	r3, #8
 8002944:	e00c      	b.n	8002960 <HAL_GPIO_Init+0x228>
 8002946:	2306      	movs	r3, #6
 8002948:	e00a      	b.n	8002960 <HAL_GPIO_Init+0x228>
 800294a:	2305      	movs	r3, #5
 800294c:	e008      	b.n	8002960 <HAL_GPIO_Init+0x228>
 800294e:	2304      	movs	r3, #4
 8002950:	e006      	b.n	8002960 <HAL_GPIO_Init+0x228>
 8002952:	2303      	movs	r3, #3
 8002954:	e004      	b.n	8002960 <HAL_GPIO_Init+0x228>
 8002956:	2302      	movs	r3, #2
 8002958:	e002      	b.n	8002960 <HAL_GPIO_Init+0x228>
 800295a:	2301      	movs	r3, #1
 800295c:	e000      	b.n	8002960 <HAL_GPIO_Init+0x228>
 800295e:	2300      	movs	r3, #0
 8002960:	69fa      	ldr	r2, [r7, #28]
 8002962:	f002 0203 	and.w	r2, r2, #3
 8002966:	0092      	lsls	r2, r2, #2
 8002968:	4093      	lsls	r3, r2
 800296a:	69ba      	ldr	r2, [r7, #24]
 800296c:	4313      	orrs	r3, r2
 800296e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002970:	4935      	ldr	r1, [pc, #212]	; (8002a48 <HAL_GPIO_Init+0x310>)
 8002972:	69fb      	ldr	r3, [r7, #28]
 8002974:	089b      	lsrs	r3, r3, #2
 8002976:	3302      	adds	r3, #2
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297e:	4b3b      	ldr	r3, [pc, #236]	; (8002a6c <HAL_GPIO_Init+0x334>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	43db      	mvns	r3, r3
 8002988:	69ba      	ldr	r2, [r7, #24]
 800298a:	4013      	ands	r3, r2
 800298c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002996:	2b00      	cmp	r3, #0
 8002998:	d003      	beq.n	80029a2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	4313      	orrs	r3, r2
 80029a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80029a2:	4a32      	ldr	r2, [pc, #200]	; (8002a6c <HAL_GPIO_Init+0x334>)
 80029a4:	69bb      	ldr	r3, [r7, #24]
 80029a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <HAL_GPIO_Init+0x334>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	43db      	mvns	r3, r3
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	4013      	ands	r3, r2
 80029b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d003      	beq.n	80029cc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029c4:	69ba      	ldr	r2, [r7, #24]
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	4313      	orrs	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029cc:	4a27      	ldr	r2, [pc, #156]	; (8002a6c <HAL_GPIO_Init+0x334>)
 80029ce:	69bb      	ldr	r3, [r7, #24]
 80029d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029d2:	4b26      	ldr	r3, [pc, #152]	; (8002a6c <HAL_GPIO_Init+0x334>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	43db      	mvns	r3, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4013      	ands	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d003      	beq.n	80029f6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ee:	69ba      	ldr	r2, [r7, #24]
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f6:	4a1d      	ldr	r2, [pc, #116]	; (8002a6c <HAL_GPIO_Init+0x334>)
 80029f8:	69bb      	ldr	r3, [r7, #24]
 80029fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029fc:	4b1b      	ldr	r3, [pc, #108]	; (8002a6c <HAL_GPIO_Init+0x334>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	43db      	mvns	r3, r3
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	4013      	ands	r3, r2
 8002a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d003      	beq.n	8002a20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a18:	69ba      	ldr	r2, [r7, #24]
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a20:	4a12      	ldr	r2, [pc, #72]	; (8002a6c <HAL_GPIO_Init+0x334>)
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	3301      	adds	r3, #1
 8002a2a:	61fb      	str	r3, [r7, #28]
 8002a2c:	69fb      	ldr	r3, [r7, #28]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	f67f ae90 	bls.w	8002754 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a34:	bf00      	nop
 8002a36:	bf00      	nop
 8002a38:	3724      	adds	r7, #36	; 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	40023800 	.word	0x40023800
 8002a48:	40013800 	.word	0x40013800
 8002a4c:	40020000 	.word	0x40020000
 8002a50:	40020400 	.word	0x40020400
 8002a54:	40020800 	.word	0x40020800
 8002a58:	40020c00 	.word	0x40020c00
 8002a5c:	40021000 	.word	0x40021000
 8002a60:	40021400 	.word	0x40021400
 8002a64:	40021800 	.word	0x40021800
 8002a68:	40021c00 	.word	0x40021c00
 8002a6c:	40013c00 	.word	0x40013c00

08002a70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	807b      	strh	r3, [r7, #2]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a80:	787b      	ldrb	r3, [r7, #1]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a86:	887a      	ldrh	r2, [r7, #2]
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a8c:	e003      	b.n	8002a96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8e:	887b      	ldrh	r3, [r7, #2]
 8002a90:	041a      	lsls	r2, r3, #16
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	619a      	str	r2, [r3, #24]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr

08002aa2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b085      	sub	sp, #20
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
 8002aaa:	460b      	mov	r3, r1
 8002aac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	695b      	ldr	r3, [r3, #20]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ab4:	887a      	ldrh	r2, [r7, #2]
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	041a      	lsls	r2, r3, #16
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43d9      	mvns	r1, r3
 8002ac0:	887b      	ldrh	r3, [r7, #2]
 8002ac2:	400b      	ands	r3, r1
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	619a      	str	r2, [r3, #24]
}
 8002aca:	bf00      	nop
 8002acc:	3714      	adds	r7, #20
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
	...

08002ad8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b084      	sub	sp, #16
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d101      	bne.n	8002aea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e12b      	b.n	8002d42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d106      	bne.n	8002b04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2200      	movs	r2, #0
 8002afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7fe ff36 	bl	8001970 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2224      	movs	r2, #36	; 0x24
 8002b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	681a      	ldr	r2, [r3, #0]
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f022 0201 	bic.w	r2, r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002b2a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	681a      	ldr	r2, [r3, #0]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002b3a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002b3c:	f002 fa96 	bl	800506c <HAL_RCC_GetPCLK1Freq>
 8002b40:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	4a81      	ldr	r2, [pc, #516]	; (8002d4c <HAL_I2C_Init+0x274>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d807      	bhi.n	8002b5c <HAL_I2C_Init+0x84>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	4a80      	ldr	r2, [pc, #512]	; (8002d50 <HAL_I2C_Init+0x278>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	bf94      	ite	ls
 8002b54:	2301      	movls	r3, #1
 8002b56:	2300      	movhi	r3, #0
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	e006      	b.n	8002b6a <HAL_I2C_Init+0x92>
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	4a7d      	ldr	r2, [pc, #500]	; (8002d54 <HAL_I2C_Init+0x27c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	bf94      	ite	ls
 8002b64:	2301      	movls	r3, #1
 8002b66:	2300      	movhi	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d001      	beq.n	8002b72 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e0e7      	b.n	8002d42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4a78      	ldr	r2, [pc, #480]	; (8002d58 <HAL_I2C_Init+0x280>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0c9b      	lsrs	r3, r3, #18
 8002b7c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	6a1b      	ldr	r3, [r3, #32]
 8002b98:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	4a6a      	ldr	r2, [pc, #424]	; (8002d4c <HAL_I2C_Init+0x274>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d802      	bhi.n	8002bac <HAL_I2C_Init+0xd4>
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	e009      	b.n	8002bc0 <HAL_I2C_Init+0xe8>
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002bb2:	fb02 f303 	mul.w	r3, r2, r3
 8002bb6:	4a69      	ldr	r2, [pc, #420]	; (8002d5c <HAL_I2C_Init+0x284>)
 8002bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8002bbc:	099b      	lsrs	r3, r3, #6
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	687a      	ldr	r2, [r7, #4]
 8002bc2:	6812      	ldr	r2, [r2, #0]
 8002bc4:	430b      	orrs	r3, r1
 8002bc6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	69db      	ldr	r3, [r3, #28]
 8002bce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002bd2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	495c      	ldr	r1, [pc, #368]	; (8002d4c <HAL_I2C_Init+0x274>)
 8002bdc:	428b      	cmp	r3, r1
 8002bde:	d819      	bhi.n	8002c14 <HAL_I2C_Init+0x13c>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1e59      	subs	r1, r3, #1
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	005b      	lsls	r3, r3, #1
 8002bea:	fbb1 f3f3 	udiv	r3, r1, r3
 8002bee:	1c59      	adds	r1, r3, #1
 8002bf0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002bf4:	400b      	ands	r3, r1
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_I2C_Init+0x138>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1e59      	subs	r1, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	005b      	lsls	r3, r3, #1
 8002c04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002c08:	3301      	adds	r3, #1
 8002c0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c0e:	e051      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c10:	2304      	movs	r3, #4
 8002c12:	e04f      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d111      	bne.n	8002c40 <HAL_I2C_Init+0x168>
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1e58      	subs	r0, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6859      	ldr	r1, [r3, #4]
 8002c24:	460b      	mov	r3, r1
 8002c26:	005b      	lsls	r3, r3, #1
 8002c28:	440b      	add	r3, r1
 8002c2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	bf0c      	ite	eq
 8002c38:	2301      	moveq	r3, #1
 8002c3a:	2300      	movne	r3, #0
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	e012      	b.n	8002c66 <HAL_I2C_Init+0x18e>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	1e58      	subs	r0, r3, #1
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6859      	ldr	r1, [r3, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	0099      	lsls	r1, r3, #2
 8002c50:	440b      	add	r3, r1
 8002c52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c56:	3301      	adds	r3, #1
 8002c58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	bf0c      	ite	eq
 8002c60:	2301      	moveq	r3, #1
 8002c62:	2300      	movne	r3, #0
 8002c64:	b2db      	uxtb	r3, r3
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d001      	beq.n	8002c6e <HAL_I2C_Init+0x196>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e022      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d10e      	bne.n	8002c94 <HAL_I2C_Init+0x1bc>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	1e58      	subs	r0, r3, #1
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6859      	ldr	r1, [r3, #4]
 8002c7e:	460b      	mov	r3, r1
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	440b      	add	r3, r1
 8002c84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c88:	3301      	adds	r3, #1
 8002c8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c92:	e00f      	b.n	8002cb4 <HAL_I2C_Init+0x1dc>
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1e58      	subs	r0, r3, #1
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6859      	ldr	r1, [r3, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	440b      	add	r3, r1
 8002ca2:	0099      	lsls	r1, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cb0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	6809      	ldr	r1, [r1, #0]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	69da      	ldr	r2, [r3, #28]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	431a      	orrs	r2, r3
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	430a      	orrs	r2, r1
 8002cd6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ce2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	6911      	ldr	r1, [r2, #16]
 8002cea:	687a      	ldr	r2, [r7, #4]
 8002cec:	68d2      	ldr	r2, [r2, #12]
 8002cee:	4311      	orrs	r1, r2
 8002cf0:	687a      	ldr	r2, [r7, #4]
 8002cf2:	6812      	ldr	r2, [r2, #0]
 8002cf4:	430b      	orrs	r3, r1
 8002cf6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695a      	ldr	r2, [r3, #20]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	681a      	ldr	r2, [r3, #0]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f042 0201 	orr.w	r2, r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2200      	movs	r2, #0
 8002d28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3710      	adds	r7, #16
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}
 8002d4a:	bf00      	nop
 8002d4c:	000186a0 	.word	0x000186a0
 8002d50:	001e847f 	.word	0x001e847f
 8002d54:	003d08ff 	.word	0x003d08ff
 8002d58:	431bde83 	.word	0x431bde83
 8002d5c:	10624dd3 	.word	0x10624dd3

08002d60 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af02      	add	r7, sp, #8
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	4608      	mov	r0, r1
 8002d6a:	4611      	mov	r1, r2
 8002d6c:	461a      	mov	r2, r3
 8002d6e:	4603      	mov	r3, r0
 8002d70:	817b      	strh	r3, [r7, #10]
 8002d72:	460b      	mov	r3, r1
 8002d74:	813b      	strh	r3, [r7, #8]
 8002d76:	4613      	mov	r3, r2
 8002d78:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002d7a:	f7ff f84f 	bl	8001e1c <HAL_GetTick>
 8002d7e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b20      	cmp	r3, #32
 8002d8a:	f040 80d9 	bne.w	8002f40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	9300      	str	r3, [sp, #0]
 8002d92:	2319      	movs	r3, #25
 8002d94:	2201      	movs	r2, #1
 8002d96:	496d      	ldr	r1, [pc, #436]	; (8002f4c <HAL_I2C_Mem_Write+0x1ec>)
 8002d98:	68f8      	ldr	r0, [r7, #12]
 8002d9a:	f000 fc7f 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002da4:	2302      	movs	r3, #2
 8002da6:	e0cc      	b.n	8002f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dae:	2b01      	cmp	r3, #1
 8002db0:	d101      	bne.n	8002db6 <HAL_I2C_Mem_Write+0x56>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e0c5      	b.n	8002f42 <HAL_I2C_Mem_Write+0x1e2>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d007      	beq.n	8002ddc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	681a      	ldr	r2, [r3, #0]
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f042 0201 	orr.w	r2, r2, #1
 8002dda:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	681a      	ldr	r2, [r3, #0]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2221      	movs	r2, #33	; 0x21
 8002df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2240      	movs	r2, #64	; 0x40
 8002df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	6a3a      	ldr	r2, [r7, #32]
 8002e06:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e0c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e12:	b29a      	uxth	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	4a4d      	ldr	r2, [pc, #308]	; (8002f50 <HAL_I2C_Mem_Write+0x1f0>)
 8002e1c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002e1e:	88f8      	ldrh	r0, [r7, #6]
 8002e20:	893a      	ldrh	r2, [r7, #8]
 8002e22:	8979      	ldrh	r1, [r7, #10]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	9301      	str	r3, [sp, #4]
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	9300      	str	r3, [sp, #0]
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	68f8      	ldr	r0, [r7, #12]
 8002e30:	f000 fab6 	bl	80033a0 <I2C_RequestMemoryWrite>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d052      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e081      	b.n	8002f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	f000 fd00 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8002e48:	4603      	mov	r3, r0
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00d      	beq.n	8002e6a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d107      	bne.n	8002e66 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e64:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e06b      	b.n	8002f42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	781a      	ldrb	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	1c5a      	adds	r2, r3, #1
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	3b01      	subs	r3, #1
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	f003 0304 	and.w	r3, r3, #4
 8002ea4:	2b04      	cmp	r3, #4
 8002ea6:	d11b      	bne.n	8002ee0 <HAL_I2C_Mem_Write+0x180>
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d017      	beq.n	8002ee0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb4:	781a      	ldrb	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	1c5a      	adds	r2, r3, #1
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d1aa      	bne.n	8002e3e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ee8:	697a      	ldr	r2, [r7, #20]
 8002eea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f000 fcec 	bl	80038ca <I2C_WaitOnBTFFlagUntilTimeout>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d00d      	beq.n	8002f14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efc:	2b04      	cmp	r3, #4
 8002efe:	d107      	bne.n	8002f10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681a      	ldr	r2, [r3, #0]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e016      	b.n	8002f42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2200      	movs	r2, #0
 8002f38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	e000      	b.n	8002f42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002f40:	2302      	movs	r3, #2
  }
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3718      	adds	r7, #24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd80      	pop	{r7, pc}
 8002f4a:	bf00      	nop
 8002f4c:	00100002 	.word	0x00100002
 8002f50:	ffff0000 	.word	0xffff0000

08002f54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	; 0x30
 8002f58:	af02      	add	r7, sp, #8
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	4611      	mov	r1, r2
 8002f60:	461a      	mov	r2, r3
 8002f62:	4603      	mov	r3, r0
 8002f64:	817b      	strh	r3, [r7, #10]
 8002f66:	460b      	mov	r3, r1
 8002f68:	813b      	strh	r3, [r7, #8]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002f6e:	f7fe ff55 	bl	8001e1c <HAL_GetTick>
 8002f72:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b20      	cmp	r3, #32
 8002f7e:	f040 8208 	bne.w	8003392 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f84:	9300      	str	r3, [sp, #0]
 8002f86:	2319      	movs	r3, #25
 8002f88:	2201      	movs	r2, #1
 8002f8a:	497b      	ldr	r1, [pc, #492]	; (8003178 <HAL_I2C_Mem_Read+0x224>)
 8002f8c:	68f8      	ldr	r0, [r7, #12]
 8002f8e:	f000 fb85 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002f98:	2302      	movs	r3, #2
 8002f9a:	e1fb      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa2:	2b01      	cmp	r3, #1
 8002fa4:	d101      	bne.n	8002faa <HAL_I2C_Mem_Read+0x56>
 8002fa6:	2302      	movs	r3, #2
 8002fa8:	e1f4      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d007      	beq.n	8002fd0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f042 0201 	orr.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fde:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2222      	movs	r2, #34	; 0x22
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2240      	movs	r2, #64	; 0x40
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003000:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003006:	b29a      	uxth	r2, r3
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	4a5b      	ldr	r2, [pc, #364]	; (800317c <HAL_I2C_Mem_Read+0x228>)
 8003010:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003012:	88f8      	ldrh	r0, [r7, #6]
 8003014:	893a      	ldrh	r2, [r7, #8]
 8003016:	8979      	ldrh	r1, [r7, #10]
 8003018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800301a:	9301      	str	r3, [sp, #4]
 800301c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	4603      	mov	r3, r0
 8003022:	68f8      	ldr	r0, [r7, #12]
 8003024:	f000 fa52 	bl	80034cc <I2C_RequestMemoryRead>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	d001      	beq.n	8003032 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e1b0      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003036:	2b00      	cmp	r3, #0
 8003038:	d113      	bne.n	8003062 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800303a:	2300      	movs	r3, #0
 800303c:	623b      	str	r3, [r7, #32]
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	695b      	ldr	r3, [r3, #20]
 8003044:	623b      	str	r3, [r7, #32]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	699b      	ldr	r3, [r3, #24]
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800305e:	601a      	str	r2, [r3, #0]
 8003060:	e184      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003066:	2b01      	cmp	r3, #1
 8003068:	d11b      	bne.n	80030a2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003078:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800307a:	2300      	movs	r3, #0
 800307c:	61fb      	str	r3, [r7, #28]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	695b      	ldr	r3, [r3, #20]
 8003084:	61fb      	str	r3, [r7, #28]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	699b      	ldr	r3, [r3, #24]
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	681a      	ldr	r2, [r3, #0]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800309e:	601a      	str	r2, [r3, #0]
 80030a0:	e164      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	d11b      	bne.n	80030e2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030ca:	2300      	movs	r3, #0
 80030cc:	61bb      	str	r3, [r7, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	695b      	ldr	r3, [r3, #20]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	e144      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	695b      	ldr	r3, [r3, #20]
 80030ec:	617b      	str	r3, [r7, #20]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	617b      	str	r3, [r7, #20]
 80030f6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80030f8:	e138      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030fe:	2b03      	cmp	r3, #3
 8003100:	f200 80f1 	bhi.w	80032e6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003108:	2b01      	cmp	r3, #1
 800310a:	d123      	bne.n	8003154 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800310c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800310e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003110:	68f8      	ldr	r0, [r7, #12]
 8003112:	f000 fc1b 	bl	800394c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e139      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	691a      	ldr	r2, [r3, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312a:	b2d2      	uxtb	r2, r2
 800312c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	1c5a      	adds	r2, r3, #1
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800313c:	3b01      	subs	r3, #1
 800313e:	b29a      	uxth	r2, r3
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003148:	b29b      	uxth	r3, r3
 800314a:	3b01      	subs	r3, #1
 800314c:	b29a      	uxth	r2, r3
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003152:	e10b      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003158:	2b02      	cmp	r3, #2
 800315a:	d14e      	bne.n	80031fa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	9300      	str	r3, [sp, #0]
 8003160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003162:	2200      	movs	r2, #0
 8003164:	4906      	ldr	r1, [pc, #24]	; (8003180 <HAL_I2C_Mem_Read+0x22c>)
 8003166:	68f8      	ldr	r0, [r7, #12]
 8003168:	f000 fa98 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e10e      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
 8003176:	bf00      	nop
 8003178:	00100002 	.word	0x00100002
 800317c:	ffff0000 	.word	0xffff0000
 8003180:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003192:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691a      	ldr	r2, [r3, #16]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a6:	1c5a      	adds	r2, r3, #1
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031bc:	b29b      	uxth	r3, r3
 80031be:	3b01      	subs	r3, #1
 80031c0:	b29a      	uxth	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	691a      	ldr	r2, [r3, #16]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d0:	b2d2      	uxtb	r2, r2
 80031d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d8:	1c5a      	adds	r2, r3, #1
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031e2:	3b01      	subs	r3, #1
 80031e4:	b29a      	uxth	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	3b01      	subs	r3, #1
 80031f2:	b29a      	uxth	r2, r3
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031f8:	e0b8      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80031fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003200:	2200      	movs	r2, #0
 8003202:	4966      	ldr	r1, [pc, #408]	; (800339c <HAL_I2C_Mem_Read+0x448>)
 8003204:	68f8      	ldr	r0, [r7, #12]
 8003206:	f000 fa49 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 800320a:	4603      	mov	r3, r0
 800320c:	2b00      	cmp	r3, #0
 800320e:	d001      	beq.n	8003214 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003210:	2301      	movs	r3, #1
 8003212:	e0bf      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	681a      	ldr	r2, [r3, #0]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003222:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	691a      	ldr	r2, [r3, #16]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322e:	b2d2      	uxtb	r2, r2
 8003230:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003236:	1c5a      	adds	r2, r3, #1
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003240:	3b01      	subs	r3, #1
 8003242:	b29a      	uxth	r2, r3
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324c:	b29b      	uxth	r3, r3
 800324e:	3b01      	subs	r3, #1
 8003250:	b29a      	uxth	r2, r3
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003258:	9300      	str	r3, [sp, #0]
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	2200      	movs	r2, #0
 800325e:	494f      	ldr	r1, [pc, #316]	; (800339c <HAL_I2C_Mem_Read+0x448>)
 8003260:	68f8      	ldr	r0, [r7, #12]
 8003262:	f000 fa1b 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e091      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	681a      	ldr	r2, [r3, #0]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800327e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	691a      	ldr	r2, [r3, #16]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	b2d2      	uxtb	r2, r2
 800328c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329c:	3b01      	subs	r3, #1
 800329e:	b29a      	uxth	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	3b01      	subs	r3, #1
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032bc:	b2d2      	uxtb	r2, r2
 80032be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	1c5a      	adds	r2, r3, #1
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032ce:	3b01      	subs	r3, #1
 80032d0:	b29a      	uxth	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032da:	b29b      	uxth	r3, r3
 80032dc:	3b01      	subs	r3, #1
 80032de:	b29a      	uxth	r2, r3
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80032e4:	e042      	b.n	800336c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f000 fb2e 	bl	800394c <I2C_WaitOnRXNEFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d001      	beq.n	80032fa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e04c      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691a      	ldr	r2, [r3, #16]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003304:	b2d2      	uxtb	r2, r2
 8003306:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800330c:	1c5a      	adds	r2, r3, #1
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003316:	3b01      	subs	r3, #1
 8003318:	b29a      	uxth	r2, r3
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003322:	b29b      	uxth	r3, r3
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	695b      	ldr	r3, [r3, #20]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b04      	cmp	r3, #4
 8003338:	d118      	bne.n	800336c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003370:	2b00      	cmp	r3, #0
 8003372:	f47f aec2 	bne.w	80030fa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	2220      	movs	r2, #32
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	2200      	movs	r2, #0
 8003382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
 8003390:	e000      	b.n	8003394 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003392:	2302      	movs	r3, #2
  }
}
 8003394:	4618      	mov	r0, r3
 8003396:	3728      	adds	r7, #40	; 0x28
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	00010004 	.word	0x00010004

080033a0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b088      	sub	sp, #32
 80033a4:	af02      	add	r7, sp, #8
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	4608      	mov	r0, r1
 80033aa:	4611      	mov	r1, r2
 80033ac:	461a      	mov	r2, r3
 80033ae:	4603      	mov	r3, r0
 80033b0:	817b      	strh	r3, [r7, #10]
 80033b2:	460b      	mov	r3, r1
 80033b4:	813b      	strh	r3, [r7, #8]
 80033b6:	4613      	mov	r3, r2
 80033b8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80033c8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f000 f960 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033f0:	d103      	bne.n	80033fa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033f8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80033fa:	2303      	movs	r3, #3
 80033fc:	e05f      	b.n	80034be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80033fe:	897b      	ldrh	r3, [r7, #10]
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800340c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800340e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003410:	6a3a      	ldr	r2, [r7, #32]
 8003412:	492d      	ldr	r1, [pc, #180]	; (80034c8 <I2C_RequestMemoryWrite+0x128>)
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 f998 	bl	800374a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e04c      	b.n	80034be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003424:	2300      	movs	r3, #0
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	617b      	str	r3, [r7, #20]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	699b      	ldr	r3, [r3, #24]
 8003436:	617b      	str	r3, [r7, #20]
 8003438:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800343a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800343c:	6a39      	ldr	r1, [r7, #32]
 800343e:	68f8      	ldr	r0, [r7, #12]
 8003440:	f000 fa02 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00d      	beq.n	8003466 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800344e:	2b04      	cmp	r3, #4
 8003450:	d107      	bne.n	8003462 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003460:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e02b      	b.n	80034be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003466:	88fb      	ldrh	r3, [r7, #6]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d105      	bne.n	8003478 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800346c:	893b      	ldrh	r3, [r7, #8]
 800346e:	b2da      	uxtb	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	611a      	str	r2, [r3, #16]
 8003476:	e021      	b.n	80034bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003478:	893b      	ldrh	r3, [r7, #8]
 800347a:	0a1b      	lsrs	r3, r3, #8
 800347c:	b29b      	uxth	r3, r3
 800347e:	b2da      	uxtb	r2, r3
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003486:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003488:	6a39      	ldr	r1, [r7, #32]
 800348a:	68f8      	ldr	r0, [r7, #12]
 800348c:	f000 f9dc 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d00d      	beq.n	80034b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349a:	2b04      	cmp	r3, #4
 800349c:	d107      	bne.n	80034ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e005      	b.n	80034be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80034b2:	893b      	ldrh	r3, [r7, #8]
 80034b4:	b2da      	uxtb	r2, r3
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	00010002 	.word	0x00010002

080034cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af02      	add	r7, sp, #8
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	4608      	mov	r0, r1
 80034d6:	4611      	mov	r1, r2
 80034d8:	461a      	mov	r2, r3
 80034da:	4603      	mov	r3, r0
 80034dc:	817b      	strh	r3, [r7, #10]
 80034de:	460b      	mov	r3, r1
 80034e0:	813b      	strh	r3, [r7, #8]
 80034e2:	4613      	mov	r3, r2
 80034e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80034f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003504:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003508:	9300      	str	r3, [sp, #0]
 800350a:	6a3b      	ldr	r3, [r7, #32]
 800350c:	2200      	movs	r2, #0
 800350e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	f000 f8c2 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8003518:	4603      	mov	r3, r0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00d      	beq.n	800353a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800352c:	d103      	bne.n	8003536 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003534:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e0aa      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800353a:	897b      	ldrh	r3, [r7, #10]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	461a      	mov	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003548:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800354a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800354c:	6a3a      	ldr	r2, [r7, #32]
 800354e:	4952      	ldr	r1, [pc, #328]	; (8003698 <I2C_RequestMemoryRead+0x1cc>)
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f000 f8fa 	bl	800374a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e097      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003560:	2300      	movs	r3, #0
 8003562:	617b      	str	r3, [r7, #20]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	617b      	str	r3, [r7, #20]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	699b      	ldr	r3, [r3, #24]
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003578:	6a39      	ldr	r1, [r7, #32]
 800357a:	68f8      	ldr	r0, [r7, #12]
 800357c:	f000 f964 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00d      	beq.n	80035a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2b04      	cmp	r3, #4
 800358c:	d107      	bne.n	800359e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800359c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e076      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80035a2:	88fb      	ldrh	r3, [r7, #6]
 80035a4:	2b01      	cmp	r3, #1
 80035a6:	d105      	bne.n	80035b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035a8:	893b      	ldrh	r3, [r7, #8]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	611a      	str	r2, [r3, #16]
 80035b2:	e021      	b.n	80035f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80035b4:	893b      	ldrh	r3, [r7, #8]
 80035b6:	0a1b      	lsrs	r3, r3, #8
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	b2da      	uxtb	r2, r3
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035c4:	6a39      	ldr	r1, [r7, #32]
 80035c6:	68f8      	ldr	r0, [r7, #12]
 80035c8:	f000 f93e 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 80035cc:	4603      	mov	r3, r0
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00d      	beq.n	80035ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	2b04      	cmp	r3, #4
 80035d8:	d107      	bne.n	80035ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e050      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80035ee:	893b      	ldrh	r3, [r7, #8]
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80035f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035fa:	6a39      	ldr	r1, [r7, #32]
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f923 	bl	8003848 <I2C_WaitOnTXEFlagUntilTimeout>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00d      	beq.n	8003624 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	2b04      	cmp	r3, #4
 800360e:	d107      	bne.n	8003620 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	681a      	ldr	r2, [r3, #0]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e035      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003632:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	6a3b      	ldr	r3, [r7, #32]
 800363a:	2200      	movs	r2, #0
 800363c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003640:	68f8      	ldr	r0, [r7, #12]
 8003642:	f000 f82b 	bl	800369c <I2C_WaitOnFlagUntilTimeout>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00d      	beq.n	8003668 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003656:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365a:	d103      	bne.n	8003664 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003662:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003664:	2303      	movs	r3, #3
 8003666:	e013      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003668:	897b      	ldrh	r3, [r7, #10]
 800366a:	b2db      	uxtb	r3, r3
 800366c:	f043 0301 	orr.w	r3, r3, #1
 8003670:	b2da      	uxtb	r2, r3
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	6a3a      	ldr	r2, [r7, #32]
 800367c:	4906      	ldr	r1, [pc, #24]	; (8003698 <I2C_RequestMemoryRead+0x1cc>)
 800367e:	68f8      	ldr	r0, [r7, #12]
 8003680:	f000 f863 	bl	800374a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003684:	4603      	mov	r3, r0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d001      	beq.n	800368e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e000      	b.n	8003690 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800368e:	2300      	movs	r3, #0
}
 8003690:	4618      	mov	r0, r3
 8003692:	3718      	adds	r7, #24
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	00010002 	.word	0x00010002

0800369c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	60f8      	str	r0, [r7, #12]
 80036a4:	60b9      	str	r1, [r7, #8]
 80036a6:	603b      	str	r3, [r7, #0]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036ac:	e025      	b.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036b4:	d021      	beq.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b6:	f7fe fbb1 	bl	8001e1c <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	69bb      	ldr	r3, [r7, #24]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d302      	bcc.n	80036cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d116      	bne.n	80036fa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2200      	movs	r2, #0
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2220      	movs	r2, #32
 80036d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e6:	f043 0220 	orr.w	r2, r3, #32
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e023      	b.n	8003742 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	0c1b      	lsrs	r3, r3, #16
 80036fe:	b2db      	uxtb	r3, r3
 8003700:	2b01      	cmp	r3, #1
 8003702:	d10d      	bne.n	8003720 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	43da      	mvns	r2, r3
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4013      	ands	r3, r2
 8003710:	b29b      	uxth	r3, r3
 8003712:	2b00      	cmp	r3, #0
 8003714:	bf0c      	ite	eq
 8003716:	2301      	moveq	r3, #1
 8003718:	2300      	movne	r3, #0
 800371a:	b2db      	uxtb	r3, r3
 800371c:	461a      	mov	r2, r3
 800371e:	e00c      	b.n	800373a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	699b      	ldr	r3, [r3, #24]
 8003726:	43da      	mvns	r2, r3
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	4013      	ands	r3, r2
 800372c:	b29b      	uxth	r3, r3
 800372e:	2b00      	cmp	r3, #0
 8003730:	bf0c      	ite	eq
 8003732:	2301      	moveq	r3, #1
 8003734:	2300      	movne	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	461a      	mov	r2, r3
 800373a:	79fb      	ldrb	r3, [r7, #7]
 800373c:	429a      	cmp	r2, r3
 800373e:	d0b6      	beq.n	80036ae <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003740:	2300      	movs	r3, #0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3710      	adds	r7, #16
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}

0800374a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b084      	sub	sp, #16
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
 8003756:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003758:	e051      	b.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	695b      	ldr	r3, [r3, #20]
 8003760:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003768:	d123      	bne.n	80037b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003778:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003782:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2220      	movs	r2, #32
 800378e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0204 	orr.w	r2, r3, #4
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e046      	b.n	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b8:	d021      	beq.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037ba:	f7fe fb2f 	bl	8001e1c <HAL_GetTick>
 80037be:	4602      	mov	r2, r0
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	1ad3      	subs	r3, r2, r3
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d302      	bcc.n	80037d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d116      	bne.n	80037fe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2200      	movs	r2, #0
 80037d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2220      	movs	r2, #32
 80037da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2200      	movs	r2, #0
 80037e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ea:	f043 0220 	orr.w	r2, r3, #32
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e020      	b.n	8003840 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80037fe:	68bb      	ldr	r3, [r7, #8]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	b2db      	uxtb	r3, r3
 8003804:	2b01      	cmp	r3, #1
 8003806:	d10c      	bne.n	8003822 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	43da      	mvns	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4013      	ands	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	2b00      	cmp	r3, #0
 8003818:	bf14      	ite	ne
 800381a:	2301      	movne	r3, #1
 800381c:	2300      	moveq	r3, #0
 800381e:	b2db      	uxtb	r3, r3
 8003820:	e00b      	b.n	800383a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	699b      	ldr	r3, [r3, #24]
 8003828:	43da      	mvns	r2, r3
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	4013      	ands	r3, r2
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	bf14      	ite	ne
 8003834:	2301      	movne	r3, #1
 8003836:	2300      	moveq	r3, #0
 8003838:	b2db      	uxtb	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d18d      	bne.n	800375a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	60f8      	str	r0, [r7, #12]
 8003850:	60b9      	str	r1, [r7, #8]
 8003852:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003854:	e02d      	b.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003856:	68f8      	ldr	r0, [r7, #12]
 8003858:	f000 f8ce 	bl	80039f8 <I2C_IsAcknowledgeFailed>
 800385c:	4603      	mov	r3, r0
 800385e:	2b00      	cmp	r3, #0
 8003860:	d001      	beq.n	8003866 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e02d      	b.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	f1b3 3fff 	cmp.w	r3, #4294967295
 800386c:	d021      	beq.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386e:	f7fe fad5 	bl	8001e1c <HAL_GetTick>
 8003872:	4602      	mov	r2, r0
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d302      	bcc.n	8003884 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d116      	bne.n	80038b2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389e:	f043 0220 	orr.w	r2, r3, #32
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2200      	movs	r2, #0
 80038aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e007      	b.n	80038c2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	695b      	ldr	r3, [r3, #20]
 80038b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038bc:	2b80      	cmp	r3, #128	; 0x80
 80038be:	d1ca      	bne.n	8003856 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3710      	adds	r7, #16
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}

080038ca <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038ca:	b580      	push	{r7, lr}
 80038cc:	b084      	sub	sp, #16
 80038ce:	af00      	add	r7, sp, #0
 80038d0:	60f8      	str	r0, [r7, #12]
 80038d2:	60b9      	str	r1, [r7, #8]
 80038d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80038d6:	e02d      	b.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f88d 	bl	80039f8 <I2C_IsAcknowledgeFailed>
 80038de:	4603      	mov	r3, r0
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e02d      	b.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ee:	d021      	beq.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80038f0:	f7fe fa94 	bl	8001e1c <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	68ba      	ldr	r2, [r7, #8]
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d302      	bcc.n	8003906 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d116      	bne.n	8003934 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2220      	movs	r2, #32
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2200      	movs	r2, #0
 8003918:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f043 0220 	orr.w	r2, r3, #32
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e007      	b.n	8003944 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	695b      	ldr	r3, [r3, #20]
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d1ca      	bne.n	80038d8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003942:	2300      	movs	r3, #0
}
 8003944:	4618      	mov	r0, r3
 8003946:	3710      	adds	r7, #16
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b084      	sub	sp, #16
 8003950:	af00      	add	r7, sp, #0
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	60b9      	str	r1, [r7, #8]
 8003956:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003958:	e042      	b.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f003 0310 	and.w	r3, r3, #16
 8003964:	2b10      	cmp	r3, #16
 8003966:	d119      	bne.n	800399c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f06f 0210 	mvn.w	r2, #16
 8003970:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2200      	movs	r2, #0
 8003976:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2220      	movs	r2, #32
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e029      	b.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800399c:	f7fe fa3e 	bl	8001e1c <HAL_GetTick>
 80039a0:	4602      	mov	r2, r0
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	1ad3      	subs	r3, r2, r3
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	d302      	bcc.n	80039b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d116      	bne.n	80039e0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2220      	movs	r2, #32
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2200      	movs	r2, #0
 80039c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039cc:	f043 0220 	orr.w	r2, r3, #32
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2200      	movs	r2, #0
 80039d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e007      	b.n	80039f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	695b      	ldr	r3, [r3, #20]
 80039e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ea:	2b40      	cmp	r3, #64	; 0x40
 80039ec:	d1b5      	bne.n	800395a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80039ee:	2300      	movs	r3, #0
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3710      	adds	r7, #16
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}

080039f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b083      	sub	sp, #12
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	695b      	ldr	r3, [r3, #20]
 8003a06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a0e:	d11b      	bne.n	8003a48 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a18:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a34:	f043 0204 	orr.w	r2, r3, #4
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003a44:	2301      	movs	r3, #1
 8003a46:	e000      	b.n	8003a4a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b088      	sub	sp, #32
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d101      	bne.n	8003a6a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003a66:	2301      	movs	r3, #1
 8003a68:	e128      	b.n	8003cbc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d109      	bne.n	8003a8a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a90      	ldr	r2, [pc, #576]	; (8003cc4 <HAL_I2S_Init+0x26c>)
 8003a82:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f7fd ffbb 	bl	8001a00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2202      	movs	r2, #2
 8003a8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69db      	ldr	r3, [r3, #28]
 8003a98:	687a      	ldr	r2, [r7, #4]
 8003a9a:	6812      	ldr	r2, [r2, #0]
 8003a9c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003aa0:	f023 030f 	bic.w	r3, r3, #15
 8003aa4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	2202      	movs	r2, #2
 8003aac:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d060      	beq.n	8003b78 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	68db      	ldr	r3, [r3, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d102      	bne.n	8003ac4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003abe:	2310      	movs	r3, #16
 8003ac0:	617b      	str	r3, [r7, #20]
 8003ac2:	e001      	b.n	8003ac8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ac4:	2320      	movs	r3, #32
 8003ac6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	2b20      	cmp	r3, #32
 8003ace:	d802      	bhi.n	8003ad6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003ad0:	697b      	ldr	r3, [r7, #20]
 8003ad2:	005b      	lsls	r3, r3, #1
 8003ad4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003ad6:	2001      	movs	r0, #1
 8003ad8:	f001 fbbe 	bl	8005258 <HAL_RCCEx_GetPeriphCLKFreq>
 8003adc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae6:	d125      	bne.n	8003b34 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68db      	ldr	r3, [r3, #12]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d010      	beq.n	8003b12 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	009b      	lsls	r3, r3, #2
 8003af4:	68fa      	ldr	r2, [r7, #12]
 8003af6:	fbb2 f2f3 	udiv	r2, r2, r3
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	005b      	lsls	r3, r3, #1
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b0c:	3305      	adds	r3, #5
 8003b0e:	613b      	str	r3, [r7, #16]
 8003b10:	e01f      	b.n	8003b52 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	00db      	lsls	r3, r3, #3
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	009b      	lsls	r3, r3, #2
 8003b20:	4413      	add	r3, r2
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	461a      	mov	r2, r3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	695b      	ldr	r3, [r3, #20]
 8003b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2e:	3305      	adds	r3, #5
 8003b30:	613b      	str	r3, [r7, #16]
 8003b32:	e00e      	b.n	8003b52 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	697b      	ldr	r3, [r7, #20]
 8003b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	009b      	lsls	r3, r3, #2
 8003b40:	4413      	add	r3, r2
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	461a      	mov	r2, r3
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	695b      	ldr	r3, [r3, #20]
 8003b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b4e:	3305      	adds	r3, #5
 8003b50:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003b52:	693b      	ldr	r3, [r7, #16]
 8003b54:	4a5c      	ldr	r2, [pc, #368]	; (8003cc8 <HAL_I2S_Init+0x270>)
 8003b56:	fba2 2303 	umull	r2, r3, r2, r3
 8003b5a:	08db      	lsrs	r3, r3, #3
 8003b5c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003b66:	693a      	ldr	r2, [r7, #16]
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	1ad3      	subs	r3, r2, r3
 8003b6c:	085b      	lsrs	r3, r3, #1
 8003b6e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003b70:	69bb      	ldr	r3, [r7, #24]
 8003b72:	021b      	lsls	r3, r3, #8
 8003b74:	61bb      	str	r3, [r7, #24]
 8003b76:	e003      	b.n	8003b80 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003b78:	2302      	movs	r3, #2
 8003b7a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	2b01      	cmp	r3, #1
 8003b84:	d902      	bls.n	8003b8c <HAL_I2S_Init+0x134>
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2bff      	cmp	r3, #255	; 0xff
 8003b8a:	d907      	bls.n	8003b9c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b90:	f043 0210 	orr.w	r2, r3, #16
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e08f      	b.n	8003cbc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	691a      	ldr	r2, [r3, #16]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	ea42 0103 	orr.w	r1, r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	430a      	orrs	r2, r1
 8003bae:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	69db      	ldr	r3, [r3, #28]
 8003bb6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003bba:	f023 030f 	bic.w	r3, r3, #15
 8003bbe:	687a      	ldr	r2, [r7, #4]
 8003bc0:	6851      	ldr	r1, [r2, #4]
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6892      	ldr	r2, [r2, #8]
 8003bc6:	4311      	orrs	r1, r2
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68d2      	ldr	r2, [r2, #12]
 8003bcc:	4311      	orrs	r1, r2
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	6992      	ldr	r2, [r2, #24]
 8003bd2:	430a      	orrs	r2, r1
 8003bd4:	431a      	orrs	r2, r3
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bde:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a1b      	ldr	r3, [r3, #32]
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d161      	bne.n	8003cac <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a38      	ldr	r2, [pc, #224]	; (8003ccc <HAL_I2S_Init+0x274>)
 8003bec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4a37      	ldr	r2, [pc, #220]	; (8003cd0 <HAL_I2S_Init+0x278>)
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d101      	bne.n	8003bfc <HAL_I2S_Init+0x1a4>
 8003bf8:	4b36      	ldr	r3, [pc, #216]	; (8003cd4 <HAL_I2S_Init+0x27c>)
 8003bfa:	e001      	b.n	8003c00 <HAL_I2S_Init+0x1a8>
 8003bfc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c00:	69db      	ldr	r3, [r3, #28]
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	6812      	ldr	r2, [r2, #0]
 8003c06:	4932      	ldr	r1, [pc, #200]	; (8003cd0 <HAL_I2S_Init+0x278>)
 8003c08:	428a      	cmp	r2, r1
 8003c0a:	d101      	bne.n	8003c10 <HAL_I2S_Init+0x1b8>
 8003c0c:	4a31      	ldr	r2, [pc, #196]	; (8003cd4 <HAL_I2S_Init+0x27c>)
 8003c0e:	e001      	b.n	8003c14 <HAL_I2S_Init+0x1bc>
 8003c10:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003c14:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003c18:	f023 030f 	bic.w	r3, r3, #15
 8003c1c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	4a2b      	ldr	r2, [pc, #172]	; (8003cd0 <HAL_I2S_Init+0x278>)
 8003c24:	4293      	cmp	r3, r2
 8003c26:	d101      	bne.n	8003c2c <HAL_I2S_Init+0x1d4>
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <HAL_I2S_Init+0x27c>)
 8003c2a:	e001      	b.n	8003c30 <HAL_I2S_Init+0x1d8>
 8003c2c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c30:	2202      	movs	r2, #2
 8003c32:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a25      	ldr	r2, [pc, #148]	; (8003cd0 <HAL_I2S_Init+0x278>)
 8003c3a:	4293      	cmp	r3, r2
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2S_Init+0x1ea>
 8003c3e:	4b25      	ldr	r3, [pc, #148]	; (8003cd4 <HAL_I2S_Init+0x27c>)
 8003c40:	e001      	b.n	8003c46 <HAL_I2S_Init+0x1ee>
 8003c42:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c46:	69db      	ldr	r3, [r3, #28]
 8003c48:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c52:	d003      	beq.n	8003c5c <HAL_I2S_Init+0x204>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d103      	bne.n	8003c64 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003c5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003c60:	613b      	str	r3, [r7, #16]
 8003c62:	e001      	b.n	8003c68 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003c64:	2300      	movs	r3, #0
 8003c66:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	689b      	ldr	r3, [r3, #8]
 8003c70:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c72:	4313      	orrs	r3, r2
 8003c74:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	699b      	ldr	r3, [r3, #24]
 8003c84:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003c86:	4313      	orrs	r3, r2
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	897b      	ldrh	r3, [r7, #10]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	b29b      	uxth	r3, r3
 8003c90:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003c94:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	4a0d      	ldr	r2, [pc, #52]	; (8003cd0 <HAL_I2S_Init+0x278>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d101      	bne.n	8003ca4 <HAL_I2S_Init+0x24c>
 8003ca0:	4b0c      	ldr	r3, [pc, #48]	; (8003cd4 <HAL_I2S_Init+0x27c>)
 8003ca2:	e001      	b.n	8003ca8 <HAL_I2S_Init+0x250>
 8003ca4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ca8:	897a      	ldrh	r2, [r7, #10]
 8003caa:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003cba:	2300      	movs	r3, #0
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3720      	adds	r7, #32
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	08003dcf 	.word	0x08003dcf
 8003cc8:	cccccccd 	.word	0xcccccccd
 8003ccc:	080041f9 	.word	0x080041f9
 8003cd0:	40003800 	.word	0x40003800
 8003cd4:	40003400 	.word	0x40003400

08003cd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003ce0:	bf00      	nop
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b083      	sub	sp, #12
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003cf4:	bf00      	nop
 8003cf6:	370c      	adds	r7, #12
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfe:	4770      	bx	lr

08003d00 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003d08:	bf00      	nop
 8003d0a:	370c      	adds	r7, #12
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr

08003d14 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d20:	881a      	ldrh	r2, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d2c:	1c9a      	adds	r2, r3, #2
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d36:	b29b      	uxth	r3, r3
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	b29a      	uxth	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d44:	b29b      	uxth	r3, r3
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10e      	bne.n	8003d68 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d58:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2201      	movs	r2, #1
 8003d5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff ffb8 	bl	8003cd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003d68:	bf00      	nop
 8003d6a:	3708      	adds	r7, #8
 8003d6c:	46bd      	mov	sp, r7
 8003d6e:	bd80      	pop	{r7, pc}

08003d70 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b082      	sub	sp, #8
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68da      	ldr	r2, [r3, #12]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d82:	b292      	uxth	r2, r2
 8003d84:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d8a:	1c9a      	adds	r2, r3, #2
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	3b01      	subs	r3, #1
 8003d98:	b29a      	uxth	r2, r3
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10e      	bne.n	8003dc6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685a      	ldr	r2, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003db6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003dc0:	6878      	ldr	r0, [r7, #4]
 8003dc2:	f7ff ff93 	bl	8003cec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003dc6:	bf00      	nop
 8003dc8:	3708      	adds	r7, #8
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b086      	sub	sp, #24
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003de4:	b2db      	uxtb	r3, r3
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d13a      	bne.n	8003e60 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d109      	bne.n	8003e08 <I2S_IRQHandler+0x3a>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dfe:	2b40      	cmp	r3, #64	; 0x40
 8003e00:	d102      	bne.n	8003e08 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f7ff ffb4 	bl	8003d70 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e0e:	2b40      	cmp	r3, #64	; 0x40
 8003e10:	d126      	bne.n	8003e60 <I2S_IRQHandler+0x92>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0320 	and.w	r3, r3, #32
 8003e1c:	2b20      	cmp	r3, #32
 8003e1e:	d11f      	bne.n	8003e60 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	685a      	ldr	r2, [r3, #4]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e2e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e30:	2300      	movs	r3, #0
 8003e32:	613b      	str	r3, [r7, #16]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	613b      	str	r3, [r7, #16]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	613b      	str	r3, [r7, #16]
 8003e44:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e52:	f043 0202 	orr.w	r2, r3, #2
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff ff50 	bl	8003d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b03      	cmp	r3, #3
 8003e6a:	d136      	bne.n	8003eda <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b02      	cmp	r3, #2
 8003e74:	d109      	bne.n	8003e8a <I2S_IRQHandler+0xbc>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e80:	2b80      	cmp	r3, #128	; 0x80
 8003e82:	d102      	bne.n	8003e8a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f7ff ff45 	bl	8003d14 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b08      	cmp	r3, #8
 8003e92:	d122      	bne.n	8003eda <I2S_IRQHandler+0x10c>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f003 0320 	and.w	r3, r3, #32
 8003e9e:	2b20      	cmp	r3, #32
 8003ea0:	d11b      	bne.n	8003eda <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003eb0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	60fb      	str	r3, [r7, #12]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	689b      	ldr	r3, [r3, #8]
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2201      	movs	r2, #1
 8003ec4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ecc:	f043 0204 	orr.w	r2, r3, #4
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff13 	bl	8003d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003eda:	bf00      	nop
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}
	...

08003ee4 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	60f8      	str	r0, [r7, #12]
 8003eec:	60b9      	str	r1, [r7, #8]
 8003eee:	607a      	str	r2, [r7, #4]
 8003ef0:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003efa:	2300      	movs	r3, #0
 8003efc:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d002      	beq.n	8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003f0e:	e160      	b.n	80041d2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003f1c:	887b      	ldrh	r3, [r7, #2]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d101      	bne.n	8003f26 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e15a      	b.n	80041dc <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f2c:	b2db      	uxtb	r3, r3
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003f32:	2302      	movs	r3, #2
 8003f34:	e152      	b.n	80041dc <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2201      	movs	r2, #1
 8003f3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	69db      	ldr	r3, [r3, #28]
 8003f50:	f003 0307 	and.w	r3, r3, #7
 8003f54:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	2b03      	cmp	r3, #3
 8003f5a:	d002      	beq.n	8003f62 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	2b05      	cmp	r3, #5
 8003f60:	d114      	bne.n	8003f8c <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003f62:	887b      	ldrh	r3, [r7, #2]
 8003f64:	005b      	lsls	r3, r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003f6c:	887b      	ldrh	r3, [r7, #2]
 8003f6e:	005b      	lsls	r3, r3, #1
 8003f70:	b29a      	uxth	r2, r3
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003f76:	887b      	ldrh	r3, [r7, #2]
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	b29a      	uxth	r2, r3
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003f80:	887b      	ldrh	r3, [r7, #2]
 8003f82:	005b      	lsls	r3, r3, #1
 8003f84:	b29a      	uxth	r2, r3
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	865a      	strh	r2, [r3, #50]	; 0x32
 8003f8a:	e00b      	b.n	8003fa4 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	887a      	ldrh	r2, [r7, #2]
 8003f90:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	887a      	ldrh	r2, [r7, #2]
 8003f96:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	887a      	ldrh	r2, [r7, #2]
 8003f9c:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	887a      	ldrh	r2, [r7, #2]
 8003fa2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	2205      	movs	r2, #5
 8003fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb6:	4a8b      	ldr	r2, [pc, #556]	; (80041e4 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003fb8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbe:	4a8a      	ldr	r2, [pc, #552]	; (80041e8 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc6:	4a89      	ldr	r2, [pc, #548]	; (80041ec <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003fc8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fce:	2200      	movs	r2, #0
 8003fd0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fde:	4a83      	ldr	r2, [pc, #524]	; (80041ec <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003fe0:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69db      	ldr	r3, [r3, #28]
 8003fe8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fec:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ff4:	d002      	beq.n	8003ffc <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003ff6:	697b      	ldr	r3, [r7, #20]
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d16b      	bne.n	80040d4 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003ffc:	1d3b      	adds	r3, r7, #4
 8003ffe:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a79      	ldr	r2, [pc, #484]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d101      	bne.n	8004012 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 800400e:	4b79      	ldr	r3, [pc, #484]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004010:	e001      	b.n	8004016 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8004012:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004016:	330c      	adds	r3, #12
 8004018:	4619      	mov	r1, r3
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8004022:	b29b      	uxth	r3, r3
 8004024:	f7fe f8c6 	bl	80021b4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a70      	ldr	r2, [pc, #448]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d101      	bne.n	8004036 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8004032:	4b70      	ldr	r3, [pc, #448]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004034:	e001      	b.n	800403a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8004036:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	496b      	ldr	r1, [pc, #428]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004042:	428b      	cmp	r3, r1
 8004044:	d101      	bne.n	800404a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8004046:	4b6b      	ldr	r3, [pc, #428]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004048:	e001      	b.n	800404e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 800404a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800404e:	f042 0201 	orr.w	r2, r2, #1
 8004052:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8004054:	f107 0308 	add.w	r3, r7, #8
 8004058:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	6819      	ldr	r1, [r3, #0]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	330c      	adds	r3, #12
 8004068:	461a      	mov	r2, r3
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406e:	b29b      	uxth	r3, r3
 8004070:	f7fe f8a0 	bl	80021b4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	685a      	ldr	r2, [r3, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f042 0202 	orr.w	r2, r2, #2
 8004082:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	f000 809e 	beq.w	80041d2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a55      	ldr	r2, [pc, #340]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d101      	bne.n	80040a4 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 80040a0:	4b54      	ldr	r3, [pc, #336]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040a2:	e001      	b.n	80040a8 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 80040a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a8:	69da      	ldr	r2, [r3, #28]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4950      	ldr	r1, [pc, #320]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80040b0:	428b      	cmp	r3, r1
 80040b2:	d101      	bne.n	80040b8 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 80040b4:	4b4f      	ldr	r3, [pc, #316]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80040b6:	e001      	b.n	80040bc <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 80040b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040c0:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69da      	ldr	r2, [r3, #28]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80040d0:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 80040d2:	e07e      	b.n	80041d2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	69db      	ldr	r3, [r3, #28]
 80040da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80040de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80040e2:	d10a      	bne.n	80040fa <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80040e4:	2300      	movs	r3, #0
 80040e6:	613b      	str	r3, [r7, #16]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	68db      	ldr	r3, [r3, #12]
 80040ee:	613b      	str	r3, [r7, #16]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	613b      	str	r3, [r7, #16]
 80040f8:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004104:	69bb      	ldr	r3, [r7, #24]
 8004106:	6819      	ldr	r1, [r3, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a38      	ldr	r2, [pc, #224]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d101      	bne.n	8004116 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8004112:	4b38      	ldr	r3, [pc, #224]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004114:	e001      	b.n	800411a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8004116:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800411a:	330c      	adds	r3, #12
 800411c:	461a      	mov	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004122:	b29b      	uxth	r3, r3
 8004124:	f7fe f846 	bl	80021b4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a30      	ldr	r2, [pc, #192]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d101      	bne.n	8004136 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8004132:	4b30      	ldr	r3, [pc, #192]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004134:	e001      	b.n	800413a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8004136:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	492b      	ldr	r1, [pc, #172]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004142:	428b      	cmp	r3, r1
 8004144:	d101      	bne.n	800414a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8004146:	4b2b      	ldr	r3, [pc, #172]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8004148:	e001      	b.n	800414e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 800414a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800414e:	f042 0202 	orr.w	r2, r2, #2
 8004152:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8004154:	1d3b      	adds	r3, r7, #4
 8004156:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	330c      	adds	r3, #12
 8004162:	4619      	mov	r1, r3
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	681a      	ldr	r2, [r3, #0]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 800416c:	b29b      	uxth	r3, r3
 800416e:	f7fe f821 	bl	80021b4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f042 0201 	orr.w	r2, r2, #1
 8004180:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	69db      	ldr	r3, [r3, #28]
 8004188:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800418c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004190:	d01e      	beq.n	80041d0 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a16      	ldr	r2, [pc, #88]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d101      	bne.n	80041a0 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 800419c:	4b15      	ldr	r3, [pc, #84]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 800419e:	e001      	b.n	80041a4 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a4:	69da      	ldr	r2, [r3, #28]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	4911      	ldr	r1, [pc, #68]	; (80041f0 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 80041ac:	428b      	cmp	r3, r1
 80041ae:	d101      	bne.n	80041b4 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 80041b0:	4b10      	ldr	r3, [pc, #64]	; (80041f4 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 80041b2:	e001      	b.n	80041b8 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 80041b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041bc:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80041cc:	61da      	str	r2, [r3, #28]
 80041ce:	e000      	b.n	80041d2 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 80041d0:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2200      	movs	r2, #0
 80041d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 80041da:	7ffb      	ldrb	r3, [r7, #31]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3720      	adds	r7, #32
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	080044a1 	.word	0x080044a1
 80041e8:	080044bd 	.word	0x080044bd
 80041ec:	08004595 	.word	0x08004595
 80041f0:	40003800 	.word	0x40003800
 80041f4:	40003400 	.word	0x40003400

080041f8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a92      	ldr	r2, [pc, #584]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d101      	bne.n	8004216 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004212:	4b92      	ldr	r3, [pc, #584]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004214:	e001      	b.n	800421a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004216:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	4a8b      	ldr	r2, [pc, #556]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d101      	bne.n	8004234 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004230:	4b8a      	ldr	r3, [pc, #552]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004232:	e001      	b.n	8004238 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004234:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004244:	d004      	beq.n	8004250 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	2b00      	cmp	r3, #0
 800424c:	f040 8099 	bne.w	8004382 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	f003 0302 	and.w	r3, r3, #2
 8004256:	2b02      	cmp	r3, #2
 8004258:	d107      	bne.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004260:	2b00      	cmp	r3, #0
 8004262:	d002      	beq.n	800426a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f9d5 	bl	8004614 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800426a:	69bb      	ldr	r3, [r7, #24]
 800426c:	f003 0301 	and.w	r3, r3, #1
 8004270:	2b01      	cmp	r3, #1
 8004272:	d107      	bne.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800427a:	2b00      	cmp	r3, #0
 800427c:	d002      	beq.n	8004284 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fa78 	bl	8004774 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800428a:	2b40      	cmp	r3, #64	; 0x40
 800428c:	d13a      	bne.n	8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f003 0320 	and.w	r3, r3, #32
 8004294:	2b00      	cmp	r3, #0
 8004296:	d035      	beq.n	8004304 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a6e      	ldr	r2, [pc, #440]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d101      	bne.n	80042a6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80042a2:	4b6e      	ldr	r3, [pc, #440]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042a4:	e001      	b.n	80042aa <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80042a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4969      	ldr	r1, [pc, #420]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80042b2:	428b      	cmp	r3, r1
 80042b4:	d101      	bne.n	80042ba <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80042b6:	4b69      	ldr	r3, [pc, #420]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80042b8:	e001      	b.n	80042be <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80042ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042be:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80042c2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80042d4:	2300      	movs	r3, #0
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2201      	movs	r2, #1
 80042ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042f6:	f043 0202 	orr.w	r2, r3, #2
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff fcfe 	bl	8003d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f003 0308 	and.w	r3, r3, #8
 800430a:	2b08      	cmp	r3, #8
 800430c:	f040 80c3 	bne.w	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f003 0320 	and.w	r3, r3, #32
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 80bd 	beq.w	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	685a      	ldr	r2, [r3, #4]
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800432a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	4a49      	ldr	r2, [pc, #292]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d101      	bne.n	800433a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004338:	e001      	b.n	800433e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800433a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433e:	685a      	ldr	r2, [r3, #4]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4944      	ldr	r1, [pc, #272]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004346:	428b      	cmp	r3, r1
 8004348:	d101      	bne.n	800434e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800434a:	4b44      	ldr	r3, [pc, #272]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800434c:	e001      	b.n	8004352 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800434e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004352:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004356:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004358:	2300      	movs	r3, #0
 800435a:	60bb      	str	r3, [r7, #8]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689b      	ldr	r3, [r3, #8]
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2201      	movs	r2, #1
 800436a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004372:	f043 0204 	orr.w	r2, r3, #4
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff fcc0 	bl	8003d00 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004380:	e089      	b.n	8004496 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b02      	cmp	r3, #2
 800438a:	d107      	bne.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004392:	2b00      	cmp	r3, #0
 8004394:	d002      	beq.n	800439c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	f000 f96e 	bl	8004678 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f003 0301 	and.w	r3, r3, #1
 80043a2:	2b01      	cmp	r3, #1
 80043a4:	d107      	bne.n	80043b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d002      	beq.n	80043b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 f9ad 	bl	8004710 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043bc:	2b40      	cmp	r3, #64	; 0x40
 80043be:	d12f      	bne.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	f003 0320 	and.w	r3, r3, #32
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d02a      	beq.n	8004420 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043d8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a1e      	ldr	r2, [pc, #120]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d101      	bne.n	80043e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80043e4:	4b1d      	ldr	r3, [pc, #116]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043e6:	e001      	b.n	80043ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80043e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4919      	ldr	r1, [pc, #100]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043f4:	428b      	cmp	r3, r1
 80043f6:	d101      	bne.n	80043fc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80043f8:	4b18      	ldr	r3, [pc, #96]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043fa:	e001      	b.n	8004400 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80043fc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004400:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004404:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2201      	movs	r2, #1
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004412:	f043 0202 	orr.w	r2, r3, #2
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f7ff fc70 	bl	8003d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	f003 0308 	and.w	r3, r3, #8
 8004426:	2b08      	cmp	r3, #8
 8004428:	d136      	bne.n	8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f003 0320 	and.w	r3, r3, #32
 8004430:	2b00      	cmp	r3, #0
 8004432:	d031      	beq.n	8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a07      	ldr	r2, [pc, #28]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d101      	bne.n	8004442 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800443e:	4b07      	ldr	r3, [pc, #28]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004440:	e001      	b.n	8004446 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004442:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4902      	ldr	r1, [pc, #8]	; (8004458 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800444e:	428b      	cmp	r3, r1
 8004450:	d106      	bne.n	8004460 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004452:	4b02      	ldr	r3, [pc, #8]	; (800445c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004454:	e006      	b.n	8004464 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004456:	bf00      	nop
 8004458:	40003800 	.word	0x40003800
 800445c:	40003400 	.word	0x40003400
 8004460:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004464:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004468:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685a      	ldr	r2, [r3, #4]
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004478:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004486:	f043 0204 	orr.w	r2, r3, #4
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff fc36 	bl	8003d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004494:	e000      	b.n	8004498 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004496:	bf00      	nop
}
 8004498:	bf00      	nop
 800449a:	3720      	adds	r7, #32
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ac:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f7fc feda 	bl	8001268 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80044b4:	bf00      	nop
 80044b6:	3710      	adds	r7, #16
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}

080044bc <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c8:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d155      	bne.n	800457e <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044e0:	d006      	beq.n	80044f0 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	69db      	ldr	r3, [r3, #28]
 80044e8:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d11e      	bne.n	800452e <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a25      	ldr	r2, [pc, #148]	; (800458c <I2SEx_TxRxDMACplt+0xd0>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d101      	bne.n	80044fe <I2SEx_TxRxDMACplt+0x42>
 80044fa:	4b25      	ldr	r3, [pc, #148]	; (8004590 <I2SEx_TxRxDMACplt+0xd4>)
 80044fc:	e001      	b.n	8004502 <I2SEx_TxRxDMACplt+0x46>
 80044fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004502:	685a      	ldr	r2, [r3, #4]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4920      	ldr	r1, [pc, #128]	; (800458c <I2SEx_TxRxDMACplt+0xd0>)
 800450a:	428b      	cmp	r3, r1
 800450c:	d101      	bne.n	8004512 <I2SEx_TxRxDMACplt+0x56>
 800450e:	4b20      	ldr	r3, [pc, #128]	; (8004590 <I2SEx_TxRxDMACplt+0xd4>)
 8004510:	e001      	b.n	8004516 <I2SEx_TxRxDMACplt+0x5a>
 8004512:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004516:	f022 0201 	bic.w	r2, r2, #1
 800451a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685a      	ldr	r2, [r3, #4]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0202 	bic.w	r2, r2, #2
 800452a:	605a      	str	r2, [r3, #4]
 800452c:	e01d      	b.n	800456a <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f022 0201 	bic.w	r2, r2, #1
 800453c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a12      	ldr	r2, [pc, #72]	; (800458c <I2SEx_TxRxDMACplt+0xd0>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d101      	bne.n	800454c <I2SEx_TxRxDMACplt+0x90>
 8004548:	4b11      	ldr	r3, [pc, #68]	; (8004590 <I2SEx_TxRxDMACplt+0xd4>)
 800454a:	e001      	b.n	8004550 <I2SEx_TxRxDMACplt+0x94>
 800454c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004550:	685a      	ldr	r2, [r3, #4]
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	490d      	ldr	r1, [pc, #52]	; (800458c <I2SEx_TxRxDMACplt+0xd0>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d101      	bne.n	8004560 <I2SEx_TxRxDMACplt+0xa4>
 800455c:	4b0c      	ldr	r3, [pc, #48]	; (8004590 <I2SEx_TxRxDMACplt+0xd4>)
 800455e:	e001      	b.n	8004564 <I2SEx_TxRxDMACplt+0xa8>
 8004560:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004564:	f022 0202 	bic.w	r2, r2, #2
 8004568:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7fc fe90 	bl	80012a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004584:	bf00      	nop
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}
 800458c:	40003800 	.word	0x40003800
 8004590:	40003400 	.word	0x40003400

08004594 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	685a      	ldr	r2, [r3, #4]
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f022 0203 	bic.w	r2, r2, #3
 80045b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a15      	ldr	r2, [pc, #84]	; (800460c <I2SEx_TxRxDMAError+0x78>)
 80045b8:	4293      	cmp	r3, r2
 80045ba:	d101      	bne.n	80045c0 <I2SEx_TxRxDMAError+0x2c>
 80045bc:	4b14      	ldr	r3, [pc, #80]	; (8004610 <I2SEx_TxRxDMAError+0x7c>)
 80045be:	e001      	b.n	80045c4 <I2SEx_TxRxDMAError+0x30>
 80045c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045c4:	685a      	ldr	r2, [r3, #4]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4910      	ldr	r1, [pc, #64]	; (800460c <I2SEx_TxRxDMAError+0x78>)
 80045cc:	428b      	cmp	r3, r1
 80045ce:	d101      	bne.n	80045d4 <I2SEx_TxRxDMAError+0x40>
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <I2SEx_TxRxDMAError+0x7c>)
 80045d2:	e001      	b.n	80045d8 <I2SEx_TxRxDMAError+0x44>
 80045d4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045d8:	f022 0203 	bic.w	r2, r2, #3
 80045dc:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	2200      	movs	r2, #0
 80045e8:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f6:	f043 0208 	orr.w	r2, r3, #8
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f7ff fb7e 	bl	8003d00 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004604:	bf00      	nop
 8004606:	3710      	adds	r7, #16
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}
 800460c:	40003800 	.word	0x40003800
 8004610:	40003400 	.word	0x40003400

08004614 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	1c99      	adds	r1, r3, #2
 8004622:	687a      	ldr	r2, [r7, #4]
 8004624:	6251      	str	r1, [r2, #36]	; 0x24
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004640:	b29b      	uxth	r3, r3
 8004642:	2b00      	cmp	r3, #0
 8004644:	d113      	bne.n	800466e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004654:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800465a:	b29b      	uxth	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	d106      	bne.n	800466e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2201      	movs	r2, #1
 8004664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f7fc fe1b 	bl	80012a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800466e:	bf00      	nop
 8004670:	3708      	adds	r7, #8
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
	...

08004678 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004684:	1c99      	adds	r1, r3, #2
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	6251      	str	r1, [r2, #36]	; 0x24
 800468a:	8819      	ldrh	r1, [r3, #0]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1d      	ldr	r2, [pc, #116]	; (8004708 <I2SEx_TxISR_I2SExt+0x90>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d101      	bne.n	800469a <I2SEx_TxISR_I2SExt+0x22>
 8004696:	4b1d      	ldr	r3, [pc, #116]	; (800470c <I2SEx_TxISR_I2SExt+0x94>)
 8004698:	e001      	b.n	800469e <I2SEx_TxISR_I2SExt+0x26>
 800469a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800469e:	460a      	mov	r2, r1
 80046a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b4:	b29b      	uxth	r3, r3
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d121      	bne.n	80046fe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	4a12      	ldr	r2, [pc, #72]	; (8004708 <I2SEx_TxISR_I2SExt+0x90>)
 80046c0:	4293      	cmp	r3, r2
 80046c2:	d101      	bne.n	80046c8 <I2SEx_TxISR_I2SExt+0x50>
 80046c4:	4b11      	ldr	r3, [pc, #68]	; (800470c <I2SEx_TxISR_I2SExt+0x94>)
 80046c6:	e001      	b.n	80046cc <I2SEx_TxISR_I2SExt+0x54>
 80046c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046cc:	685a      	ldr	r2, [r3, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	490d      	ldr	r1, [pc, #52]	; (8004708 <I2SEx_TxISR_I2SExt+0x90>)
 80046d4:	428b      	cmp	r3, r1
 80046d6:	d101      	bne.n	80046dc <I2SEx_TxISR_I2SExt+0x64>
 80046d8:	4b0c      	ldr	r3, [pc, #48]	; (800470c <I2SEx_TxISR_I2SExt+0x94>)
 80046da:	e001      	b.n	80046e0 <I2SEx_TxISR_I2SExt+0x68>
 80046dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d106      	bne.n	80046fe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2201      	movs	r2, #1
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046f8:	6878      	ldr	r0, [r7, #4]
 80046fa:	f7fc fdd3 	bl	80012a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046fe:	bf00      	nop
 8004700:	3708      	adds	r7, #8
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}
 8004706:	bf00      	nop
 8004708:	40003800 	.word	0x40003800
 800470c:	40003400 	.word	0x40003400

08004710 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b082      	sub	sp, #8
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68d8      	ldr	r0, [r3, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004722:	1c99      	adds	r1, r3, #2
 8004724:	687a      	ldr	r2, [r7, #4]
 8004726:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004728:	b282      	uxth	r2, r0
 800472a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004730:	b29b      	uxth	r3, r3
 8004732:	3b01      	subs	r3, #1
 8004734:	b29a      	uxth	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d113      	bne.n	800476c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	685a      	ldr	r2, [r3, #4]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004752:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	d106      	bne.n	800476c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7fc fd9c 	bl	80012a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800476c:	bf00      	nop
 800476e:	3708      	adds	r7, #8
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a20      	ldr	r2, [pc, #128]	; (8004804 <I2SEx_RxISR_I2SExt+0x90>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d101      	bne.n	800478a <I2SEx_RxISR_I2SExt+0x16>
 8004786:	4b20      	ldr	r3, [pc, #128]	; (8004808 <I2SEx_RxISR_I2SExt+0x94>)
 8004788:	e001      	b.n	800478e <I2SEx_RxISR_I2SExt+0x1a>
 800478a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800478e:	68d8      	ldr	r0, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	1c99      	adds	r1, r3, #2
 8004796:	687a      	ldr	r2, [r7, #4]
 8004798:	62d1      	str	r1, [r2, #44]	; 0x2c
 800479a:	b282      	uxth	r2, r0
 800479c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80047b0:	b29b      	uxth	r3, r3
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d121      	bne.n	80047fa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a12      	ldr	r2, [pc, #72]	; (8004804 <I2SEx_RxISR_I2SExt+0x90>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d101      	bne.n	80047c4 <I2SEx_RxISR_I2SExt+0x50>
 80047c0:	4b11      	ldr	r3, [pc, #68]	; (8004808 <I2SEx_RxISR_I2SExt+0x94>)
 80047c2:	e001      	b.n	80047c8 <I2SEx_RxISR_I2SExt+0x54>
 80047c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047c8:	685a      	ldr	r2, [r3, #4]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	490d      	ldr	r1, [pc, #52]	; (8004804 <I2SEx_RxISR_I2SExt+0x90>)
 80047d0:	428b      	cmp	r3, r1
 80047d2:	d101      	bne.n	80047d8 <I2SEx_RxISR_I2SExt+0x64>
 80047d4:	4b0c      	ldr	r3, [pc, #48]	; (8004808 <I2SEx_RxISR_I2SExt+0x94>)
 80047d6:	e001      	b.n	80047dc <I2SEx_RxISR_I2SExt+0x68>
 80047d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80047dc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047e0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e6:	b29b      	uxth	r3, r3
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d106      	bne.n	80047fa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	2201      	movs	r2, #1
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fc fd55 	bl	80012a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047fa:	bf00      	nop
 80047fc:	3708      	adds	r7, #8
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40003800 	.word	0x40003800
 8004808:	40003400 	.word	0x40003400

0800480c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e267      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 0301 	and.w	r3, r3, #1
 8004826:	2b00      	cmp	r3, #0
 8004828:	d075      	beq.n	8004916 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800482a:	4b88      	ldr	r3, [pc, #544]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
 8004832:	2b04      	cmp	r3, #4
 8004834:	d00c      	beq.n	8004850 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004836:	4b85      	ldr	r3, [pc, #532]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800483e:	2b08      	cmp	r3, #8
 8004840:	d112      	bne.n	8004868 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004842:	4b82      	ldr	r3, [pc, #520]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800484a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800484e:	d10b      	bne.n	8004868 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004850:	4b7e      	ldr	r3, [pc, #504]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004858:	2b00      	cmp	r3, #0
 800485a:	d05b      	beq.n	8004914 <HAL_RCC_OscConfig+0x108>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d157      	bne.n	8004914 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e242      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004870:	d106      	bne.n	8004880 <HAL_RCC_OscConfig+0x74>
 8004872:	4b76      	ldr	r3, [pc, #472]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a75      	ldr	r2, [pc, #468]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004878:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	e01d      	b.n	80048bc <HAL_RCC_OscConfig+0xb0>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004888:	d10c      	bne.n	80048a4 <HAL_RCC_OscConfig+0x98>
 800488a:	4b70      	ldr	r3, [pc, #448]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a6f      	ldr	r2, [pc, #444]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004890:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	4b6d      	ldr	r3, [pc, #436]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	4a6c      	ldr	r2, [pc, #432]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800489c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048a0:	6013      	str	r3, [r2, #0]
 80048a2:	e00b      	b.n	80048bc <HAL_RCC_OscConfig+0xb0>
 80048a4:	4b69      	ldr	r3, [pc, #420]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4a68      	ldr	r2, [pc, #416]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	4b66      	ldr	r3, [pc, #408]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a65      	ldr	r2, [pc, #404]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d013      	beq.n	80048ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c4:	f7fd faaa 	bl	8001e1c <HAL_GetTick>
 80048c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ca:	e008      	b.n	80048de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048cc:	f7fd faa6 	bl	8001e1c <HAL_GetTick>
 80048d0:	4602      	mov	r2, r0
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	1ad3      	subs	r3, r2, r3
 80048d6:	2b64      	cmp	r3, #100	; 0x64
 80048d8:	d901      	bls.n	80048de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048da:	2303      	movs	r3, #3
 80048dc:	e207      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048de:	4b5b      	ldr	r3, [pc, #364]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d0f0      	beq.n	80048cc <HAL_RCC_OscConfig+0xc0>
 80048ea:	e014      	b.n	8004916 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ec:	f7fd fa96 	bl	8001e1c <HAL_GetTick>
 80048f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f2:	e008      	b.n	8004906 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048f4:	f7fd fa92 	bl	8001e1c <HAL_GetTick>
 80048f8:	4602      	mov	r2, r0
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	2b64      	cmp	r3, #100	; 0x64
 8004900:	d901      	bls.n	8004906 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004902:	2303      	movs	r3, #3
 8004904:	e1f3      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004906:	4b51      	ldr	r3, [pc, #324]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f0      	bne.n	80048f4 <HAL_RCC_OscConfig+0xe8>
 8004912:	e000      	b.n	8004916 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004914:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f003 0302 	and.w	r3, r3, #2
 800491e:	2b00      	cmp	r3, #0
 8004920:	d063      	beq.n	80049ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004922:	4b4a      	ldr	r3, [pc, #296]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 030c 	and.w	r3, r3, #12
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00b      	beq.n	8004946 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800492e:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004936:	2b08      	cmp	r3, #8
 8004938:	d11c      	bne.n	8004974 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800493a:	4b44      	ldr	r3, [pc, #272]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004942:	2b00      	cmp	r3, #0
 8004944:	d116      	bne.n	8004974 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d005      	beq.n	800495e <HAL_RCC_OscConfig+0x152>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d001      	beq.n	800495e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e1c7      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800495e:	4b3b      	ldr	r3, [pc, #236]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	00db      	lsls	r3, r3, #3
 800496c:	4937      	ldr	r1, [pc, #220]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800496e:	4313      	orrs	r3, r2
 8004970:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004972:	e03a      	b.n	80049ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d020      	beq.n	80049be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800497c:	4b34      	ldr	r3, [pc, #208]	; (8004a50 <HAL_RCC_OscConfig+0x244>)
 800497e:	2201      	movs	r2, #1
 8004980:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004982:	f7fd fa4b 	bl	8001e1c <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004988:	e008      	b.n	800499c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800498a:	f7fd fa47 	bl	8001e1c <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e1a8      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800499c:	4b2b      	ldr	r3, [pc, #172]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d0f0      	beq.n	800498a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a8:	4b28      	ldr	r3, [pc, #160]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	00db      	lsls	r3, r3, #3
 80049b6:	4925      	ldr	r1, [pc, #148]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80049b8:	4313      	orrs	r3, r2
 80049ba:	600b      	str	r3, [r1, #0]
 80049bc:	e015      	b.n	80049ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049be:	4b24      	ldr	r3, [pc, #144]	; (8004a50 <HAL_RCC_OscConfig+0x244>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c4:	f7fd fa2a 	bl	8001e1c <HAL_GetTick>
 80049c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049ca:	e008      	b.n	80049de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049cc:	f7fd fa26 	bl	8001e1c <HAL_GetTick>
 80049d0:	4602      	mov	r2, r0
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	1ad3      	subs	r3, r2, r3
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d901      	bls.n	80049de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049da:	2303      	movs	r3, #3
 80049dc:	e187      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049de:	4b1b      	ldr	r3, [pc, #108]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d1f0      	bne.n	80049cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0308 	and.w	r3, r3, #8
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d036      	beq.n	8004a64 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fe:	4b15      	ldr	r3, [pc, #84]	; (8004a54 <HAL_RCC_OscConfig+0x248>)
 8004a00:	2201      	movs	r2, #1
 8004a02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a04:	f7fd fa0a 	bl	8001e1c <HAL_GetTick>
 8004a08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0a:	e008      	b.n	8004a1e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a0c:	f7fd fa06 	bl	8001e1c <HAL_GetTick>
 8004a10:	4602      	mov	r2, r0
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	1ad3      	subs	r3, r2, r3
 8004a16:	2b02      	cmp	r3, #2
 8004a18:	d901      	bls.n	8004a1e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e167      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a1e:	4b0b      	ldr	r3, [pc, #44]	; (8004a4c <HAL_RCC_OscConfig+0x240>)
 8004a20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a22:	f003 0302 	and.w	r3, r3, #2
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d0f0      	beq.n	8004a0c <HAL_RCC_OscConfig+0x200>
 8004a2a:	e01b      	b.n	8004a64 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2c:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_OscConfig+0x248>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a32:	f7fd f9f3 	bl	8001e1c <HAL_GetTick>
 8004a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a38:	e00e      	b.n	8004a58 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a3a:	f7fd f9ef 	bl	8001e1c <HAL_GetTick>
 8004a3e:	4602      	mov	r2, r0
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	1ad3      	subs	r3, r2, r3
 8004a44:	2b02      	cmp	r3, #2
 8004a46:	d907      	bls.n	8004a58 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e150      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	42470000 	.word	0x42470000
 8004a54:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b88      	ldr	r3, [pc, #544]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ea      	bne.n	8004a3a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 8097 	beq.w	8004ba0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a76:	4b81      	ldr	r3, [pc, #516]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10f      	bne.n	8004aa2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	2300      	movs	r3, #0
 8004a84:	60bb      	str	r3, [r7, #8]
 8004a86:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8a:	4a7c      	ldr	r2, [pc, #496]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a90:	6413      	str	r3, [r2, #64]	; 0x40
 8004a92:	4b7a      	ldr	r3, [pc, #488]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a9a:	60bb      	str	r3, [r7, #8]
 8004a9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004aa2:	4b77      	ldr	r3, [pc, #476]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d118      	bne.n	8004ae0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aae:	4b74      	ldr	r3, [pc, #464]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a73      	ldr	r2, [pc, #460]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004ab4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004aba:	f7fd f9af 	bl	8001e1c <HAL_GetTick>
 8004abe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac0:	e008      	b.n	8004ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ac2:	f7fd f9ab 	bl	8001e1c <HAL_GetTick>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	1ad3      	subs	r3, r2, r3
 8004acc:	2b02      	cmp	r3, #2
 8004ace:	d901      	bls.n	8004ad4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ad0:	2303      	movs	r3, #3
 8004ad2:	e10c      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad4:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <HAL_RCC_OscConfig+0x474>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0f0      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d106      	bne.n	8004af6 <HAL_RCC_OscConfig+0x2ea>
 8004ae8:	4b64      	ldr	r3, [pc, #400]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aec:	4a63      	ldr	r2, [pc, #396]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004aee:	f043 0301 	orr.w	r3, r3, #1
 8004af2:	6713      	str	r3, [r2, #112]	; 0x70
 8004af4:	e01c      	b.n	8004b30 <HAL_RCC_OscConfig+0x324>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	2b05      	cmp	r3, #5
 8004afc:	d10c      	bne.n	8004b18 <HAL_RCC_OscConfig+0x30c>
 8004afe:	4b5f      	ldr	r3, [pc, #380]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b02:	4a5e      	ldr	r2, [pc, #376]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b04:	f043 0304 	orr.w	r3, r3, #4
 8004b08:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0a:	4b5c      	ldr	r3, [pc, #368]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0e:	4a5b      	ldr	r2, [pc, #364]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b10:	f043 0301 	orr.w	r3, r3, #1
 8004b14:	6713      	str	r3, [r2, #112]	; 0x70
 8004b16:	e00b      	b.n	8004b30 <HAL_RCC_OscConfig+0x324>
 8004b18:	4b58      	ldr	r3, [pc, #352]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a57      	ldr	r2, [pc, #348]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f023 0301 	bic.w	r3, r3, #1
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	4a54      	ldr	r2, [pc, #336]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b2a:	f023 0304 	bic.w	r3, r3, #4
 8004b2e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d015      	beq.n	8004b64 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b38:	f7fd f970 	bl	8001e1c <HAL_GetTick>
 8004b3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b3e:	e00a      	b.n	8004b56 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b40:	f7fd f96c 	bl	8001e1c <HAL_GetTick>
 8004b44:	4602      	mov	r2, r0
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	1ad3      	subs	r3, r2, r3
 8004b4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e0cb      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b56:	4b49      	ldr	r3, [pc, #292]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b5a:	f003 0302 	and.w	r3, r3, #2
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d0ee      	beq.n	8004b40 <HAL_RCC_OscConfig+0x334>
 8004b62:	e014      	b.n	8004b8e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b64:	f7fd f95a 	bl	8001e1c <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b6a:	e00a      	b.n	8004b82 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b6c:	f7fd f956 	bl	8001e1c <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d901      	bls.n	8004b82 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	e0b5      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b82:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1ee      	bne.n	8004b6c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b8e:	7dfb      	ldrb	r3, [r7, #23]
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b94:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b98:	4a38      	ldr	r2, [pc, #224]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b9e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699b      	ldr	r3, [r3, #24]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f000 80a1 	beq.w	8004cec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004baa:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f003 030c 	and.w	r3, r3, #12
 8004bb2:	2b08      	cmp	r3, #8
 8004bb4:	d05c      	beq.n	8004c70 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	699b      	ldr	r3, [r3, #24]
 8004bba:	2b02      	cmp	r3, #2
 8004bbc:	d141      	bne.n	8004c42 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bbe:	4b31      	ldr	r3, [pc, #196]	; (8004c84 <HAL_RCC_OscConfig+0x478>)
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bc4:	f7fd f92a 	bl	8001e1c <HAL_GetTick>
 8004bc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bca:	e008      	b.n	8004bde <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bcc:	f7fd f926 	bl	8001e1c <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	2b02      	cmp	r3, #2
 8004bd8:	d901      	bls.n	8004bde <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004bda:	2303      	movs	r3, #3
 8004bdc:	e087      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bde:	4b27      	ldr	r3, [pc, #156]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d1f0      	bne.n	8004bcc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69da      	ldr	r2, [r3, #28]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
 8004bf2:	431a      	orrs	r2, r3
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	019b      	lsls	r3, r3, #6
 8004bfa:	431a      	orrs	r2, r3
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c00:	085b      	lsrs	r3, r3, #1
 8004c02:	3b01      	subs	r3, #1
 8004c04:	041b      	lsls	r3, r3, #16
 8004c06:	431a      	orrs	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c0c:	061b      	lsls	r3, r3, #24
 8004c0e:	491b      	ldr	r1, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004c10:	4313      	orrs	r3, r2
 8004c12:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c14:	4b1b      	ldr	r3, [pc, #108]	; (8004c84 <HAL_RCC_OscConfig+0x478>)
 8004c16:	2201      	movs	r2, #1
 8004c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c1a:	f7fd f8ff 	bl	8001e1c <HAL_GetTick>
 8004c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c20:	e008      	b.n	8004c34 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c22:	f7fd f8fb 	bl	8001e1c <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e05c      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c34:	4b11      	ldr	r3, [pc, #68]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <HAL_RCC_OscConfig+0x416>
 8004c40:	e054      	b.n	8004cec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_RCC_OscConfig+0x478>)
 8004c44:	2200      	movs	r2, #0
 8004c46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c48:	f7fd f8e8 	bl	8001e1c <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fd f8e4 	bl	8001e1c <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e045      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c62:	4b06      	ldr	r3, [pc, #24]	; (8004c7c <HAL_RCC_OscConfig+0x470>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f0      	bne.n	8004c50 <HAL_RCC_OscConfig+0x444>
 8004c6e:	e03d      	b.n	8004cec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	699b      	ldr	r3, [r3, #24]
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e038      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
 8004c7c:	40023800 	.word	0x40023800
 8004c80:	40007000 	.word	0x40007000
 8004c84:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c88:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <HAL_RCC_OscConfig+0x4ec>)
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d028      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d121      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d11a      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cb8:	4013      	ands	r3, r2
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004cbe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d111      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cce:	085b      	lsrs	r3, r3, #1
 8004cd0:	3b01      	subs	r3, #1
 8004cd2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d107      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ce4:	429a      	cmp	r2, r3
 8004ce6:	d001      	beq.n	8004cec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ce8:	2301      	movs	r3, #1
 8004cea:	e000      	b.n	8004cee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3718      	adds	r7, #24
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	40023800 	.word	0x40023800

08004cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0cc      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004d10:	4b68      	ldr	r3, [pc, #416]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0307 	and.w	r3, r3, #7
 8004d18:	683a      	ldr	r2, [r7, #0]
 8004d1a:	429a      	cmp	r2, r3
 8004d1c:	d90c      	bls.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d1e:	4b65      	ldr	r3, [pc, #404]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	b2d2      	uxtb	r2, r2
 8004d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d26:	4b63      	ldr	r3, [pc, #396]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d001      	beq.n	8004d38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e0b8      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0302 	and.w	r3, r3, #2
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d020      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 0304 	and.w	r3, r3, #4
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d005      	beq.n	8004d5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d50:	4b59      	ldr	r3, [pc, #356]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d52:	689b      	ldr	r3, [r3, #8]
 8004d54:	4a58      	ldr	r2, [pc, #352]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d56:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d5a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f003 0308 	and.w	r3, r3, #8
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d68:	4b53      	ldr	r3, [pc, #332]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	4a52      	ldr	r2, [pc, #328]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d74:	4b50      	ldr	r3, [pc, #320]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d76:	689b      	ldr	r3, [r3, #8]
 8004d78:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	494d      	ldr	r1, [pc, #308]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d82:	4313      	orrs	r3, r2
 8004d84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f003 0301 	and.w	r3, r3, #1
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d044      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d107      	bne.n	8004daa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d9a:	4b47      	ldr	r3, [pc, #284]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d119      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004da6:	2301      	movs	r3, #1
 8004da8:	e07f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	2b02      	cmp	r3, #2
 8004db0:	d003      	beq.n	8004dba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d107      	bne.n	8004dca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d109      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	e06f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004dca:	4b3b      	ldr	r3, [pc, #236]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0302 	and.w	r3, r3, #2
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e067      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dda:	4b37      	ldr	r3, [pc, #220]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ddc:	689b      	ldr	r3, [r3, #8]
 8004dde:	f023 0203 	bic.w	r2, r3, #3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	4934      	ldr	r1, [pc, #208]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004de8:	4313      	orrs	r3, r2
 8004dea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dec:	f7fd f816 	bl	8001e1c <HAL_GetTick>
 8004df0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	e00a      	b.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004df4:	f7fd f812 	bl	8001e1c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e04f      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e0a:	4b2b      	ldr	r3, [pc, #172]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 020c 	and.w	r2, r3, #12
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	009b      	lsls	r3, r3, #2
 8004e18:	429a      	cmp	r2, r3
 8004e1a:	d1eb      	bne.n	8004df4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004e1c:	4b25      	ldr	r3, [pc, #148]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0307 	and.w	r3, r3, #7
 8004e24:	683a      	ldr	r2, [r7, #0]
 8004e26:	429a      	cmp	r2, r3
 8004e28:	d20c      	bcs.n	8004e44 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e2a:	4b22      	ldr	r3, [pc, #136]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e2c:	683a      	ldr	r2, [r7, #0]
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e32:	4b20      	ldr	r3, [pc, #128]	; (8004eb4 <HAL_RCC_ClockConfig+0x1b8>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	429a      	cmp	r2, r3
 8004e3e:	d001      	beq.n	8004e44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e032      	b.n	8004eaa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d008      	beq.n	8004e62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e50:	4b19      	ldr	r3, [pc, #100]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4916      	ldr	r1, [pc, #88]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f003 0308 	and.w	r3, r3, #8
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d009      	beq.n	8004e82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e6e:	4b12      	ldr	r3, [pc, #72]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	691b      	ldr	r3, [r3, #16]
 8004e7a:	00db      	lsls	r3, r3, #3
 8004e7c:	490e      	ldr	r1, [pc, #56]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e82:	f000 f821 	bl	8004ec8 <HAL_RCC_GetSysClockFreq>
 8004e86:	4602      	mov	r2, r0
 8004e88:	4b0b      	ldr	r3, [pc, #44]	; (8004eb8 <HAL_RCC_ClockConfig+0x1bc>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	091b      	lsrs	r3, r3, #4
 8004e8e:	f003 030f 	and.w	r3, r3, #15
 8004e92:	490a      	ldr	r1, [pc, #40]	; (8004ebc <HAL_RCC_ClockConfig+0x1c0>)
 8004e94:	5ccb      	ldrb	r3, [r1, r3]
 8004e96:	fa22 f303 	lsr.w	r3, r2, r3
 8004e9a:	4a09      	ldr	r2, [pc, #36]	; (8004ec0 <HAL_RCC_ClockConfig+0x1c4>)
 8004e9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e9e:	4b09      	ldr	r3, [pc, #36]	; (8004ec4 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7fc ff76 	bl	8001d94 <HAL_InitTick>

  return HAL_OK;
 8004ea8:	2300      	movs	r3, #0
}
 8004eaa:	4618      	mov	r0, r3
 8004eac:	3710      	adds	r7, #16
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}
 8004eb2:	bf00      	nop
 8004eb4:	40023c00 	.word	0x40023c00
 8004eb8:	40023800 	.word	0x40023800
 8004ebc:	08006950 	.word	0x08006950
 8004ec0:	20000004 	.word	0x20000004
 8004ec4:	20000008 	.word	0x20000008

08004ec8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ecc:	b090      	sub	sp, #64	; 0x40
 8004ece:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004ed8:	2300      	movs	r3, #0
 8004eda:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004edc:	2300      	movs	r3, #0
 8004ede:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ee0:	4b59      	ldr	r3, [pc, #356]	; (8005048 <HAL_RCC_GetSysClockFreq+0x180>)
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f003 030c 	and.w	r3, r3, #12
 8004ee8:	2b08      	cmp	r3, #8
 8004eea:	d00d      	beq.n	8004f08 <HAL_RCC_GetSysClockFreq+0x40>
 8004eec:	2b08      	cmp	r3, #8
 8004eee:	f200 80a1 	bhi.w	8005034 <HAL_RCC_GetSysClockFreq+0x16c>
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d002      	beq.n	8004efc <HAL_RCC_GetSysClockFreq+0x34>
 8004ef6:	2b04      	cmp	r3, #4
 8004ef8:	d003      	beq.n	8004f02 <HAL_RCC_GetSysClockFreq+0x3a>
 8004efa:	e09b      	b.n	8005034 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004efc:	4b53      	ldr	r3, [pc, #332]	; (800504c <HAL_RCC_GetSysClockFreq+0x184>)
 8004efe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f00:	e09b      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f02:	4b53      	ldr	r3, [pc, #332]	; (8005050 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f06:	e098      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f08:	4b4f      	ldr	r3, [pc, #316]	; (8005048 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f12:	4b4d      	ldr	r3, [pc, #308]	; (8005048 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d028      	beq.n	8004f70 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f1e:	4b4a      	ldr	r3, [pc, #296]	; (8005048 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	099b      	lsrs	r3, r3, #6
 8004f24:	2200      	movs	r2, #0
 8004f26:	623b      	str	r3, [r7, #32]
 8004f28:	627a      	str	r2, [r7, #36]	; 0x24
 8004f2a:	6a3b      	ldr	r3, [r7, #32]
 8004f2c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f30:	2100      	movs	r1, #0
 8004f32:	4b47      	ldr	r3, [pc, #284]	; (8005050 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f34:	fb03 f201 	mul.w	r2, r3, r1
 8004f38:	2300      	movs	r3, #0
 8004f3a:	fb00 f303 	mul.w	r3, r0, r3
 8004f3e:	4413      	add	r3, r2
 8004f40:	4a43      	ldr	r2, [pc, #268]	; (8005050 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f42:	fba0 1202 	umull	r1, r2, r0, r2
 8004f46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f48:	460a      	mov	r2, r1
 8004f4a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f4e:	4413      	add	r3, r2
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f54:	2200      	movs	r2, #0
 8004f56:	61bb      	str	r3, [r7, #24]
 8004f58:	61fa      	str	r2, [r7, #28]
 8004f5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f5e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f62:	f7fb fdff 	bl	8000b64 <__aeabi_uldivmod>
 8004f66:	4602      	mov	r2, r0
 8004f68:	460b      	mov	r3, r1
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f6e:	e053      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f70:	4b35      	ldr	r3, [pc, #212]	; (8005048 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	099b      	lsrs	r3, r3, #6
 8004f76:	2200      	movs	r2, #0
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	617a      	str	r2, [r7, #20]
 8004f7c:	693b      	ldr	r3, [r7, #16]
 8004f7e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f82:	f04f 0b00 	mov.w	fp, #0
 8004f86:	4652      	mov	r2, sl
 8004f88:	465b      	mov	r3, fp
 8004f8a:	f04f 0000 	mov.w	r0, #0
 8004f8e:	f04f 0100 	mov.w	r1, #0
 8004f92:	0159      	lsls	r1, r3, #5
 8004f94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f98:	0150      	lsls	r0, r2, #5
 8004f9a:	4602      	mov	r2, r0
 8004f9c:	460b      	mov	r3, r1
 8004f9e:	ebb2 080a 	subs.w	r8, r2, sl
 8004fa2:	eb63 090b 	sbc.w	r9, r3, fp
 8004fa6:	f04f 0200 	mov.w	r2, #0
 8004faa:	f04f 0300 	mov.w	r3, #0
 8004fae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fb2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fb6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fba:	ebb2 0408 	subs.w	r4, r2, r8
 8004fbe:	eb63 0509 	sbc.w	r5, r3, r9
 8004fc2:	f04f 0200 	mov.w	r2, #0
 8004fc6:	f04f 0300 	mov.w	r3, #0
 8004fca:	00eb      	lsls	r3, r5, #3
 8004fcc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fd0:	00e2      	lsls	r2, r4, #3
 8004fd2:	4614      	mov	r4, r2
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	eb14 030a 	adds.w	r3, r4, sl
 8004fda:	603b      	str	r3, [r7, #0]
 8004fdc:	eb45 030b 	adc.w	r3, r5, fp
 8004fe0:	607b      	str	r3, [r7, #4]
 8004fe2:	f04f 0200 	mov.w	r2, #0
 8004fe6:	f04f 0300 	mov.w	r3, #0
 8004fea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004fee:	4629      	mov	r1, r5
 8004ff0:	028b      	lsls	r3, r1, #10
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ff8:	4621      	mov	r1, r4
 8004ffa:	028a      	lsls	r2, r1, #10
 8004ffc:	4610      	mov	r0, r2
 8004ffe:	4619      	mov	r1, r3
 8005000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005002:	2200      	movs	r2, #0
 8005004:	60bb      	str	r3, [r7, #8]
 8005006:	60fa      	str	r2, [r7, #12]
 8005008:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800500c:	f7fb fdaa 	bl	8000b64 <__aeabi_uldivmod>
 8005010:	4602      	mov	r2, r0
 8005012:	460b      	mov	r3, r1
 8005014:	4613      	mov	r3, r2
 8005016:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005018:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCC_GetSysClockFreq+0x180>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	3301      	adds	r3, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005028:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800502a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005032:	e002      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005034:	4b05      	ldr	r3, [pc, #20]	; (800504c <HAL_RCC_GetSysClockFreq+0x184>)
 8005036:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800503c:	4618      	mov	r0, r3
 800503e:	3740      	adds	r7, #64	; 0x40
 8005040:	46bd      	mov	sp, r7
 8005042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	00f42400 	.word	0x00f42400
 8005050:	018cba80 	.word	0x018cba80

08005054 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005054:	b480      	push	{r7}
 8005056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005058:	4b03      	ldr	r3, [pc, #12]	; (8005068 <HAL_RCC_GetHCLKFreq+0x14>)
 800505a:	681b      	ldr	r3, [r3, #0]
}
 800505c:	4618      	mov	r0, r3
 800505e:	46bd      	mov	sp, r7
 8005060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	20000004 	.word	0x20000004

0800506c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800506c:	b580      	push	{r7, lr}
 800506e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005070:	f7ff fff0 	bl	8005054 <HAL_RCC_GetHCLKFreq>
 8005074:	4602      	mov	r2, r0
 8005076:	4b05      	ldr	r3, [pc, #20]	; (800508c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	0a9b      	lsrs	r3, r3, #10
 800507c:	f003 0307 	and.w	r3, r3, #7
 8005080:	4903      	ldr	r1, [pc, #12]	; (8005090 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005082:	5ccb      	ldrb	r3, [r1, r3]
 8005084:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005088:	4618      	mov	r0, r3
 800508a:	bd80      	pop	{r7, pc}
 800508c:	40023800 	.word	0x40023800
 8005090:	08006960 	.word	0x08006960

08005094 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005094:	b580      	push	{r7, lr}
 8005096:	b086      	sub	sp, #24
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f003 0301 	and.w	r3, r3, #1
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d105      	bne.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d035      	beq.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80050bc:	4b62      	ldr	r3, [pc, #392]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050be:	2200      	movs	r2, #0
 80050c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050c2:	f7fc feab 	bl	8001e1c <HAL_GetTick>
 80050c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050c8:	e008      	b.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050ca:	f7fc fea7 	bl	8001e1c <HAL_GetTick>
 80050ce:	4602      	mov	r2, r0
 80050d0:	697b      	ldr	r3, [r7, #20]
 80050d2:	1ad3      	subs	r3, r2, r3
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d901      	bls.n	80050dc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d8:	2303      	movs	r3, #3
 80050da:	e0b0      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80050dc:	4b5b      	ldr	r3, [pc, #364]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d1f0      	bne.n	80050ca <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	019a      	lsls	r2, r3, #6
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	071b      	lsls	r3, r3, #28
 80050f4:	4955      	ldr	r1, [pc, #340]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f6:	4313      	orrs	r3, r2
 80050f8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050fc:	4b52      	ldr	r3, [pc, #328]	; (8005248 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005102:	f7fc fe8b 	bl	8001e1c <HAL_GetTick>
 8005106:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800510a:	f7fc fe87 	bl	8001e1c <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e090      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800511c:	4b4b      	ldr	r3, [pc, #300]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 0302 	and.w	r3, r3, #2
 8005130:	2b00      	cmp	r3, #0
 8005132:	f000 8083 	beq.w	800523c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005136:	2300      	movs	r3, #0
 8005138:	60fb      	str	r3, [r7, #12]
 800513a:	4b44      	ldr	r3, [pc, #272]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800513c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513e:	4a43      	ldr	r2, [pc, #268]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005140:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005144:	6413      	str	r3, [r2, #64]	; 0x40
 8005146:	4b41      	ldr	r3, [pc, #260]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005152:	4b3f      	ldr	r3, [pc, #252]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a3e      	ldr	r2, [pc, #248]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005158:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800515c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800515e:	f7fc fe5d 	bl	8001e1c <HAL_GetTick>
 8005162:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005164:	e008      	b.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005166:	f7fc fe59 	bl	8001e1c <HAL_GetTick>
 800516a:	4602      	mov	r2, r0
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad3      	subs	r3, r2, r3
 8005170:	2b02      	cmp	r3, #2
 8005172:	d901      	bls.n	8005178 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005174:	2303      	movs	r3, #3
 8005176:	e062      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005178:	4b35      	ldr	r3, [pc, #212]	; (8005250 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005180:	2b00      	cmp	r3, #0
 8005182:	d0f0      	beq.n	8005166 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005184:	4b31      	ldr	r3, [pc, #196]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d02f      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	429a      	cmp	r2, r3
 80051a0:	d028      	beq.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80051a2:	4b2a      	ldr	r3, [pc, #168]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051aa:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80051ac:	4b29      	ldr	r3, [pc, #164]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80051b2:	4b28      	ldr	r3, [pc, #160]	; (8005254 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80051b4:	2200      	movs	r2, #0
 80051b6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80051b8:	4a24      	ldr	r2, [pc, #144]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80051be:	4b23      	ldr	r3, [pc, #140]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d114      	bne.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80051ca:	f7fc fe27 	bl	8001e1c <HAL_GetTick>
 80051ce:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051d0:	e00a      	b.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051d2:	f7fc fe23 	bl	8001e1c <HAL_GetTick>
 80051d6:	4602      	mov	r2, r0
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	1ad3      	subs	r3, r2, r3
 80051dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80051e0:	4293      	cmp	r3, r2
 80051e2:	d901      	bls.n	80051e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e02a      	b.n	800523e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d0ee      	beq.n	80051d2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	68db      	ldr	r3, [r3, #12]
 80051f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051fc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005200:	d10d      	bne.n	800521e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005202:	4b12      	ldr	r3, [pc, #72]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	68db      	ldr	r3, [r3, #12]
 800520e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005216:	490d      	ldr	r1, [pc, #52]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005218:	4313      	orrs	r3, r2
 800521a:	608b      	str	r3, [r1, #8]
 800521c:	e005      	b.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800521e:	4b0b      	ldr	r3, [pc, #44]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	4a0a      	ldr	r2, [pc, #40]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005224:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005228:	6093      	str	r3, [r2, #8]
 800522a:	4b08      	ldr	r3, [pc, #32]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800522c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	68db      	ldr	r3, [r3, #12]
 8005232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005236:	4905      	ldr	r1, [pc, #20]	; (800524c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005238:	4313      	orrs	r3, r2
 800523a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800523c:	2300      	movs	r3, #0
}
 800523e:	4618      	mov	r0, r3
 8005240:	3718      	adds	r7, #24
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	42470068 	.word	0x42470068
 800524c:	40023800 	.word	0x40023800
 8005250:	40007000 	.word	0x40007000
 8005254:	42470e40 	.word	0x42470e40

08005258 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005258:	b480      	push	{r7}
 800525a:	b087      	sub	sp, #28
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005260:	2300      	movs	r3, #0
 8005262:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005268:	2300      	movs	r3, #0
 800526a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800526c:	2300      	movs	r3, #0
 800526e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2b01      	cmp	r3, #1
 8005274:	d13e      	bne.n	80052f4 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005276:	4b23      	ldr	r3, [pc, #140]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800527e:	60fb      	str	r3, [r7, #12]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d005      	beq.n	8005292 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2b01      	cmp	r3, #1
 800528a:	d12f      	bne.n	80052ec <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800528c:	4b1e      	ldr	r3, [pc, #120]	; (8005308 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800528e:	617b      	str	r3, [r7, #20]
          break;
 8005290:	e02f      	b.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005292:	4b1c      	ldr	r3, [pc, #112]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800529a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800529e:	d108      	bne.n	80052b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052a0:	4b18      	ldr	r3, [pc, #96]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052a8:	4a18      	ldr	r2, [pc, #96]	; (800530c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80052aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80052ae:	613b      	str	r3, [r7, #16]
 80052b0:	e007      	b.n	80052c2 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80052b2:	4b14      	ldr	r3, [pc, #80]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052ba:	4a15      	ldr	r2, [pc, #84]	; (8005310 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80052bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c0:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80052c2:	4b10      	ldr	r3, [pc, #64]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052c8:	099b      	lsrs	r3, r3, #6
 80052ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80052ce:	693b      	ldr	r3, [r7, #16]
 80052d0:	fb02 f303 	mul.w	r3, r2, r3
 80052d4:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80052d6:	4b0b      	ldr	r3, [pc, #44]	; (8005304 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80052d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052dc:	0f1b      	lsrs	r3, r3, #28
 80052de:	f003 0307 	and.w	r3, r3, #7
 80052e2:	68ba      	ldr	r2, [r7, #8]
 80052e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052e8:	617b      	str	r3, [r7, #20]
          break;
 80052ea:	e002      	b.n	80052f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	617b      	str	r3, [r7, #20]
          break;
 80052f0:	bf00      	nop
        }
      }
      break;
 80052f2:	bf00      	nop
    }
  }
  return frequency;
 80052f4:	697b      	ldr	r3, [r7, #20]
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	371c      	adds	r7, #28
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800
 8005308:	00bb8000 	.word	0x00bb8000
 800530c:	018cba80 	.word	0x018cba80
 8005310:	00f42400 	.word	0x00f42400

08005314 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b082      	sub	sp, #8
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d101      	bne.n	8005326 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005322:	2301      	movs	r3, #1
 8005324:	e041      	b.n	80053aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800532c:	b2db      	uxtb	r3, r3
 800532e:	2b00      	cmp	r3, #0
 8005330:	d106      	bne.n	8005340 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f7fc fc5c 	bl	8001bf8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2202      	movs	r2, #2
 8005344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	3304      	adds	r3, #4
 8005350:	4619      	mov	r1, r3
 8005352:	4610      	mov	r0, r2
 8005354:	f000 f9ce 	bl	80056f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2201      	movs	r2, #1
 8005364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2201      	movs	r2, #1
 8005374:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2201      	movs	r2, #1
 800537c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3708      	adds	r7, #8
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
	...

080053b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d001      	beq.n	80053cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e04e      	b.n	800546a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	2202      	movs	r2, #2
 80053d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	68da      	ldr	r2, [r3, #12]
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	f042 0201 	orr.w	r2, r2, #1
 80053e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a23      	ldr	r2, [pc, #140]	; (8005478 <HAL_TIM_Base_Start_IT+0xc4>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d022      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053f6:	d01d      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a1f      	ldr	r2, [pc, #124]	; (800547c <HAL_TIM_Base_Start_IT+0xc8>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d018      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a1e      	ldr	r2, [pc, #120]	; (8005480 <HAL_TIM_Base_Start_IT+0xcc>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d013      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a1c      	ldr	r2, [pc, #112]	; (8005484 <HAL_TIM_Base_Start_IT+0xd0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d00e      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a1b      	ldr	r2, [pc, #108]	; (8005488 <HAL_TIM_Base_Start_IT+0xd4>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d009      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_TIM_Base_Start_IT+0xd8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d004      	beq.n	8005434 <HAL_TIM_Base_Start_IT+0x80>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a18      	ldr	r2, [pc, #96]	; (8005490 <HAL_TIM_Base_Start_IT+0xdc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d111      	bne.n	8005458 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f003 0307 	and.w	r3, r3, #7
 800543e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2b06      	cmp	r3, #6
 8005444:	d010      	beq.n	8005468 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0201 	orr.w	r2, r2, #1
 8005454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005456:	e007      	b.n	8005468 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	f042 0201 	orr.w	r2, r2, #1
 8005466:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3714      	adds	r7, #20
 800546e:	46bd      	mov	sp, r7
 8005470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005474:	4770      	bx	lr
 8005476:	bf00      	nop
 8005478:	40010000 	.word	0x40010000
 800547c:	40000400 	.word	0x40000400
 8005480:	40000800 	.word	0x40000800
 8005484:	40000c00 	.word	0x40000c00
 8005488:	40010400 	.word	0x40010400
 800548c:	40014000 	.word	0x40014000
 8005490:	40001800 	.word	0x40001800

08005494 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b082      	sub	sp, #8
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	691b      	ldr	r3, [r3, #16]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b02      	cmp	r3, #2
 80054a8:	d122      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68db      	ldr	r3, [r3, #12]
 80054b0:	f003 0302 	and.w	r3, r3, #2
 80054b4:	2b02      	cmp	r3, #2
 80054b6:	d11b      	bne.n	80054f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f06f 0202 	mvn.w	r2, #2
 80054c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	f003 0303 	and.w	r3, r3, #3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d003      	beq.n	80054de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 f8ee 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 80054dc:	e005      	b.n	80054ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f8e0 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f000 f8f1 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2200      	movs	r2, #0
 80054ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	f003 0304 	and.w	r3, r3, #4
 80054fa:	2b04      	cmp	r3, #4
 80054fc:	d122      	bne.n	8005544 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	f003 0304 	and.w	r3, r3, #4
 8005508:	2b04      	cmp	r3, #4
 800550a:	d11b      	bne.n	8005544 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f06f 0204 	mvn.w	r2, #4
 8005514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2202      	movs	r2, #2
 800551a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005526:	2b00      	cmp	r3, #0
 8005528:	d003      	beq.n	8005532 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 f8c4 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 8005530:	e005      	b.n	800553e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f8b6 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f000 f8c7 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	f003 0308 	and.w	r3, r3, #8
 800554e:	2b08      	cmp	r3, #8
 8005550:	d122      	bne.n	8005598 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68db      	ldr	r3, [r3, #12]
 8005558:	f003 0308 	and.w	r3, r3, #8
 800555c:	2b08      	cmp	r3, #8
 800555e:	d11b      	bne.n	8005598 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f06f 0208 	mvn.w	r2, #8
 8005568:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2204      	movs	r2, #4
 800556e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	f003 0303 	and.w	r3, r3, #3
 800557a:	2b00      	cmp	r3, #0
 800557c:	d003      	beq.n	8005586 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800557e:	6878      	ldr	r0, [r7, #4]
 8005580:	f000 f89a 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 8005584:	e005      	b.n	8005592 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f88c 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f89d 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	2200      	movs	r2, #0
 8005596:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691b      	ldr	r3, [r3, #16]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b10      	cmp	r3, #16
 80055a4:	d122      	bne.n	80055ec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d11b      	bne.n	80055ec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f06f 0210 	mvn.w	r2, #16
 80055bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2208      	movs	r2, #8
 80055c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d003      	beq.n	80055da <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 f870 	bl	80056b8 <HAL_TIM_IC_CaptureCallback>
 80055d8:	e005      	b.n	80055e6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f862 	bl	80056a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f000 f873 	bl	80056cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2200      	movs	r2, #0
 80055ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d10e      	bne.n	8005618 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	f003 0301 	and.w	r3, r3, #1
 8005604:	2b01      	cmp	r3, #1
 8005606:	d107      	bne.n	8005618 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	f06f 0201 	mvn.w	r2, #1
 8005610:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7fc f918 	bl	8001848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	691b      	ldr	r3, [r3, #16]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d10e      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	68db      	ldr	r3, [r3, #12]
 800562c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005630:	2b80      	cmp	r3, #128	; 0x80
 8005632:	d107      	bne.n	8005644 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800563c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f902 	bl	8005848 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564e:	2b40      	cmp	r3, #64	; 0x40
 8005650:	d10e      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d107      	bne.n	8005670 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005668:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800566a:	6878      	ldr	r0, [r7, #4]
 800566c:	f000 f838 	bl	80056e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	691b      	ldr	r3, [r3, #16]
 8005676:	f003 0320 	and.w	r3, r3, #32
 800567a:	2b20      	cmp	r3, #32
 800567c:	d10e      	bne.n	800569c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	68db      	ldr	r3, [r3, #12]
 8005684:	f003 0320 	and.w	r3, r3, #32
 8005688:	2b20      	cmp	r3, #32
 800568a:	d107      	bne.n	800569c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f06f 0220 	mvn.w	r2, #32
 8005694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 f8cc 	bl	8005834 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800569c:	bf00      	nop
 800569e:	3708      	adds	r7, #8
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056ac:	bf00      	nop
 80056ae:	370c      	adds	r7, #12
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr

080056b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80056b8:	b480      	push	{r7}
 80056ba:	b083      	sub	sp, #12
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80056f4:	b480      	push	{r7}
 80056f6:	b085      	sub	sp, #20
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
 80056fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	4a40      	ldr	r2, [pc, #256]	; (8005808 <TIM_Base_SetConfig+0x114>)
 8005708:	4293      	cmp	r3, r2
 800570a:	d013      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005712:	d00f      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	4a3d      	ldr	r2, [pc, #244]	; (800580c <TIM_Base_SetConfig+0x118>)
 8005718:	4293      	cmp	r3, r2
 800571a:	d00b      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	4a3c      	ldr	r2, [pc, #240]	; (8005810 <TIM_Base_SetConfig+0x11c>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d007      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	4a3b      	ldr	r2, [pc, #236]	; (8005814 <TIM_Base_SetConfig+0x120>)
 8005728:	4293      	cmp	r3, r2
 800572a:	d003      	beq.n	8005734 <TIM_Base_SetConfig+0x40>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a3a      	ldr	r2, [pc, #232]	; (8005818 <TIM_Base_SetConfig+0x124>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d108      	bne.n	8005746 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800573a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	685b      	ldr	r3, [r3, #4]
 8005740:	68fa      	ldr	r2, [r7, #12]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	4a2f      	ldr	r2, [pc, #188]	; (8005808 <TIM_Base_SetConfig+0x114>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d02b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005754:	d027      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	4a2c      	ldr	r2, [pc, #176]	; (800580c <TIM_Base_SetConfig+0x118>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d023      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4a2b      	ldr	r2, [pc, #172]	; (8005810 <TIM_Base_SetConfig+0x11c>)
 8005762:	4293      	cmp	r3, r2
 8005764:	d01f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	4a2a      	ldr	r2, [pc, #168]	; (8005814 <TIM_Base_SetConfig+0x120>)
 800576a:	4293      	cmp	r3, r2
 800576c:	d01b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a29      	ldr	r2, [pc, #164]	; (8005818 <TIM_Base_SetConfig+0x124>)
 8005772:	4293      	cmp	r3, r2
 8005774:	d017      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	4a28      	ldr	r2, [pc, #160]	; (800581c <TIM_Base_SetConfig+0x128>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d013      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a27      	ldr	r2, [pc, #156]	; (8005820 <TIM_Base_SetConfig+0x12c>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d00f      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	4a26      	ldr	r2, [pc, #152]	; (8005824 <TIM_Base_SetConfig+0x130>)
 800578a:	4293      	cmp	r3, r2
 800578c:	d00b      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a25      	ldr	r2, [pc, #148]	; (8005828 <TIM_Base_SetConfig+0x134>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d007      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	4a24      	ldr	r2, [pc, #144]	; (800582c <TIM_Base_SetConfig+0x138>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d003      	beq.n	80057a6 <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a23      	ldr	r2, [pc, #140]	; (8005830 <TIM_Base_SetConfig+0x13c>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d108      	bne.n	80057b8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	4313      	orrs	r3, r2
 80057c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80057d4:	683b      	ldr	r3, [r7, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	4a0a      	ldr	r2, [pc, #40]	; (8005808 <TIM_Base_SetConfig+0x114>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d003      	beq.n	80057ec <TIM_Base_SetConfig+0xf8>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	4a0c      	ldr	r2, [pc, #48]	; (8005818 <TIM_Base_SetConfig+0x124>)
 80057e8:	4293      	cmp	r3, r2
 80057ea:	d103      	bne.n	80057f4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2201      	movs	r2, #1
 80057f8:	615a      	str	r2, [r3, #20]
}
 80057fa:	bf00      	nop
 80057fc:	3714      	adds	r7, #20
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr
 8005806:	bf00      	nop
 8005808:	40010000 	.word	0x40010000
 800580c:	40000400 	.word	0x40000400
 8005810:	40000800 	.word	0x40000800
 8005814:	40000c00 	.word	0x40000c00
 8005818:	40010400 	.word	0x40010400
 800581c:	40014000 	.word	0x40014000
 8005820:	40014400 	.word	0x40014400
 8005824:	40014800 	.word	0x40014800
 8005828:	40001800 	.word	0x40001800
 800582c:	40001c00 	.word	0x40001c00
 8005830:	40002000 	.word	0x40002000

08005834 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <memset>:
 800585c:	4402      	add	r2, r0
 800585e:	4603      	mov	r3, r0
 8005860:	4293      	cmp	r3, r2
 8005862:	d100      	bne.n	8005866 <memset+0xa>
 8005864:	4770      	bx	lr
 8005866:	f803 1b01 	strb.w	r1, [r3], #1
 800586a:	e7f9      	b.n	8005860 <memset+0x4>

0800586c <__libc_init_array>:
 800586c:	b570      	push	{r4, r5, r6, lr}
 800586e:	4d0d      	ldr	r5, [pc, #52]	; (80058a4 <__libc_init_array+0x38>)
 8005870:	4c0d      	ldr	r4, [pc, #52]	; (80058a8 <__libc_init_array+0x3c>)
 8005872:	1b64      	subs	r4, r4, r5
 8005874:	10a4      	asrs	r4, r4, #2
 8005876:	2600      	movs	r6, #0
 8005878:	42a6      	cmp	r6, r4
 800587a:	d109      	bne.n	8005890 <__libc_init_array+0x24>
 800587c:	4d0b      	ldr	r5, [pc, #44]	; (80058ac <__libc_init_array+0x40>)
 800587e:	4c0c      	ldr	r4, [pc, #48]	; (80058b0 <__libc_init_array+0x44>)
 8005880:	f001 f85a 	bl	8006938 <_init>
 8005884:	1b64      	subs	r4, r4, r5
 8005886:	10a4      	asrs	r4, r4, #2
 8005888:	2600      	movs	r6, #0
 800588a:	42a6      	cmp	r6, r4
 800588c:	d105      	bne.n	800589a <__libc_init_array+0x2e>
 800588e:	bd70      	pop	{r4, r5, r6, pc}
 8005890:	f855 3b04 	ldr.w	r3, [r5], #4
 8005894:	4798      	blx	r3
 8005896:	3601      	adds	r6, #1
 8005898:	e7ee      	b.n	8005878 <__libc_init_array+0xc>
 800589a:	f855 3b04 	ldr.w	r3, [r5], #4
 800589e:	4798      	blx	r3
 80058a0:	3601      	adds	r6, #1
 80058a2:	e7f2      	b.n	800588a <__libc_init_array+0x1e>
 80058a4:	08006b50 	.word	0x08006b50
 80058a8:	08006b50 	.word	0x08006b50
 80058ac:	08006b50 	.word	0x08006b50
 80058b0:	08006b54 	.word	0x08006b54
 80058b4:	00000000 	.word	0x00000000

080058b8 <sin>:
 80058b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80058ba:	ec53 2b10 	vmov	r2, r3, d0
 80058be:	4828      	ldr	r0, [pc, #160]	; (8005960 <sin+0xa8>)
 80058c0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80058c4:	4281      	cmp	r1, r0
 80058c6:	dc07      	bgt.n	80058d8 <sin+0x20>
 80058c8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8005958 <sin+0xa0>
 80058cc:	2000      	movs	r0, #0
 80058ce:	b005      	add	sp, #20
 80058d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80058d4:	f000 b910 	b.w	8005af8 <__kernel_sin>
 80058d8:	4822      	ldr	r0, [pc, #136]	; (8005964 <sin+0xac>)
 80058da:	4281      	cmp	r1, r0
 80058dc:	dd09      	ble.n	80058f2 <sin+0x3a>
 80058de:	ee10 0a10 	vmov	r0, s0
 80058e2:	4619      	mov	r1, r3
 80058e4:	f7fa fc74 	bl	80001d0 <__aeabi_dsub>
 80058e8:	ec41 0b10 	vmov	d0, r0, r1
 80058ec:	b005      	add	sp, #20
 80058ee:	f85d fb04 	ldr.w	pc, [sp], #4
 80058f2:	4668      	mov	r0, sp
 80058f4:	f000 f9c0 	bl	8005c78 <__ieee754_rem_pio2>
 80058f8:	f000 0003 	and.w	r0, r0, #3
 80058fc:	2801      	cmp	r0, #1
 80058fe:	d00c      	beq.n	800591a <sin+0x62>
 8005900:	2802      	cmp	r0, #2
 8005902:	d011      	beq.n	8005928 <sin+0x70>
 8005904:	b9f0      	cbnz	r0, 8005944 <sin+0x8c>
 8005906:	ed9d 1b02 	vldr	d1, [sp, #8]
 800590a:	ed9d 0b00 	vldr	d0, [sp]
 800590e:	2001      	movs	r0, #1
 8005910:	f000 f8f2 	bl	8005af8 <__kernel_sin>
 8005914:	ec51 0b10 	vmov	r0, r1, d0
 8005918:	e7e6      	b.n	80058e8 <sin+0x30>
 800591a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800591e:	ed9d 0b00 	vldr	d0, [sp]
 8005922:	f000 f821 	bl	8005968 <__kernel_cos>
 8005926:	e7f5      	b.n	8005914 <sin+0x5c>
 8005928:	ed9d 1b02 	vldr	d1, [sp, #8]
 800592c:	ed9d 0b00 	vldr	d0, [sp]
 8005930:	2001      	movs	r0, #1
 8005932:	f000 f8e1 	bl	8005af8 <__kernel_sin>
 8005936:	ec53 2b10 	vmov	r2, r3, d0
 800593a:	ee10 0a10 	vmov	r0, s0
 800593e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005942:	e7d1      	b.n	80058e8 <sin+0x30>
 8005944:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005948:	ed9d 0b00 	vldr	d0, [sp]
 800594c:	f000 f80c 	bl	8005968 <__kernel_cos>
 8005950:	e7f1      	b.n	8005936 <sin+0x7e>
 8005952:	bf00      	nop
 8005954:	f3af 8000 	nop.w
	...
 8005960:	3fe921fb 	.word	0x3fe921fb
 8005964:	7fefffff 	.word	0x7fefffff

08005968 <__kernel_cos>:
 8005968:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800596c:	ec57 6b10 	vmov	r6, r7, d0
 8005970:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005974:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8005978:	ed8d 1b00 	vstr	d1, [sp]
 800597c:	da07      	bge.n	800598e <__kernel_cos+0x26>
 800597e:	ee10 0a10 	vmov	r0, s0
 8005982:	4639      	mov	r1, r7
 8005984:	f7fb f876 	bl	8000a74 <__aeabi_d2iz>
 8005988:	2800      	cmp	r0, #0
 800598a:	f000 8088 	beq.w	8005a9e <__kernel_cos+0x136>
 800598e:	4632      	mov	r2, r6
 8005990:	463b      	mov	r3, r7
 8005992:	4630      	mov	r0, r6
 8005994:	4639      	mov	r1, r7
 8005996:	f7fa fdd3 	bl	8000540 <__aeabi_dmul>
 800599a:	4b51      	ldr	r3, [pc, #324]	; (8005ae0 <__kernel_cos+0x178>)
 800599c:	2200      	movs	r2, #0
 800599e:	4604      	mov	r4, r0
 80059a0:	460d      	mov	r5, r1
 80059a2:	f7fa fdcd 	bl	8000540 <__aeabi_dmul>
 80059a6:	a340      	add	r3, pc, #256	; (adr r3, 8005aa8 <__kernel_cos+0x140>)
 80059a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059ac:	4682      	mov	sl, r0
 80059ae:	468b      	mov	fp, r1
 80059b0:	4620      	mov	r0, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	f7fa fdc4 	bl	8000540 <__aeabi_dmul>
 80059b8:	a33d      	add	r3, pc, #244	; (adr r3, 8005ab0 <__kernel_cos+0x148>)
 80059ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059be:	f7fa fc09 	bl	80001d4 <__adddf3>
 80059c2:	4622      	mov	r2, r4
 80059c4:	462b      	mov	r3, r5
 80059c6:	f7fa fdbb 	bl	8000540 <__aeabi_dmul>
 80059ca:	a33b      	add	r3, pc, #236	; (adr r3, 8005ab8 <__kernel_cos+0x150>)
 80059cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d0:	f7fa fbfe 	bl	80001d0 <__aeabi_dsub>
 80059d4:	4622      	mov	r2, r4
 80059d6:	462b      	mov	r3, r5
 80059d8:	f7fa fdb2 	bl	8000540 <__aeabi_dmul>
 80059dc:	a338      	add	r3, pc, #224	; (adr r3, 8005ac0 <__kernel_cos+0x158>)
 80059de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059e2:	f7fa fbf7 	bl	80001d4 <__adddf3>
 80059e6:	4622      	mov	r2, r4
 80059e8:	462b      	mov	r3, r5
 80059ea:	f7fa fda9 	bl	8000540 <__aeabi_dmul>
 80059ee:	a336      	add	r3, pc, #216	; (adr r3, 8005ac8 <__kernel_cos+0x160>)
 80059f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059f4:	f7fa fbec 	bl	80001d0 <__aeabi_dsub>
 80059f8:	4622      	mov	r2, r4
 80059fa:	462b      	mov	r3, r5
 80059fc:	f7fa fda0 	bl	8000540 <__aeabi_dmul>
 8005a00:	a333      	add	r3, pc, #204	; (adr r3, 8005ad0 <__kernel_cos+0x168>)
 8005a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a06:	f7fa fbe5 	bl	80001d4 <__adddf3>
 8005a0a:	4622      	mov	r2, r4
 8005a0c:	462b      	mov	r3, r5
 8005a0e:	f7fa fd97 	bl	8000540 <__aeabi_dmul>
 8005a12:	4622      	mov	r2, r4
 8005a14:	462b      	mov	r3, r5
 8005a16:	f7fa fd93 	bl	8000540 <__aeabi_dmul>
 8005a1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005a1e:	4604      	mov	r4, r0
 8005a20:	460d      	mov	r5, r1
 8005a22:	4630      	mov	r0, r6
 8005a24:	4639      	mov	r1, r7
 8005a26:	f7fa fd8b 	bl	8000540 <__aeabi_dmul>
 8005a2a:	460b      	mov	r3, r1
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	4629      	mov	r1, r5
 8005a30:	4620      	mov	r0, r4
 8005a32:	f7fa fbcd 	bl	80001d0 <__aeabi_dsub>
 8005a36:	4b2b      	ldr	r3, [pc, #172]	; (8005ae4 <__kernel_cos+0x17c>)
 8005a38:	4598      	cmp	r8, r3
 8005a3a:	4606      	mov	r6, r0
 8005a3c:	460f      	mov	r7, r1
 8005a3e:	dc10      	bgt.n	8005a62 <__kernel_cos+0xfa>
 8005a40:	4602      	mov	r2, r0
 8005a42:	460b      	mov	r3, r1
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	f7fa fbc2 	bl	80001d0 <__aeabi_dsub>
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	4926      	ldr	r1, [pc, #152]	; (8005ae8 <__kernel_cos+0x180>)
 8005a50:	4602      	mov	r2, r0
 8005a52:	2000      	movs	r0, #0
 8005a54:	f7fa fbbc 	bl	80001d0 <__aeabi_dsub>
 8005a58:	ec41 0b10 	vmov	d0, r0, r1
 8005a5c:	b003      	add	sp, #12
 8005a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a62:	4b22      	ldr	r3, [pc, #136]	; (8005aec <__kernel_cos+0x184>)
 8005a64:	4920      	ldr	r1, [pc, #128]	; (8005ae8 <__kernel_cos+0x180>)
 8005a66:	4598      	cmp	r8, r3
 8005a68:	bfcc      	ite	gt
 8005a6a:	4d21      	ldrgt	r5, [pc, #132]	; (8005af0 <__kernel_cos+0x188>)
 8005a6c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8005a70:	2400      	movs	r4, #0
 8005a72:	4622      	mov	r2, r4
 8005a74:	462b      	mov	r3, r5
 8005a76:	2000      	movs	r0, #0
 8005a78:	f7fa fbaa 	bl	80001d0 <__aeabi_dsub>
 8005a7c:	4622      	mov	r2, r4
 8005a7e:	4680      	mov	r8, r0
 8005a80:	4689      	mov	r9, r1
 8005a82:	462b      	mov	r3, r5
 8005a84:	4650      	mov	r0, sl
 8005a86:	4659      	mov	r1, fp
 8005a88:	f7fa fba2 	bl	80001d0 <__aeabi_dsub>
 8005a8c:	4632      	mov	r2, r6
 8005a8e:	463b      	mov	r3, r7
 8005a90:	f7fa fb9e 	bl	80001d0 <__aeabi_dsub>
 8005a94:	4602      	mov	r2, r0
 8005a96:	460b      	mov	r3, r1
 8005a98:	4640      	mov	r0, r8
 8005a9a:	4649      	mov	r1, r9
 8005a9c:	e7da      	b.n	8005a54 <__kernel_cos+0xec>
 8005a9e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005ad8 <__kernel_cos+0x170>
 8005aa2:	e7db      	b.n	8005a5c <__kernel_cos+0xf4>
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	be8838d4 	.word	0xbe8838d4
 8005aac:	bda8fae9 	.word	0xbda8fae9
 8005ab0:	bdb4b1c4 	.word	0xbdb4b1c4
 8005ab4:	3e21ee9e 	.word	0x3e21ee9e
 8005ab8:	809c52ad 	.word	0x809c52ad
 8005abc:	3e927e4f 	.word	0x3e927e4f
 8005ac0:	19cb1590 	.word	0x19cb1590
 8005ac4:	3efa01a0 	.word	0x3efa01a0
 8005ac8:	16c15177 	.word	0x16c15177
 8005acc:	3f56c16c 	.word	0x3f56c16c
 8005ad0:	5555554c 	.word	0x5555554c
 8005ad4:	3fa55555 	.word	0x3fa55555
 8005ad8:	00000000 	.word	0x00000000
 8005adc:	3ff00000 	.word	0x3ff00000
 8005ae0:	3fe00000 	.word	0x3fe00000
 8005ae4:	3fd33332 	.word	0x3fd33332
 8005ae8:	3ff00000 	.word	0x3ff00000
 8005aec:	3fe90000 	.word	0x3fe90000
 8005af0:	3fd20000 	.word	0x3fd20000
 8005af4:	00000000 	.word	0x00000000

08005af8 <__kernel_sin>:
 8005af8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005afc:	ed2d 8b04 	vpush	{d8-d9}
 8005b00:	eeb0 8a41 	vmov.f32	s16, s2
 8005b04:	eef0 8a61 	vmov.f32	s17, s3
 8005b08:	ec55 4b10 	vmov	r4, r5, d0
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005b12:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005b16:	9001      	str	r0, [sp, #4]
 8005b18:	da06      	bge.n	8005b28 <__kernel_sin+0x30>
 8005b1a:	ee10 0a10 	vmov	r0, s0
 8005b1e:	4629      	mov	r1, r5
 8005b20:	f7fa ffa8 	bl	8000a74 <__aeabi_d2iz>
 8005b24:	2800      	cmp	r0, #0
 8005b26:	d051      	beq.n	8005bcc <__kernel_sin+0xd4>
 8005b28:	4622      	mov	r2, r4
 8005b2a:	462b      	mov	r3, r5
 8005b2c:	4620      	mov	r0, r4
 8005b2e:	4629      	mov	r1, r5
 8005b30:	f7fa fd06 	bl	8000540 <__aeabi_dmul>
 8005b34:	4682      	mov	sl, r0
 8005b36:	468b      	mov	fp, r1
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4620      	mov	r0, r4
 8005b3e:	4629      	mov	r1, r5
 8005b40:	f7fa fcfe 	bl	8000540 <__aeabi_dmul>
 8005b44:	a341      	add	r3, pc, #260	; (adr r3, 8005c4c <__kernel_sin+0x154>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	4680      	mov	r8, r0
 8005b4c:	4689      	mov	r9, r1
 8005b4e:	4650      	mov	r0, sl
 8005b50:	4659      	mov	r1, fp
 8005b52:	f7fa fcf5 	bl	8000540 <__aeabi_dmul>
 8005b56:	a33f      	add	r3, pc, #252	; (adr r3, 8005c54 <__kernel_sin+0x15c>)
 8005b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b5c:	f7fa fb38 	bl	80001d0 <__aeabi_dsub>
 8005b60:	4652      	mov	r2, sl
 8005b62:	465b      	mov	r3, fp
 8005b64:	f7fa fcec 	bl	8000540 <__aeabi_dmul>
 8005b68:	a33c      	add	r3, pc, #240	; (adr r3, 8005c5c <__kernel_sin+0x164>)
 8005b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6e:	f7fa fb31 	bl	80001d4 <__adddf3>
 8005b72:	4652      	mov	r2, sl
 8005b74:	465b      	mov	r3, fp
 8005b76:	f7fa fce3 	bl	8000540 <__aeabi_dmul>
 8005b7a:	a33a      	add	r3, pc, #232	; (adr r3, 8005c64 <__kernel_sin+0x16c>)
 8005b7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b80:	f7fa fb26 	bl	80001d0 <__aeabi_dsub>
 8005b84:	4652      	mov	r2, sl
 8005b86:	465b      	mov	r3, fp
 8005b88:	f7fa fcda 	bl	8000540 <__aeabi_dmul>
 8005b8c:	a337      	add	r3, pc, #220	; (adr r3, 8005c6c <__kernel_sin+0x174>)
 8005b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b92:	f7fa fb1f 	bl	80001d4 <__adddf3>
 8005b96:	9b01      	ldr	r3, [sp, #4]
 8005b98:	4606      	mov	r6, r0
 8005b9a:	460f      	mov	r7, r1
 8005b9c:	b9eb      	cbnz	r3, 8005bda <__kernel_sin+0xe2>
 8005b9e:	4602      	mov	r2, r0
 8005ba0:	460b      	mov	r3, r1
 8005ba2:	4650      	mov	r0, sl
 8005ba4:	4659      	mov	r1, fp
 8005ba6:	f7fa fccb 	bl	8000540 <__aeabi_dmul>
 8005baa:	a325      	add	r3, pc, #148	; (adr r3, 8005c40 <__kernel_sin+0x148>)
 8005bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bb0:	f7fa fb0e 	bl	80001d0 <__aeabi_dsub>
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	f7fa fcc2 	bl	8000540 <__aeabi_dmul>
 8005bbc:	4602      	mov	r2, r0
 8005bbe:	460b      	mov	r3, r1
 8005bc0:	4620      	mov	r0, r4
 8005bc2:	4629      	mov	r1, r5
 8005bc4:	f7fa fb06 	bl	80001d4 <__adddf3>
 8005bc8:	4604      	mov	r4, r0
 8005bca:	460d      	mov	r5, r1
 8005bcc:	ec45 4b10 	vmov	d0, r4, r5
 8005bd0:	b003      	add	sp, #12
 8005bd2:	ecbd 8b04 	vpop	{d8-d9}
 8005bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005bda:	4b1b      	ldr	r3, [pc, #108]	; (8005c48 <__kernel_sin+0x150>)
 8005bdc:	ec51 0b18 	vmov	r0, r1, d8
 8005be0:	2200      	movs	r2, #0
 8005be2:	f7fa fcad 	bl	8000540 <__aeabi_dmul>
 8005be6:	4632      	mov	r2, r6
 8005be8:	ec41 0b19 	vmov	d9, r0, r1
 8005bec:	463b      	mov	r3, r7
 8005bee:	4640      	mov	r0, r8
 8005bf0:	4649      	mov	r1, r9
 8005bf2:	f7fa fca5 	bl	8000540 <__aeabi_dmul>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	ec51 0b19 	vmov	r0, r1, d9
 8005bfe:	f7fa fae7 	bl	80001d0 <__aeabi_dsub>
 8005c02:	4652      	mov	r2, sl
 8005c04:	465b      	mov	r3, fp
 8005c06:	f7fa fc9b 	bl	8000540 <__aeabi_dmul>
 8005c0a:	ec53 2b18 	vmov	r2, r3, d8
 8005c0e:	f7fa fadf 	bl	80001d0 <__aeabi_dsub>
 8005c12:	a30b      	add	r3, pc, #44	; (adr r3, 8005c40 <__kernel_sin+0x148>)
 8005c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c18:	4606      	mov	r6, r0
 8005c1a:	460f      	mov	r7, r1
 8005c1c:	4640      	mov	r0, r8
 8005c1e:	4649      	mov	r1, r9
 8005c20:	f7fa fc8e 	bl	8000540 <__aeabi_dmul>
 8005c24:	4602      	mov	r2, r0
 8005c26:	460b      	mov	r3, r1
 8005c28:	4630      	mov	r0, r6
 8005c2a:	4639      	mov	r1, r7
 8005c2c:	f7fa fad2 	bl	80001d4 <__adddf3>
 8005c30:	4602      	mov	r2, r0
 8005c32:	460b      	mov	r3, r1
 8005c34:	4620      	mov	r0, r4
 8005c36:	4629      	mov	r1, r5
 8005c38:	f7fa faca 	bl	80001d0 <__aeabi_dsub>
 8005c3c:	e7c4      	b.n	8005bc8 <__kernel_sin+0xd0>
 8005c3e:	bf00      	nop
 8005c40:	55555549 	.word	0x55555549
 8005c44:	3fc55555 	.word	0x3fc55555
 8005c48:	3fe00000 	.word	0x3fe00000
 8005c4c:	5acfd57c 	.word	0x5acfd57c
 8005c50:	3de5d93a 	.word	0x3de5d93a
 8005c54:	8a2b9ceb 	.word	0x8a2b9ceb
 8005c58:	3e5ae5e6 	.word	0x3e5ae5e6
 8005c5c:	57b1fe7d 	.word	0x57b1fe7d
 8005c60:	3ec71de3 	.word	0x3ec71de3
 8005c64:	19c161d5 	.word	0x19c161d5
 8005c68:	3f2a01a0 	.word	0x3f2a01a0
 8005c6c:	1110f8a6 	.word	0x1110f8a6
 8005c70:	3f811111 	.word	0x3f811111
 8005c74:	00000000 	.word	0x00000000

08005c78 <__ieee754_rem_pio2>:
 8005c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c7c:	ed2d 8b02 	vpush	{d8}
 8005c80:	ec55 4b10 	vmov	r4, r5, d0
 8005c84:	4bca      	ldr	r3, [pc, #808]	; (8005fb0 <__ieee754_rem_pio2+0x338>)
 8005c86:	b08b      	sub	sp, #44	; 0x2c
 8005c88:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8005c8c:	4598      	cmp	r8, r3
 8005c8e:	4682      	mov	sl, r0
 8005c90:	9502      	str	r5, [sp, #8]
 8005c92:	dc08      	bgt.n	8005ca6 <__ieee754_rem_pio2+0x2e>
 8005c94:	2200      	movs	r2, #0
 8005c96:	2300      	movs	r3, #0
 8005c98:	ed80 0b00 	vstr	d0, [r0]
 8005c9c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8005ca0:	f04f 0b00 	mov.w	fp, #0
 8005ca4:	e028      	b.n	8005cf8 <__ieee754_rem_pio2+0x80>
 8005ca6:	4bc3      	ldr	r3, [pc, #780]	; (8005fb4 <__ieee754_rem_pio2+0x33c>)
 8005ca8:	4598      	cmp	r8, r3
 8005caa:	dc78      	bgt.n	8005d9e <__ieee754_rem_pio2+0x126>
 8005cac:	9b02      	ldr	r3, [sp, #8]
 8005cae:	4ec2      	ldr	r6, [pc, #776]	; (8005fb8 <__ieee754_rem_pio2+0x340>)
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	ee10 0a10 	vmov	r0, s0
 8005cb6:	a3b0      	add	r3, pc, #704	; (adr r3, 8005f78 <__ieee754_rem_pio2+0x300>)
 8005cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cbc:	4629      	mov	r1, r5
 8005cbe:	dd39      	ble.n	8005d34 <__ieee754_rem_pio2+0xbc>
 8005cc0:	f7fa fa86 	bl	80001d0 <__aeabi_dsub>
 8005cc4:	45b0      	cmp	r8, r6
 8005cc6:	4604      	mov	r4, r0
 8005cc8:	460d      	mov	r5, r1
 8005cca:	d01b      	beq.n	8005d04 <__ieee754_rem_pio2+0x8c>
 8005ccc:	a3ac      	add	r3, pc, #688	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x308>)
 8005cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cd2:	f7fa fa7d 	bl	80001d0 <__aeabi_dsub>
 8005cd6:	4602      	mov	r2, r0
 8005cd8:	460b      	mov	r3, r1
 8005cda:	e9ca 2300 	strd	r2, r3, [sl]
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa fa75 	bl	80001d0 <__aeabi_dsub>
 8005ce6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x308>)
 8005ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cec:	f7fa fa70 	bl	80001d0 <__aeabi_dsub>
 8005cf0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005cf4:	f04f 0b01 	mov.w	fp, #1
 8005cf8:	4658      	mov	r0, fp
 8005cfa:	b00b      	add	sp, #44	; 0x2c
 8005cfc:	ecbd 8b02 	vpop	{d8}
 8005d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d04:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f88 <__ieee754_rem_pio2+0x310>)
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	f7fa fa61 	bl	80001d0 <__aeabi_dsub>
 8005d0e:	a3a0      	add	r3, pc, #640	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x318>)
 8005d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d14:	4604      	mov	r4, r0
 8005d16:	460d      	mov	r5, r1
 8005d18:	f7fa fa5a 	bl	80001d0 <__aeabi_dsub>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	460b      	mov	r3, r1
 8005d20:	e9ca 2300 	strd	r2, r3, [sl]
 8005d24:	4620      	mov	r0, r4
 8005d26:	4629      	mov	r1, r5
 8005d28:	f7fa fa52 	bl	80001d0 <__aeabi_dsub>
 8005d2c:	a398      	add	r3, pc, #608	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x318>)
 8005d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d32:	e7db      	b.n	8005cec <__ieee754_rem_pio2+0x74>
 8005d34:	f7fa fa4e 	bl	80001d4 <__adddf3>
 8005d38:	45b0      	cmp	r8, r6
 8005d3a:	4604      	mov	r4, r0
 8005d3c:	460d      	mov	r5, r1
 8005d3e:	d016      	beq.n	8005d6e <__ieee754_rem_pio2+0xf6>
 8005d40:	a38f      	add	r3, pc, #572	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x308>)
 8005d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d46:	f7fa fa45 	bl	80001d4 <__adddf3>
 8005d4a:	4602      	mov	r2, r0
 8005d4c:	460b      	mov	r3, r1
 8005d4e:	e9ca 2300 	strd	r2, r3, [sl]
 8005d52:	4620      	mov	r0, r4
 8005d54:	4629      	mov	r1, r5
 8005d56:	f7fa fa3b 	bl	80001d0 <__aeabi_dsub>
 8005d5a:	a389      	add	r3, pc, #548	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x308>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	f7fa fa38 	bl	80001d4 <__adddf3>
 8005d64:	f04f 3bff 	mov.w	fp, #4294967295
 8005d68:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005d6c:	e7c4      	b.n	8005cf8 <__ieee754_rem_pio2+0x80>
 8005d6e:	a386      	add	r3, pc, #536	; (adr r3, 8005f88 <__ieee754_rem_pio2+0x310>)
 8005d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d74:	f7fa fa2e 	bl	80001d4 <__adddf3>
 8005d78:	a385      	add	r3, pc, #532	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x318>)
 8005d7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7e:	4604      	mov	r4, r0
 8005d80:	460d      	mov	r5, r1
 8005d82:	f7fa fa27 	bl	80001d4 <__adddf3>
 8005d86:	4602      	mov	r2, r0
 8005d88:	460b      	mov	r3, r1
 8005d8a:	e9ca 2300 	strd	r2, r3, [sl]
 8005d8e:	4620      	mov	r0, r4
 8005d90:	4629      	mov	r1, r5
 8005d92:	f7fa fa1d 	bl	80001d0 <__aeabi_dsub>
 8005d96:	a37e      	add	r3, pc, #504	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x318>)
 8005d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d9c:	e7e0      	b.n	8005d60 <__ieee754_rem_pio2+0xe8>
 8005d9e:	4b87      	ldr	r3, [pc, #540]	; (8005fbc <__ieee754_rem_pio2+0x344>)
 8005da0:	4598      	cmp	r8, r3
 8005da2:	f300 80d8 	bgt.w	8005f56 <__ieee754_rem_pio2+0x2de>
 8005da6:	f000 f96d 	bl	8006084 <fabs>
 8005daa:	ec55 4b10 	vmov	r4, r5, d0
 8005dae:	ee10 0a10 	vmov	r0, s0
 8005db2:	a379      	add	r3, pc, #484	; (adr r3, 8005f98 <__ieee754_rem_pio2+0x320>)
 8005db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db8:	4629      	mov	r1, r5
 8005dba:	f7fa fbc1 	bl	8000540 <__aeabi_dmul>
 8005dbe:	4b80      	ldr	r3, [pc, #512]	; (8005fc0 <__ieee754_rem_pio2+0x348>)
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f7fa fa07 	bl	80001d4 <__adddf3>
 8005dc6:	f7fa fe55 	bl	8000a74 <__aeabi_d2iz>
 8005dca:	4683      	mov	fp, r0
 8005dcc:	f7fa fb4e 	bl	800046c <__aeabi_i2d>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	460b      	mov	r3, r1
 8005dd4:	ec43 2b18 	vmov	d8, r2, r3
 8005dd8:	a367      	add	r3, pc, #412	; (adr r3, 8005f78 <__ieee754_rem_pio2+0x300>)
 8005dda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dde:	f7fa fbaf 	bl	8000540 <__aeabi_dmul>
 8005de2:	4602      	mov	r2, r0
 8005de4:	460b      	mov	r3, r1
 8005de6:	4620      	mov	r0, r4
 8005de8:	4629      	mov	r1, r5
 8005dea:	f7fa f9f1 	bl	80001d0 <__aeabi_dsub>
 8005dee:	a364      	add	r3, pc, #400	; (adr r3, 8005f80 <__ieee754_rem_pio2+0x308>)
 8005df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005df4:	4606      	mov	r6, r0
 8005df6:	460f      	mov	r7, r1
 8005df8:	ec51 0b18 	vmov	r0, r1, d8
 8005dfc:	f7fa fba0 	bl	8000540 <__aeabi_dmul>
 8005e00:	f1bb 0f1f 	cmp.w	fp, #31
 8005e04:	4604      	mov	r4, r0
 8005e06:	460d      	mov	r5, r1
 8005e08:	dc0d      	bgt.n	8005e26 <__ieee754_rem_pio2+0x1ae>
 8005e0a:	4b6e      	ldr	r3, [pc, #440]	; (8005fc4 <__ieee754_rem_pio2+0x34c>)
 8005e0c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e14:	4543      	cmp	r3, r8
 8005e16:	d006      	beq.n	8005e26 <__ieee754_rem_pio2+0x1ae>
 8005e18:	4622      	mov	r2, r4
 8005e1a:	462b      	mov	r3, r5
 8005e1c:	4630      	mov	r0, r6
 8005e1e:	4639      	mov	r1, r7
 8005e20:	f7fa f9d6 	bl	80001d0 <__aeabi_dsub>
 8005e24:	e00e      	b.n	8005e44 <__ieee754_rem_pio2+0x1cc>
 8005e26:	462b      	mov	r3, r5
 8005e28:	4622      	mov	r2, r4
 8005e2a:	4630      	mov	r0, r6
 8005e2c:	4639      	mov	r1, r7
 8005e2e:	f7fa f9cf 	bl	80001d0 <__aeabi_dsub>
 8005e32:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005e36:	9303      	str	r3, [sp, #12]
 8005e38:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005e3c:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005e40:	2b10      	cmp	r3, #16
 8005e42:	dc02      	bgt.n	8005e4a <__ieee754_rem_pio2+0x1d2>
 8005e44:	e9ca 0100 	strd	r0, r1, [sl]
 8005e48:	e039      	b.n	8005ebe <__ieee754_rem_pio2+0x246>
 8005e4a:	a34f      	add	r3, pc, #316	; (adr r3, 8005f88 <__ieee754_rem_pio2+0x310>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	ec51 0b18 	vmov	r0, r1, d8
 8005e54:	f7fa fb74 	bl	8000540 <__aeabi_dmul>
 8005e58:	4604      	mov	r4, r0
 8005e5a:	460d      	mov	r5, r1
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	460b      	mov	r3, r1
 8005e60:	4630      	mov	r0, r6
 8005e62:	4639      	mov	r1, r7
 8005e64:	f7fa f9b4 	bl	80001d0 <__aeabi_dsub>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	460b      	mov	r3, r1
 8005e6c:	4680      	mov	r8, r0
 8005e6e:	4689      	mov	r9, r1
 8005e70:	4630      	mov	r0, r6
 8005e72:	4639      	mov	r1, r7
 8005e74:	f7fa f9ac 	bl	80001d0 <__aeabi_dsub>
 8005e78:	4622      	mov	r2, r4
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	f7fa f9a8 	bl	80001d0 <__aeabi_dsub>
 8005e80:	a343      	add	r3, pc, #268	; (adr r3, 8005f90 <__ieee754_rem_pio2+0x318>)
 8005e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e86:	4604      	mov	r4, r0
 8005e88:	460d      	mov	r5, r1
 8005e8a:	ec51 0b18 	vmov	r0, r1, d8
 8005e8e:	f7fa fb57 	bl	8000540 <__aeabi_dmul>
 8005e92:	4622      	mov	r2, r4
 8005e94:	462b      	mov	r3, r5
 8005e96:	f7fa f99b 	bl	80001d0 <__aeabi_dsub>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4604      	mov	r4, r0
 8005ea0:	460d      	mov	r5, r1
 8005ea2:	4640      	mov	r0, r8
 8005ea4:	4649      	mov	r1, r9
 8005ea6:	f7fa f993 	bl	80001d0 <__aeabi_dsub>
 8005eaa:	9a03      	ldr	r2, [sp, #12]
 8005eac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005eb0:	1ad3      	subs	r3, r2, r3
 8005eb2:	2b31      	cmp	r3, #49	; 0x31
 8005eb4:	dc24      	bgt.n	8005f00 <__ieee754_rem_pio2+0x288>
 8005eb6:	e9ca 0100 	strd	r0, r1, [sl]
 8005eba:	4646      	mov	r6, r8
 8005ebc:	464f      	mov	r7, r9
 8005ebe:	e9da 8900 	ldrd	r8, r9, [sl]
 8005ec2:	4630      	mov	r0, r6
 8005ec4:	4642      	mov	r2, r8
 8005ec6:	464b      	mov	r3, r9
 8005ec8:	4639      	mov	r1, r7
 8005eca:	f7fa f981 	bl	80001d0 <__aeabi_dsub>
 8005ece:	462b      	mov	r3, r5
 8005ed0:	4622      	mov	r2, r4
 8005ed2:	f7fa f97d 	bl	80001d0 <__aeabi_dsub>
 8005ed6:	9b02      	ldr	r3, [sp, #8]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005ede:	f6bf af0b 	bge.w	8005cf8 <__ieee754_rem_pio2+0x80>
 8005ee2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005ee6:	f8ca 3004 	str.w	r3, [sl, #4]
 8005eea:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005eee:	f8ca 8000 	str.w	r8, [sl]
 8005ef2:	f8ca 0008 	str.w	r0, [sl, #8]
 8005ef6:	f8ca 300c 	str.w	r3, [sl, #12]
 8005efa:	f1cb 0b00 	rsb	fp, fp, #0
 8005efe:	e6fb      	b.n	8005cf8 <__ieee754_rem_pio2+0x80>
 8005f00:	a327      	add	r3, pc, #156	; (adr r3, 8005fa0 <__ieee754_rem_pio2+0x328>)
 8005f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f06:	ec51 0b18 	vmov	r0, r1, d8
 8005f0a:	f7fa fb19 	bl	8000540 <__aeabi_dmul>
 8005f0e:	4604      	mov	r4, r0
 8005f10:	460d      	mov	r5, r1
 8005f12:	4602      	mov	r2, r0
 8005f14:	460b      	mov	r3, r1
 8005f16:	4640      	mov	r0, r8
 8005f18:	4649      	mov	r1, r9
 8005f1a:	f7fa f959 	bl	80001d0 <__aeabi_dsub>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4606      	mov	r6, r0
 8005f24:	460f      	mov	r7, r1
 8005f26:	4640      	mov	r0, r8
 8005f28:	4649      	mov	r1, r9
 8005f2a:	f7fa f951 	bl	80001d0 <__aeabi_dsub>
 8005f2e:	4622      	mov	r2, r4
 8005f30:	462b      	mov	r3, r5
 8005f32:	f7fa f94d 	bl	80001d0 <__aeabi_dsub>
 8005f36:	a31c      	add	r3, pc, #112	; (adr r3, 8005fa8 <__ieee754_rem_pio2+0x330>)
 8005f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f3c:	4604      	mov	r4, r0
 8005f3e:	460d      	mov	r5, r1
 8005f40:	ec51 0b18 	vmov	r0, r1, d8
 8005f44:	f7fa fafc 	bl	8000540 <__aeabi_dmul>
 8005f48:	4622      	mov	r2, r4
 8005f4a:	462b      	mov	r3, r5
 8005f4c:	f7fa f940 	bl	80001d0 <__aeabi_dsub>
 8005f50:	4604      	mov	r4, r0
 8005f52:	460d      	mov	r5, r1
 8005f54:	e760      	b.n	8005e18 <__ieee754_rem_pio2+0x1a0>
 8005f56:	4b1c      	ldr	r3, [pc, #112]	; (8005fc8 <__ieee754_rem_pio2+0x350>)
 8005f58:	4598      	cmp	r8, r3
 8005f5a:	dd37      	ble.n	8005fcc <__ieee754_rem_pio2+0x354>
 8005f5c:	ee10 2a10 	vmov	r2, s0
 8005f60:	462b      	mov	r3, r5
 8005f62:	4620      	mov	r0, r4
 8005f64:	4629      	mov	r1, r5
 8005f66:	f7fa f933 	bl	80001d0 <__aeabi_dsub>
 8005f6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005f6e:	e9ca 0100 	strd	r0, r1, [sl]
 8005f72:	e695      	b.n	8005ca0 <__ieee754_rem_pio2+0x28>
 8005f74:	f3af 8000 	nop.w
 8005f78:	54400000 	.word	0x54400000
 8005f7c:	3ff921fb 	.word	0x3ff921fb
 8005f80:	1a626331 	.word	0x1a626331
 8005f84:	3dd0b461 	.word	0x3dd0b461
 8005f88:	1a600000 	.word	0x1a600000
 8005f8c:	3dd0b461 	.word	0x3dd0b461
 8005f90:	2e037073 	.word	0x2e037073
 8005f94:	3ba3198a 	.word	0x3ba3198a
 8005f98:	6dc9c883 	.word	0x6dc9c883
 8005f9c:	3fe45f30 	.word	0x3fe45f30
 8005fa0:	2e000000 	.word	0x2e000000
 8005fa4:	3ba3198a 	.word	0x3ba3198a
 8005fa8:	252049c1 	.word	0x252049c1
 8005fac:	397b839a 	.word	0x397b839a
 8005fb0:	3fe921fb 	.word	0x3fe921fb
 8005fb4:	4002d97b 	.word	0x4002d97b
 8005fb8:	3ff921fb 	.word	0x3ff921fb
 8005fbc:	413921fb 	.word	0x413921fb
 8005fc0:	3fe00000 	.word	0x3fe00000
 8005fc4:	08006970 	.word	0x08006970
 8005fc8:	7fefffff 	.word	0x7fefffff
 8005fcc:	ea4f 5628 	mov.w	r6, r8, asr #20
 8005fd0:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8005fd4:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8005fd8:	4620      	mov	r0, r4
 8005fda:	460d      	mov	r5, r1
 8005fdc:	f7fa fd4a 	bl	8000a74 <__aeabi_d2iz>
 8005fe0:	f7fa fa44 	bl	800046c <__aeabi_i2d>
 8005fe4:	4602      	mov	r2, r0
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4620      	mov	r0, r4
 8005fea:	4629      	mov	r1, r5
 8005fec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005ff0:	f7fa f8ee 	bl	80001d0 <__aeabi_dsub>
 8005ff4:	4b21      	ldr	r3, [pc, #132]	; (800607c <__ieee754_rem_pio2+0x404>)
 8005ff6:	2200      	movs	r2, #0
 8005ff8:	f7fa faa2 	bl	8000540 <__aeabi_dmul>
 8005ffc:	460d      	mov	r5, r1
 8005ffe:	4604      	mov	r4, r0
 8006000:	f7fa fd38 	bl	8000a74 <__aeabi_d2iz>
 8006004:	f7fa fa32 	bl	800046c <__aeabi_i2d>
 8006008:	4602      	mov	r2, r0
 800600a:	460b      	mov	r3, r1
 800600c:	4620      	mov	r0, r4
 800600e:	4629      	mov	r1, r5
 8006010:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006014:	f7fa f8dc 	bl	80001d0 <__aeabi_dsub>
 8006018:	4b18      	ldr	r3, [pc, #96]	; (800607c <__ieee754_rem_pio2+0x404>)
 800601a:	2200      	movs	r2, #0
 800601c:	f7fa fa90 	bl	8000540 <__aeabi_dmul>
 8006020:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8006024:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8006028:	2703      	movs	r7, #3
 800602a:	2400      	movs	r4, #0
 800602c:	2500      	movs	r5, #0
 800602e:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8006032:	4622      	mov	r2, r4
 8006034:	462b      	mov	r3, r5
 8006036:	46b9      	mov	r9, r7
 8006038:	3f01      	subs	r7, #1
 800603a:	f7fa fce9 	bl	8000a10 <__aeabi_dcmpeq>
 800603e:	2800      	cmp	r0, #0
 8006040:	d1f5      	bne.n	800602e <__ieee754_rem_pio2+0x3b6>
 8006042:	4b0f      	ldr	r3, [pc, #60]	; (8006080 <__ieee754_rem_pio2+0x408>)
 8006044:	9301      	str	r3, [sp, #4]
 8006046:	2302      	movs	r3, #2
 8006048:	9300      	str	r3, [sp, #0]
 800604a:	4632      	mov	r2, r6
 800604c:	464b      	mov	r3, r9
 800604e:	4651      	mov	r1, sl
 8006050:	a804      	add	r0, sp, #16
 8006052:	f000 f821 	bl	8006098 <__kernel_rem_pio2>
 8006056:	9b02      	ldr	r3, [sp, #8]
 8006058:	2b00      	cmp	r3, #0
 800605a:	4683      	mov	fp, r0
 800605c:	f6bf ae4c 	bge.w	8005cf8 <__ieee754_rem_pio2+0x80>
 8006060:	e9da 2100 	ldrd	r2, r1, [sl]
 8006064:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006068:	e9ca 2300 	strd	r2, r3, [sl]
 800606c:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8006070:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006074:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8006078:	e73f      	b.n	8005efa <__ieee754_rem_pio2+0x282>
 800607a:	bf00      	nop
 800607c:	41700000 	.word	0x41700000
 8006080:	080069f0 	.word	0x080069f0

08006084 <fabs>:
 8006084:	ec51 0b10 	vmov	r0, r1, d0
 8006088:	ee10 2a10 	vmov	r2, s0
 800608c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006090:	ec43 2b10 	vmov	d0, r2, r3
 8006094:	4770      	bx	lr
	...

08006098 <__kernel_rem_pio2>:
 8006098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800609c:	ed2d 8b02 	vpush	{d8}
 80060a0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80060a4:	f112 0f14 	cmn.w	r2, #20
 80060a8:	9306      	str	r3, [sp, #24]
 80060aa:	9104      	str	r1, [sp, #16]
 80060ac:	4bc2      	ldr	r3, [pc, #776]	; (80063b8 <__kernel_rem_pio2+0x320>)
 80060ae:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80060b0:	9009      	str	r0, [sp, #36]	; 0x24
 80060b2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80060b6:	9300      	str	r3, [sp, #0]
 80060b8:	9b06      	ldr	r3, [sp, #24]
 80060ba:	f103 33ff 	add.w	r3, r3, #4294967295
 80060be:	bfa8      	it	ge
 80060c0:	1ed4      	subge	r4, r2, #3
 80060c2:	9305      	str	r3, [sp, #20]
 80060c4:	bfb2      	itee	lt
 80060c6:	2400      	movlt	r4, #0
 80060c8:	2318      	movge	r3, #24
 80060ca:	fb94 f4f3 	sdivge	r4, r4, r3
 80060ce:	f06f 0317 	mvn.w	r3, #23
 80060d2:	fb04 3303 	mla	r3, r4, r3, r3
 80060d6:	eb03 0a02 	add.w	sl, r3, r2
 80060da:	9b00      	ldr	r3, [sp, #0]
 80060dc:	9a05      	ldr	r2, [sp, #20]
 80060de:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80063a8 <__kernel_rem_pio2+0x310>
 80060e2:	eb03 0802 	add.w	r8, r3, r2
 80060e6:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80060e8:	1aa7      	subs	r7, r4, r2
 80060ea:	ae20      	add	r6, sp, #128	; 0x80
 80060ec:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80060f0:	2500      	movs	r5, #0
 80060f2:	4545      	cmp	r5, r8
 80060f4:	dd13      	ble.n	800611e <__kernel_rem_pio2+0x86>
 80060f6:	9b06      	ldr	r3, [sp, #24]
 80060f8:	aa20      	add	r2, sp, #128	; 0x80
 80060fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80060fe:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8006102:	f04f 0800 	mov.w	r8, #0
 8006106:	9b00      	ldr	r3, [sp, #0]
 8006108:	4598      	cmp	r8, r3
 800610a:	dc31      	bgt.n	8006170 <__kernel_rem_pio2+0xd8>
 800610c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80063a8 <__kernel_rem_pio2+0x310>
 8006110:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8006114:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006118:	462f      	mov	r7, r5
 800611a:	2600      	movs	r6, #0
 800611c:	e01b      	b.n	8006156 <__kernel_rem_pio2+0xbe>
 800611e:	42ef      	cmn	r7, r5
 8006120:	d407      	bmi.n	8006132 <__kernel_rem_pio2+0x9a>
 8006122:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8006126:	f7fa f9a1 	bl	800046c <__aeabi_i2d>
 800612a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800612e:	3501      	adds	r5, #1
 8006130:	e7df      	b.n	80060f2 <__kernel_rem_pio2+0x5a>
 8006132:	ec51 0b18 	vmov	r0, r1, d8
 8006136:	e7f8      	b.n	800612a <__kernel_rem_pio2+0x92>
 8006138:	e9d7 2300 	ldrd	r2, r3, [r7]
 800613c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8006140:	f7fa f9fe 	bl	8000540 <__aeabi_dmul>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800614c:	f7fa f842 	bl	80001d4 <__adddf3>
 8006150:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006154:	3601      	adds	r6, #1
 8006156:	9b05      	ldr	r3, [sp, #20]
 8006158:	429e      	cmp	r6, r3
 800615a:	f1a7 0708 	sub.w	r7, r7, #8
 800615e:	ddeb      	ble.n	8006138 <__kernel_rem_pio2+0xa0>
 8006160:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006164:	f108 0801 	add.w	r8, r8, #1
 8006168:	ecab 7b02 	vstmia	fp!, {d7}
 800616c:	3508      	adds	r5, #8
 800616e:	e7ca      	b.n	8006106 <__kernel_rem_pio2+0x6e>
 8006170:	9b00      	ldr	r3, [sp, #0]
 8006172:	aa0c      	add	r2, sp, #48	; 0x30
 8006174:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006178:	930b      	str	r3, [sp, #44]	; 0x2c
 800617a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800617c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8006180:	9c00      	ldr	r4, [sp, #0]
 8006182:	930a      	str	r3, [sp, #40]	; 0x28
 8006184:	00e3      	lsls	r3, r4, #3
 8006186:	9308      	str	r3, [sp, #32]
 8006188:	ab98      	add	r3, sp, #608	; 0x260
 800618a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800618e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8006192:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8006196:	ab70      	add	r3, sp, #448	; 0x1c0
 8006198:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800619c:	46c3      	mov	fp, r8
 800619e:	46a1      	mov	r9, r4
 80061a0:	f1b9 0f00 	cmp.w	r9, #0
 80061a4:	f1a5 0508 	sub.w	r5, r5, #8
 80061a8:	dc77      	bgt.n	800629a <__kernel_rem_pio2+0x202>
 80061aa:	ec47 6b10 	vmov	d0, r6, r7
 80061ae:	4650      	mov	r0, sl
 80061b0:	f000 fac2 	bl	8006738 <scalbn>
 80061b4:	ec57 6b10 	vmov	r6, r7, d0
 80061b8:	2200      	movs	r2, #0
 80061ba:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80061be:	ee10 0a10 	vmov	r0, s0
 80061c2:	4639      	mov	r1, r7
 80061c4:	f7fa f9bc 	bl	8000540 <__aeabi_dmul>
 80061c8:	ec41 0b10 	vmov	d0, r0, r1
 80061cc:	f000 fb34 	bl	8006838 <floor>
 80061d0:	4b7a      	ldr	r3, [pc, #488]	; (80063bc <__kernel_rem_pio2+0x324>)
 80061d2:	ec51 0b10 	vmov	r0, r1, d0
 80061d6:	2200      	movs	r2, #0
 80061d8:	f7fa f9b2 	bl	8000540 <__aeabi_dmul>
 80061dc:	4602      	mov	r2, r0
 80061de:	460b      	mov	r3, r1
 80061e0:	4630      	mov	r0, r6
 80061e2:	4639      	mov	r1, r7
 80061e4:	f7f9 fff4 	bl	80001d0 <__aeabi_dsub>
 80061e8:	460f      	mov	r7, r1
 80061ea:	4606      	mov	r6, r0
 80061ec:	f7fa fc42 	bl	8000a74 <__aeabi_d2iz>
 80061f0:	9002      	str	r0, [sp, #8]
 80061f2:	f7fa f93b 	bl	800046c <__aeabi_i2d>
 80061f6:	4602      	mov	r2, r0
 80061f8:	460b      	mov	r3, r1
 80061fa:	4630      	mov	r0, r6
 80061fc:	4639      	mov	r1, r7
 80061fe:	f7f9 ffe7 	bl	80001d0 <__aeabi_dsub>
 8006202:	f1ba 0f00 	cmp.w	sl, #0
 8006206:	4606      	mov	r6, r0
 8006208:	460f      	mov	r7, r1
 800620a:	dd6d      	ble.n	80062e8 <__kernel_rem_pio2+0x250>
 800620c:	1e61      	subs	r1, r4, #1
 800620e:	ab0c      	add	r3, sp, #48	; 0x30
 8006210:	9d02      	ldr	r5, [sp, #8]
 8006212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006216:	f1ca 0018 	rsb	r0, sl, #24
 800621a:	fa43 f200 	asr.w	r2, r3, r0
 800621e:	4415      	add	r5, r2
 8006220:	4082      	lsls	r2, r0
 8006222:	1a9b      	subs	r3, r3, r2
 8006224:	aa0c      	add	r2, sp, #48	; 0x30
 8006226:	9502      	str	r5, [sp, #8]
 8006228:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800622c:	f1ca 0217 	rsb	r2, sl, #23
 8006230:	fa43 fb02 	asr.w	fp, r3, r2
 8006234:	f1bb 0f00 	cmp.w	fp, #0
 8006238:	dd65      	ble.n	8006306 <__kernel_rem_pio2+0x26e>
 800623a:	9b02      	ldr	r3, [sp, #8]
 800623c:	2200      	movs	r2, #0
 800623e:	3301      	adds	r3, #1
 8006240:	9302      	str	r3, [sp, #8]
 8006242:	4615      	mov	r5, r2
 8006244:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8006248:	4294      	cmp	r4, r2
 800624a:	f300 809f 	bgt.w	800638c <__kernel_rem_pio2+0x2f4>
 800624e:	f1ba 0f00 	cmp.w	sl, #0
 8006252:	dd07      	ble.n	8006264 <__kernel_rem_pio2+0x1cc>
 8006254:	f1ba 0f01 	cmp.w	sl, #1
 8006258:	f000 80c1 	beq.w	80063de <__kernel_rem_pio2+0x346>
 800625c:	f1ba 0f02 	cmp.w	sl, #2
 8006260:	f000 80c7 	beq.w	80063f2 <__kernel_rem_pio2+0x35a>
 8006264:	f1bb 0f02 	cmp.w	fp, #2
 8006268:	d14d      	bne.n	8006306 <__kernel_rem_pio2+0x26e>
 800626a:	4632      	mov	r2, r6
 800626c:	463b      	mov	r3, r7
 800626e:	4954      	ldr	r1, [pc, #336]	; (80063c0 <__kernel_rem_pio2+0x328>)
 8006270:	2000      	movs	r0, #0
 8006272:	f7f9 ffad 	bl	80001d0 <__aeabi_dsub>
 8006276:	4606      	mov	r6, r0
 8006278:	460f      	mov	r7, r1
 800627a:	2d00      	cmp	r5, #0
 800627c:	d043      	beq.n	8006306 <__kernel_rem_pio2+0x26e>
 800627e:	4650      	mov	r0, sl
 8006280:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80063b0 <__kernel_rem_pio2+0x318>
 8006284:	f000 fa58 	bl	8006738 <scalbn>
 8006288:	4630      	mov	r0, r6
 800628a:	4639      	mov	r1, r7
 800628c:	ec53 2b10 	vmov	r2, r3, d0
 8006290:	f7f9 ff9e 	bl	80001d0 <__aeabi_dsub>
 8006294:	4606      	mov	r6, r0
 8006296:	460f      	mov	r7, r1
 8006298:	e035      	b.n	8006306 <__kernel_rem_pio2+0x26e>
 800629a:	4b4a      	ldr	r3, [pc, #296]	; (80063c4 <__kernel_rem_pio2+0x32c>)
 800629c:	2200      	movs	r2, #0
 800629e:	4630      	mov	r0, r6
 80062a0:	4639      	mov	r1, r7
 80062a2:	f7fa f94d 	bl	8000540 <__aeabi_dmul>
 80062a6:	f7fa fbe5 	bl	8000a74 <__aeabi_d2iz>
 80062aa:	f7fa f8df 	bl	800046c <__aeabi_i2d>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	ec43 2b18 	vmov	d8, r2, r3
 80062b6:	4b44      	ldr	r3, [pc, #272]	; (80063c8 <__kernel_rem_pio2+0x330>)
 80062b8:	2200      	movs	r2, #0
 80062ba:	f7fa f941 	bl	8000540 <__aeabi_dmul>
 80062be:	4602      	mov	r2, r0
 80062c0:	460b      	mov	r3, r1
 80062c2:	4630      	mov	r0, r6
 80062c4:	4639      	mov	r1, r7
 80062c6:	f7f9 ff83 	bl	80001d0 <__aeabi_dsub>
 80062ca:	f7fa fbd3 	bl	8000a74 <__aeabi_d2iz>
 80062ce:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062d2:	f84b 0b04 	str.w	r0, [fp], #4
 80062d6:	ec51 0b18 	vmov	r0, r1, d8
 80062da:	f7f9 ff7b 	bl	80001d4 <__adddf3>
 80062de:	f109 39ff 	add.w	r9, r9, #4294967295
 80062e2:	4606      	mov	r6, r0
 80062e4:	460f      	mov	r7, r1
 80062e6:	e75b      	b.n	80061a0 <__kernel_rem_pio2+0x108>
 80062e8:	d106      	bne.n	80062f8 <__kernel_rem_pio2+0x260>
 80062ea:	1e63      	subs	r3, r4, #1
 80062ec:	aa0c      	add	r2, sp, #48	; 0x30
 80062ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f2:	ea4f 5be3 	mov.w	fp, r3, asr #23
 80062f6:	e79d      	b.n	8006234 <__kernel_rem_pio2+0x19c>
 80062f8:	4b34      	ldr	r3, [pc, #208]	; (80063cc <__kernel_rem_pio2+0x334>)
 80062fa:	2200      	movs	r2, #0
 80062fc:	f7fa fba6 	bl	8000a4c <__aeabi_dcmpge>
 8006300:	2800      	cmp	r0, #0
 8006302:	d140      	bne.n	8006386 <__kernel_rem_pio2+0x2ee>
 8006304:	4683      	mov	fp, r0
 8006306:	2200      	movs	r2, #0
 8006308:	2300      	movs	r3, #0
 800630a:	4630      	mov	r0, r6
 800630c:	4639      	mov	r1, r7
 800630e:	f7fa fb7f 	bl	8000a10 <__aeabi_dcmpeq>
 8006312:	2800      	cmp	r0, #0
 8006314:	f000 80c1 	beq.w	800649a <__kernel_rem_pio2+0x402>
 8006318:	1e65      	subs	r5, r4, #1
 800631a:	462b      	mov	r3, r5
 800631c:	2200      	movs	r2, #0
 800631e:	9900      	ldr	r1, [sp, #0]
 8006320:	428b      	cmp	r3, r1
 8006322:	da6d      	bge.n	8006400 <__kernel_rem_pio2+0x368>
 8006324:	2a00      	cmp	r2, #0
 8006326:	f000 808a 	beq.w	800643e <__kernel_rem_pio2+0x3a6>
 800632a:	ab0c      	add	r3, sp, #48	; 0x30
 800632c:	f1aa 0a18 	sub.w	sl, sl, #24
 8006330:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8006334:	2b00      	cmp	r3, #0
 8006336:	f000 80ae 	beq.w	8006496 <__kernel_rem_pio2+0x3fe>
 800633a:	4650      	mov	r0, sl
 800633c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80063b0 <__kernel_rem_pio2+0x318>
 8006340:	f000 f9fa 	bl	8006738 <scalbn>
 8006344:	1c6b      	adds	r3, r5, #1
 8006346:	00da      	lsls	r2, r3, #3
 8006348:	9205      	str	r2, [sp, #20]
 800634a:	ec57 6b10 	vmov	r6, r7, d0
 800634e:	aa70      	add	r2, sp, #448	; 0x1c0
 8006350:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80063c4 <__kernel_rem_pio2+0x32c>
 8006354:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8006358:	462c      	mov	r4, r5
 800635a:	f04f 0800 	mov.w	r8, #0
 800635e:	2c00      	cmp	r4, #0
 8006360:	f280 80d4 	bge.w	800650c <__kernel_rem_pio2+0x474>
 8006364:	462c      	mov	r4, r5
 8006366:	2c00      	cmp	r4, #0
 8006368:	f2c0 8102 	blt.w	8006570 <__kernel_rem_pio2+0x4d8>
 800636c:	4b18      	ldr	r3, [pc, #96]	; (80063d0 <__kernel_rem_pio2+0x338>)
 800636e:	461e      	mov	r6, r3
 8006370:	ab70      	add	r3, sp, #448	; 0x1c0
 8006372:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8006376:	1b2b      	subs	r3, r5, r4
 8006378:	f04f 0900 	mov.w	r9, #0
 800637c:	f04f 0a00 	mov.w	sl, #0
 8006380:	2700      	movs	r7, #0
 8006382:	9306      	str	r3, [sp, #24]
 8006384:	e0e6      	b.n	8006554 <__kernel_rem_pio2+0x4bc>
 8006386:	f04f 0b02 	mov.w	fp, #2
 800638a:	e756      	b.n	800623a <__kernel_rem_pio2+0x1a2>
 800638c:	f8d8 3000 	ldr.w	r3, [r8]
 8006390:	bb05      	cbnz	r5, 80063d4 <__kernel_rem_pio2+0x33c>
 8006392:	b123      	cbz	r3, 800639e <__kernel_rem_pio2+0x306>
 8006394:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8006398:	f8c8 3000 	str.w	r3, [r8]
 800639c:	2301      	movs	r3, #1
 800639e:	3201      	adds	r2, #1
 80063a0:	f108 0804 	add.w	r8, r8, #4
 80063a4:	461d      	mov	r5, r3
 80063a6:	e74f      	b.n	8006248 <__kernel_rem_pio2+0x1b0>
	...
 80063b4:	3ff00000 	.word	0x3ff00000
 80063b8:	08006b38 	.word	0x08006b38
 80063bc:	40200000 	.word	0x40200000
 80063c0:	3ff00000 	.word	0x3ff00000
 80063c4:	3e700000 	.word	0x3e700000
 80063c8:	41700000 	.word	0x41700000
 80063cc:	3fe00000 	.word	0x3fe00000
 80063d0:	08006af8 	.word	0x08006af8
 80063d4:	1acb      	subs	r3, r1, r3
 80063d6:	f8c8 3000 	str.w	r3, [r8]
 80063da:	462b      	mov	r3, r5
 80063dc:	e7df      	b.n	800639e <__kernel_rem_pio2+0x306>
 80063de:	1e62      	subs	r2, r4, #1
 80063e0:	ab0c      	add	r3, sp, #48	; 0x30
 80063e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80063ea:	a90c      	add	r1, sp, #48	; 0x30
 80063ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80063f0:	e738      	b.n	8006264 <__kernel_rem_pio2+0x1cc>
 80063f2:	1e62      	subs	r2, r4, #1
 80063f4:	ab0c      	add	r3, sp, #48	; 0x30
 80063f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063fa:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80063fe:	e7f4      	b.n	80063ea <__kernel_rem_pio2+0x352>
 8006400:	a90c      	add	r1, sp, #48	; 0x30
 8006402:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8006406:	3b01      	subs	r3, #1
 8006408:	430a      	orrs	r2, r1
 800640a:	e788      	b.n	800631e <__kernel_rem_pio2+0x286>
 800640c:	3301      	adds	r3, #1
 800640e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8006412:	2900      	cmp	r1, #0
 8006414:	d0fa      	beq.n	800640c <__kernel_rem_pio2+0x374>
 8006416:	9a08      	ldr	r2, [sp, #32]
 8006418:	f502 7218 	add.w	r2, r2, #608	; 0x260
 800641c:	446a      	add	r2, sp
 800641e:	3a98      	subs	r2, #152	; 0x98
 8006420:	9208      	str	r2, [sp, #32]
 8006422:	9a06      	ldr	r2, [sp, #24]
 8006424:	a920      	add	r1, sp, #128	; 0x80
 8006426:	18a2      	adds	r2, r4, r2
 8006428:	18e3      	adds	r3, r4, r3
 800642a:	f104 0801 	add.w	r8, r4, #1
 800642e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8006432:	9302      	str	r3, [sp, #8]
 8006434:	9b02      	ldr	r3, [sp, #8]
 8006436:	4543      	cmp	r3, r8
 8006438:	da04      	bge.n	8006444 <__kernel_rem_pio2+0x3ac>
 800643a:	461c      	mov	r4, r3
 800643c:	e6a2      	b.n	8006184 <__kernel_rem_pio2+0xec>
 800643e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006440:	2301      	movs	r3, #1
 8006442:	e7e4      	b.n	800640e <__kernel_rem_pio2+0x376>
 8006444:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006446:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800644a:	f7fa f80f 	bl	800046c <__aeabi_i2d>
 800644e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8006452:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006454:	46ab      	mov	fp, r5
 8006456:	461c      	mov	r4, r3
 8006458:	f04f 0900 	mov.w	r9, #0
 800645c:	2600      	movs	r6, #0
 800645e:	2700      	movs	r7, #0
 8006460:	9b05      	ldr	r3, [sp, #20]
 8006462:	4599      	cmp	r9, r3
 8006464:	dd06      	ble.n	8006474 <__kernel_rem_pio2+0x3dc>
 8006466:	9b08      	ldr	r3, [sp, #32]
 8006468:	e8e3 6702 	strd	r6, r7, [r3], #8
 800646c:	f108 0801 	add.w	r8, r8, #1
 8006470:	9308      	str	r3, [sp, #32]
 8006472:	e7df      	b.n	8006434 <__kernel_rem_pio2+0x39c>
 8006474:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8006478:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800647c:	f7fa f860 	bl	8000540 <__aeabi_dmul>
 8006480:	4602      	mov	r2, r0
 8006482:	460b      	mov	r3, r1
 8006484:	4630      	mov	r0, r6
 8006486:	4639      	mov	r1, r7
 8006488:	f7f9 fea4 	bl	80001d4 <__adddf3>
 800648c:	f109 0901 	add.w	r9, r9, #1
 8006490:	4606      	mov	r6, r0
 8006492:	460f      	mov	r7, r1
 8006494:	e7e4      	b.n	8006460 <__kernel_rem_pio2+0x3c8>
 8006496:	3d01      	subs	r5, #1
 8006498:	e747      	b.n	800632a <__kernel_rem_pio2+0x292>
 800649a:	ec47 6b10 	vmov	d0, r6, r7
 800649e:	f1ca 0000 	rsb	r0, sl, #0
 80064a2:	f000 f949 	bl	8006738 <scalbn>
 80064a6:	ec57 6b10 	vmov	r6, r7, d0
 80064aa:	4ba0      	ldr	r3, [pc, #640]	; (800672c <__kernel_rem_pio2+0x694>)
 80064ac:	ee10 0a10 	vmov	r0, s0
 80064b0:	2200      	movs	r2, #0
 80064b2:	4639      	mov	r1, r7
 80064b4:	f7fa faca 	bl	8000a4c <__aeabi_dcmpge>
 80064b8:	b1f8      	cbz	r0, 80064fa <__kernel_rem_pio2+0x462>
 80064ba:	4b9d      	ldr	r3, [pc, #628]	; (8006730 <__kernel_rem_pio2+0x698>)
 80064bc:	2200      	movs	r2, #0
 80064be:	4630      	mov	r0, r6
 80064c0:	4639      	mov	r1, r7
 80064c2:	f7fa f83d 	bl	8000540 <__aeabi_dmul>
 80064c6:	f7fa fad5 	bl	8000a74 <__aeabi_d2iz>
 80064ca:	4680      	mov	r8, r0
 80064cc:	f7f9 ffce 	bl	800046c <__aeabi_i2d>
 80064d0:	4b96      	ldr	r3, [pc, #600]	; (800672c <__kernel_rem_pio2+0x694>)
 80064d2:	2200      	movs	r2, #0
 80064d4:	f7fa f834 	bl	8000540 <__aeabi_dmul>
 80064d8:	460b      	mov	r3, r1
 80064da:	4602      	mov	r2, r0
 80064dc:	4639      	mov	r1, r7
 80064de:	4630      	mov	r0, r6
 80064e0:	f7f9 fe76 	bl	80001d0 <__aeabi_dsub>
 80064e4:	f7fa fac6 	bl	8000a74 <__aeabi_d2iz>
 80064e8:	1c65      	adds	r5, r4, #1
 80064ea:	ab0c      	add	r3, sp, #48	; 0x30
 80064ec:	f10a 0a18 	add.w	sl, sl, #24
 80064f0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80064f4:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80064f8:	e71f      	b.n	800633a <__kernel_rem_pio2+0x2a2>
 80064fa:	4630      	mov	r0, r6
 80064fc:	4639      	mov	r1, r7
 80064fe:	f7fa fab9 	bl	8000a74 <__aeabi_d2iz>
 8006502:	ab0c      	add	r3, sp, #48	; 0x30
 8006504:	4625      	mov	r5, r4
 8006506:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800650a:	e716      	b.n	800633a <__kernel_rem_pio2+0x2a2>
 800650c:	ab0c      	add	r3, sp, #48	; 0x30
 800650e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006512:	f7f9 ffab 	bl	800046c <__aeabi_i2d>
 8006516:	4632      	mov	r2, r6
 8006518:	463b      	mov	r3, r7
 800651a:	f7fa f811 	bl	8000540 <__aeabi_dmul>
 800651e:	4642      	mov	r2, r8
 8006520:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8006524:	464b      	mov	r3, r9
 8006526:	4630      	mov	r0, r6
 8006528:	4639      	mov	r1, r7
 800652a:	f7fa f809 	bl	8000540 <__aeabi_dmul>
 800652e:	3c01      	subs	r4, #1
 8006530:	4606      	mov	r6, r0
 8006532:	460f      	mov	r7, r1
 8006534:	e713      	b.n	800635e <__kernel_rem_pio2+0x2c6>
 8006536:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800653a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800653e:	f7f9 ffff 	bl	8000540 <__aeabi_dmul>
 8006542:	4602      	mov	r2, r0
 8006544:	460b      	mov	r3, r1
 8006546:	4648      	mov	r0, r9
 8006548:	4651      	mov	r1, sl
 800654a:	f7f9 fe43 	bl	80001d4 <__adddf3>
 800654e:	3701      	adds	r7, #1
 8006550:	4681      	mov	r9, r0
 8006552:	468a      	mov	sl, r1
 8006554:	9b00      	ldr	r3, [sp, #0]
 8006556:	429f      	cmp	r7, r3
 8006558:	dc02      	bgt.n	8006560 <__kernel_rem_pio2+0x4c8>
 800655a:	9b06      	ldr	r3, [sp, #24]
 800655c:	429f      	cmp	r7, r3
 800655e:	ddea      	ble.n	8006536 <__kernel_rem_pio2+0x49e>
 8006560:	9a06      	ldr	r2, [sp, #24]
 8006562:	ab48      	add	r3, sp, #288	; 0x120
 8006564:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8006568:	e9c6 9a00 	strd	r9, sl, [r6]
 800656c:	3c01      	subs	r4, #1
 800656e:	e6fa      	b.n	8006366 <__kernel_rem_pio2+0x2ce>
 8006570:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006572:	2b02      	cmp	r3, #2
 8006574:	dc0b      	bgt.n	800658e <__kernel_rem_pio2+0x4f6>
 8006576:	2b00      	cmp	r3, #0
 8006578:	dc39      	bgt.n	80065ee <__kernel_rem_pio2+0x556>
 800657a:	d05d      	beq.n	8006638 <__kernel_rem_pio2+0x5a0>
 800657c:	9b02      	ldr	r3, [sp, #8]
 800657e:	f003 0007 	and.w	r0, r3, #7
 8006582:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8006586:	ecbd 8b02 	vpop	{d8}
 800658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800658e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8006590:	2b03      	cmp	r3, #3
 8006592:	d1f3      	bne.n	800657c <__kernel_rem_pio2+0x4e4>
 8006594:	9b05      	ldr	r3, [sp, #20]
 8006596:	9500      	str	r5, [sp, #0]
 8006598:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800659c:	eb0d 0403 	add.w	r4, sp, r3
 80065a0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80065a4:	46a2      	mov	sl, r4
 80065a6:	9b00      	ldr	r3, [sp, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	f1aa 0a08 	sub.w	sl, sl, #8
 80065ae:	dc69      	bgt.n	8006684 <__kernel_rem_pio2+0x5ec>
 80065b0:	46aa      	mov	sl, r5
 80065b2:	f1ba 0f01 	cmp.w	sl, #1
 80065b6:	f1a4 0408 	sub.w	r4, r4, #8
 80065ba:	f300 8083 	bgt.w	80066c4 <__kernel_rem_pio2+0x62c>
 80065be:	9c05      	ldr	r4, [sp, #20]
 80065c0:	ab48      	add	r3, sp, #288	; 0x120
 80065c2:	441c      	add	r4, r3
 80065c4:	2000      	movs	r0, #0
 80065c6:	2100      	movs	r1, #0
 80065c8:	2d01      	cmp	r5, #1
 80065ca:	f300 809a 	bgt.w	8006702 <__kernel_rem_pio2+0x66a>
 80065ce:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80065d2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80065d6:	f1bb 0f00 	cmp.w	fp, #0
 80065da:	f040 8098 	bne.w	800670e <__kernel_rem_pio2+0x676>
 80065de:	9b04      	ldr	r3, [sp, #16]
 80065e0:	e9c3 7800 	strd	r7, r8, [r3]
 80065e4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80065e8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80065ec:	e7c6      	b.n	800657c <__kernel_rem_pio2+0x4e4>
 80065ee:	9e05      	ldr	r6, [sp, #20]
 80065f0:	ab48      	add	r3, sp, #288	; 0x120
 80065f2:	441e      	add	r6, r3
 80065f4:	462c      	mov	r4, r5
 80065f6:	2000      	movs	r0, #0
 80065f8:	2100      	movs	r1, #0
 80065fa:	2c00      	cmp	r4, #0
 80065fc:	da33      	bge.n	8006666 <__kernel_rem_pio2+0x5ce>
 80065fe:	f1bb 0f00 	cmp.w	fp, #0
 8006602:	d036      	beq.n	8006672 <__kernel_rem_pio2+0x5da>
 8006604:	4602      	mov	r2, r0
 8006606:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800660a:	9c04      	ldr	r4, [sp, #16]
 800660c:	e9c4 2300 	strd	r2, r3, [r4]
 8006610:	4602      	mov	r2, r0
 8006612:	460b      	mov	r3, r1
 8006614:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8006618:	f7f9 fdda 	bl	80001d0 <__aeabi_dsub>
 800661c:	ae4a      	add	r6, sp, #296	; 0x128
 800661e:	2401      	movs	r4, #1
 8006620:	42a5      	cmp	r5, r4
 8006622:	da29      	bge.n	8006678 <__kernel_rem_pio2+0x5e0>
 8006624:	f1bb 0f00 	cmp.w	fp, #0
 8006628:	d002      	beq.n	8006630 <__kernel_rem_pio2+0x598>
 800662a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800662e:	4619      	mov	r1, r3
 8006630:	9b04      	ldr	r3, [sp, #16]
 8006632:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8006636:	e7a1      	b.n	800657c <__kernel_rem_pio2+0x4e4>
 8006638:	9c05      	ldr	r4, [sp, #20]
 800663a:	ab48      	add	r3, sp, #288	; 0x120
 800663c:	441c      	add	r4, r3
 800663e:	2000      	movs	r0, #0
 8006640:	2100      	movs	r1, #0
 8006642:	2d00      	cmp	r5, #0
 8006644:	da09      	bge.n	800665a <__kernel_rem_pio2+0x5c2>
 8006646:	f1bb 0f00 	cmp.w	fp, #0
 800664a:	d002      	beq.n	8006652 <__kernel_rem_pio2+0x5ba>
 800664c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006650:	4619      	mov	r1, r3
 8006652:	9b04      	ldr	r3, [sp, #16]
 8006654:	e9c3 0100 	strd	r0, r1, [r3]
 8006658:	e790      	b.n	800657c <__kernel_rem_pio2+0x4e4>
 800665a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800665e:	f7f9 fdb9 	bl	80001d4 <__adddf3>
 8006662:	3d01      	subs	r5, #1
 8006664:	e7ed      	b.n	8006642 <__kernel_rem_pio2+0x5aa>
 8006666:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 800666a:	f7f9 fdb3 	bl	80001d4 <__adddf3>
 800666e:	3c01      	subs	r4, #1
 8006670:	e7c3      	b.n	80065fa <__kernel_rem_pio2+0x562>
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	e7c8      	b.n	800660a <__kernel_rem_pio2+0x572>
 8006678:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800667c:	f7f9 fdaa 	bl	80001d4 <__adddf3>
 8006680:	3401      	adds	r4, #1
 8006682:	e7cd      	b.n	8006620 <__kernel_rem_pio2+0x588>
 8006684:	e9da 8900 	ldrd	r8, r9, [sl]
 8006688:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800668c:	9b00      	ldr	r3, [sp, #0]
 800668e:	3b01      	subs	r3, #1
 8006690:	9300      	str	r3, [sp, #0]
 8006692:	4632      	mov	r2, r6
 8006694:	463b      	mov	r3, r7
 8006696:	4640      	mov	r0, r8
 8006698:	4649      	mov	r1, r9
 800669a:	f7f9 fd9b 	bl	80001d4 <__adddf3>
 800669e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80066a2:	4602      	mov	r2, r0
 80066a4:	460b      	mov	r3, r1
 80066a6:	4640      	mov	r0, r8
 80066a8:	4649      	mov	r1, r9
 80066aa:	f7f9 fd91 	bl	80001d0 <__aeabi_dsub>
 80066ae:	4632      	mov	r2, r6
 80066b0:	463b      	mov	r3, r7
 80066b2:	f7f9 fd8f 	bl	80001d4 <__adddf3>
 80066b6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80066ba:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80066be:	ed8a 7b00 	vstr	d7, [sl]
 80066c2:	e770      	b.n	80065a6 <__kernel_rem_pio2+0x50e>
 80066c4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80066c8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80066cc:	4640      	mov	r0, r8
 80066ce:	4632      	mov	r2, r6
 80066d0:	463b      	mov	r3, r7
 80066d2:	4649      	mov	r1, r9
 80066d4:	f7f9 fd7e 	bl	80001d4 <__adddf3>
 80066d8:	e9cd 0100 	strd	r0, r1, [sp]
 80066dc:	4602      	mov	r2, r0
 80066de:	460b      	mov	r3, r1
 80066e0:	4640      	mov	r0, r8
 80066e2:	4649      	mov	r1, r9
 80066e4:	f7f9 fd74 	bl	80001d0 <__aeabi_dsub>
 80066e8:	4632      	mov	r2, r6
 80066ea:	463b      	mov	r3, r7
 80066ec:	f7f9 fd72 	bl	80001d4 <__adddf3>
 80066f0:	ed9d 7b00 	vldr	d7, [sp]
 80066f4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80066f8:	ed84 7b00 	vstr	d7, [r4]
 80066fc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006700:	e757      	b.n	80065b2 <__kernel_rem_pio2+0x51a>
 8006702:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8006706:	f7f9 fd65 	bl	80001d4 <__adddf3>
 800670a:	3d01      	subs	r5, #1
 800670c:	e75c      	b.n	80065c8 <__kernel_rem_pio2+0x530>
 800670e:	9b04      	ldr	r3, [sp, #16]
 8006710:	9a04      	ldr	r2, [sp, #16]
 8006712:	601f      	str	r7, [r3, #0]
 8006714:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8006718:	605c      	str	r4, [r3, #4]
 800671a:	609d      	str	r5, [r3, #8]
 800671c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006720:	60d3      	str	r3, [r2, #12]
 8006722:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006726:	6110      	str	r0, [r2, #16]
 8006728:	6153      	str	r3, [r2, #20]
 800672a:	e727      	b.n	800657c <__kernel_rem_pio2+0x4e4>
 800672c:	41700000 	.word	0x41700000
 8006730:	3e700000 	.word	0x3e700000
 8006734:	00000000 	.word	0x00000000

08006738 <scalbn>:
 8006738:	b570      	push	{r4, r5, r6, lr}
 800673a:	ec55 4b10 	vmov	r4, r5, d0
 800673e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8006742:	4606      	mov	r6, r0
 8006744:	462b      	mov	r3, r5
 8006746:	b999      	cbnz	r1, 8006770 <scalbn+0x38>
 8006748:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800674c:	4323      	orrs	r3, r4
 800674e:	d03f      	beq.n	80067d0 <scalbn+0x98>
 8006750:	4b35      	ldr	r3, [pc, #212]	; (8006828 <scalbn+0xf0>)
 8006752:	4629      	mov	r1, r5
 8006754:	ee10 0a10 	vmov	r0, s0
 8006758:	2200      	movs	r2, #0
 800675a:	f7f9 fef1 	bl	8000540 <__aeabi_dmul>
 800675e:	4b33      	ldr	r3, [pc, #204]	; (800682c <scalbn+0xf4>)
 8006760:	429e      	cmp	r6, r3
 8006762:	4604      	mov	r4, r0
 8006764:	460d      	mov	r5, r1
 8006766:	da10      	bge.n	800678a <scalbn+0x52>
 8006768:	a327      	add	r3, pc, #156	; (adr r3, 8006808 <scalbn+0xd0>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	e01f      	b.n	80067b0 <scalbn+0x78>
 8006770:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8006774:	4291      	cmp	r1, r2
 8006776:	d10c      	bne.n	8006792 <scalbn+0x5a>
 8006778:	ee10 2a10 	vmov	r2, s0
 800677c:	4620      	mov	r0, r4
 800677e:	4629      	mov	r1, r5
 8006780:	f7f9 fd28 	bl	80001d4 <__adddf3>
 8006784:	4604      	mov	r4, r0
 8006786:	460d      	mov	r5, r1
 8006788:	e022      	b.n	80067d0 <scalbn+0x98>
 800678a:	460b      	mov	r3, r1
 800678c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006790:	3936      	subs	r1, #54	; 0x36
 8006792:	f24c 3250 	movw	r2, #50000	; 0xc350
 8006796:	4296      	cmp	r6, r2
 8006798:	dd0d      	ble.n	80067b6 <scalbn+0x7e>
 800679a:	2d00      	cmp	r5, #0
 800679c:	a11c      	add	r1, pc, #112	; (adr r1, 8006810 <scalbn+0xd8>)
 800679e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067a2:	da02      	bge.n	80067aa <scalbn+0x72>
 80067a4:	a11c      	add	r1, pc, #112	; (adr r1, 8006818 <scalbn+0xe0>)
 80067a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067aa:	a319      	add	r3, pc, #100	; (adr r3, 8006810 <scalbn+0xd8>)
 80067ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b0:	f7f9 fec6 	bl	8000540 <__aeabi_dmul>
 80067b4:	e7e6      	b.n	8006784 <scalbn+0x4c>
 80067b6:	1872      	adds	r2, r6, r1
 80067b8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80067bc:	428a      	cmp	r2, r1
 80067be:	dcec      	bgt.n	800679a <scalbn+0x62>
 80067c0:	2a00      	cmp	r2, #0
 80067c2:	dd08      	ble.n	80067d6 <scalbn+0x9e>
 80067c4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067c8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067cc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80067d0:	ec45 4b10 	vmov	d0, r4, r5
 80067d4:	bd70      	pop	{r4, r5, r6, pc}
 80067d6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80067da:	da08      	bge.n	80067ee <scalbn+0xb6>
 80067dc:	2d00      	cmp	r5, #0
 80067de:	a10a      	add	r1, pc, #40	; (adr r1, 8006808 <scalbn+0xd0>)
 80067e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067e4:	dac0      	bge.n	8006768 <scalbn+0x30>
 80067e6:	a10e      	add	r1, pc, #56	; (adr r1, 8006820 <scalbn+0xe8>)
 80067e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80067ec:	e7bc      	b.n	8006768 <scalbn+0x30>
 80067ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80067f2:	3236      	adds	r2, #54	; 0x36
 80067f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80067f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80067fc:	4620      	mov	r0, r4
 80067fe:	4b0c      	ldr	r3, [pc, #48]	; (8006830 <scalbn+0xf8>)
 8006800:	2200      	movs	r2, #0
 8006802:	e7d5      	b.n	80067b0 <scalbn+0x78>
 8006804:	f3af 8000 	nop.w
 8006808:	c2f8f359 	.word	0xc2f8f359
 800680c:	01a56e1f 	.word	0x01a56e1f
 8006810:	8800759c 	.word	0x8800759c
 8006814:	7e37e43c 	.word	0x7e37e43c
 8006818:	8800759c 	.word	0x8800759c
 800681c:	fe37e43c 	.word	0xfe37e43c
 8006820:	c2f8f359 	.word	0xc2f8f359
 8006824:	81a56e1f 	.word	0x81a56e1f
 8006828:	43500000 	.word	0x43500000
 800682c:	ffff3cb0 	.word	0xffff3cb0
 8006830:	3c900000 	.word	0x3c900000
 8006834:	00000000 	.word	0x00000000

08006838 <floor>:
 8006838:	ec51 0b10 	vmov	r0, r1, d0
 800683c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8006840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006844:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8006848:	2e13      	cmp	r6, #19
 800684a:	ee10 5a10 	vmov	r5, s0
 800684e:	ee10 8a10 	vmov	r8, s0
 8006852:	460c      	mov	r4, r1
 8006854:	dc31      	bgt.n	80068ba <floor+0x82>
 8006856:	2e00      	cmp	r6, #0
 8006858:	da14      	bge.n	8006884 <floor+0x4c>
 800685a:	a333      	add	r3, pc, #204	; (adr r3, 8006928 <floor+0xf0>)
 800685c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006860:	f7f9 fcb8 	bl	80001d4 <__adddf3>
 8006864:	2200      	movs	r2, #0
 8006866:	2300      	movs	r3, #0
 8006868:	f7fa f8fa 	bl	8000a60 <__aeabi_dcmpgt>
 800686c:	b138      	cbz	r0, 800687e <floor+0x46>
 800686e:	2c00      	cmp	r4, #0
 8006870:	da53      	bge.n	800691a <floor+0xe2>
 8006872:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8006876:	4325      	orrs	r5, r4
 8006878:	d052      	beq.n	8006920 <floor+0xe8>
 800687a:	4c2d      	ldr	r4, [pc, #180]	; (8006930 <floor+0xf8>)
 800687c:	2500      	movs	r5, #0
 800687e:	4621      	mov	r1, r4
 8006880:	4628      	mov	r0, r5
 8006882:	e024      	b.n	80068ce <floor+0x96>
 8006884:	4f2b      	ldr	r7, [pc, #172]	; (8006934 <floor+0xfc>)
 8006886:	4137      	asrs	r7, r6
 8006888:	ea01 0307 	and.w	r3, r1, r7
 800688c:	4303      	orrs	r3, r0
 800688e:	d01e      	beq.n	80068ce <floor+0x96>
 8006890:	a325      	add	r3, pc, #148	; (adr r3, 8006928 <floor+0xf0>)
 8006892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006896:	f7f9 fc9d 	bl	80001d4 <__adddf3>
 800689a:	2200      	movs	r2, #0
 800689c:	2300      	movs	r3, #0
 800689e:	f7fa f8df 	bl	8000a60 <__aeabi_dcmpgt>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d0eb      	beq.n	800687e <floor+0x46>
 80068a6:	2c00      	cmp	r4, #0
 80068a8:	bfbe      	ittt	lt
 80068aa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80068ae:	4133      	asrlt	r3, r6
 80068b0:	18e4      	addlt	r4, r4, r3
 80068b2:	ea24 0407 	bic.w	r4, r4, r7
 80068b6:	2500      	movs	r5, #0
 80068b8:	e7e1      	b.n	800687e <floor+0x46>
 80068ba:	2e33      	cmp	r6, #51	; 0x33
 80068bc:	dd0b      	ble.n	80068d6 <floor+0x9e>
 80068be:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80068c2:	d104      	bne.n	80068ce <floor+0x96>
 80068c4:	ee10 2a10 	vmov	r2, s0
 80068c8:	460b      	mov	r3, r1
 80068ca:	f7f9 fc83 	bl	80001d4 <__adddf3>
 80068ce:	ec41 0b10 	vmov	d0, r0, r1
 80068d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068d6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80068da:	f04f 37ff 	mov.w	r7, #4294967295
 80068de:	40df      	lsrs	r7, r3
 80068e0:	4238      	tst	r0, r7
 80068e2:	d0f4      	beq.n	80068ce <floor+0x96>
 80068e4:	a310      	add	r3, pc, #64	; (adr r3, 8006928 <floor+0xf0>)
 80068e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80068ea:	f7f9 fc73 	bl	80001d4 <__adddf3>
 80068ee:	2200      	movs	r2, #0
 80068f0:	2300      	movs	r3, #0
 80068f2:	f7fa f8b5 	bl	8000a60 <__aeabi_dcmpgt>
 80068f6:	2800      	cmp	r0, #0
 80068f8:	d0c1      	beq.n	800687e <floor+0x46>
 80068fa:	2c00      	cmp	r4, #0
 80068fc:	da0a      	bge.n	8006914 <floor+0xdc>
 80068fe:	2e14      	cmp	r6, #20
 8006900:	d101      	bne.n	8006906 <floor+0xce>
 8006902:	3401      	adds	r4, #1
 8006904:	e006      	b.n	8006914 <floor+0xdc>
 8006906:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800690a:	2301      	movs	r3, #1
 800690c:	40b3      	lsls	r3, r6
 800690e:	441d      	add	r5, r3
 8006910:	45a8      	cmp	r8, r5
 8006912:	d8f6      	bhi.n	8006902 <floor+0xca>
 8006914:	ea25 0507 	bic.w	r5, r5, r7
 8006918:	e7b1      	b.n	800687e <floor+0x46>
 800691a:	2500      	movs	r5, #0
 800691c:	462c      	mov	r4, r5
 800691e:	e7ae      	b.n	800687e <floor+0x46>
 8006920:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8006924:	e7ab      	b.n	800687e <floor+0x46>
 8006926:	bf00      	nop
 8006928:	8800759c 	.word	0x8800759c
 800692c:	7e37e43c 	.word	0x7e37e43c
 8006930:	bff00000 	.word	0xbff00000
 8006934:	000fffff 	.word	0x000fffff

08006938 <_init>:
 8006938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800693a:	bf00      	nop
 800693c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800693e:	bc08      	pop	{r3}
 8006940:	469e      	mov	lr, r3
 8006942:	4770      	bx	lr

08006944 <_fini>:
 8006944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006946:	bf00      	nop
 8006948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800694a:	bc08      	pop	{r3}
 800694c:	469e      	mov	lr, r3
 800694e:	4770      	bx	lr
