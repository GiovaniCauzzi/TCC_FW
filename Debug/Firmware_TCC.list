
Firmware_TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005930  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005ab8  08005ab8  00015ab8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005ad8  08005ad8  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005ad8  08005ad8  00015ad8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ae0  08005ae0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ae0  08005ae0  00015ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ae4  08005ae4  00015ae4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005ae8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          0000038c  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000039c  2000039c  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013546  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000298d  00000000  00000000  000335c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001208  00000000  00000000  00035f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e45  00000000  00000000  00037160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000217e8  00000000  00000000  00037fa5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017581  00000000  00000000  0005978d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d0e83  00000000  00000000  00070d0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d38  00000000  00000000  00141b94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  001468cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005aa0 	.word	0x08005aa0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005aa0 	.word	0x08005aa0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <codec_init>:
 */

#include "codec.h"

void codec_init(I2C_HandleTypeDef *i2c_instance)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	aux[1] = ; // low byte data
	aux[0] = ; // high byte data
	result = codec_set_reg(i2c_instance, dREG_BLABLA, &aux, 2);
	*/

	aux[1] = 0x00;
 80004cc:	2300      	movs	r3, #0
 80004ce:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80004d0:	2300      	movs	r3, #0
 80004d2:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_SW_RESET, &aux, 2);
 80004d4:	f107 020c 	add.w	r2, r7, #12
 80004d8:	2302      	movs	r3, #2
 80004da:	2100      	movs	r1, #0
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f96e 	bl	80007be <codec_set_reg>
 80004e2:	4603      	mov	r3, r0
 80004e4:	73fb      	strb	r3, [r7, #15]


	aux[1] = 0xC8;
 80004e6:	23c8      	movs	r3, #200	; 0xc8
 80004e8:	737b      	strb	r3, [r7, #13]
	aux[0] = 0xC8;
 80004ea:	23c8      	movs	r3, #200	; 0xc8
 80004ec:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOUT, &aux, 2);
 80004ee:	f107 020c 	add.w	r2, r7, #12
 80004f2:	2302      	movs	r3, #2
 80004f4:	2102      	movs	r1, #2
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f961 	bl	80007be <codec_set_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_HPOUT,databuffer, 2);
 8000500:	f107 0208 	add.w	r2, r7, #8
 8000504:	2302      	movs	r3, #2
 8000506:	2102      	movs	r1, #2
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f980 	bl	800080e <codec_read_reg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_SW_RESET, I2C_MEMADD_SIZE_8BIT, &aux, 2, dCODEC_HAL_MAX_DELAY);
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_HPOUT, I2C_MEMADD_SIZE_8BIT, &aux, 2, dCODEC_HAL_MAX_DELAY);

	aux[1] = 0b00001000;
 8000512:	2308      	movs	r3, #8
 8000514:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;
 8000516:	2308      	movs	r3, #8
 8000518:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT1, &aux, 2);
 800051a:	f107 020c 	add.w	r2, r7, #12
 800051e:	2302      	movs	r3, #2
 8000520:	2103      	movs	r1, #3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f94b 	bl	80007be <codec_set_reg>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT2, &aux, 2);
 8000534:	f107 020c 	add.w	r2, r7, #12
 8000538:	2302      	movs	r3, #2
 800053a:	2105      	movs	r1, #5
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f93e 	bl	80007be <codec_set_reg>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000546:	2300      	movs	r3, #0
 8000548:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 800054a:	2300      	movs	r3, #0
 800054c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_MIC_INPUT_MODE_GAIN, &aux, 2);
 800054e:	f107 020c 	add.w	r2, r7, #12
 8000552:	2302      	movs	r3, #2
 8000554:	210d      	movs	r1, #13
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f931 	bl	80007be <codec_set_reg>
 800055c:	4603      	mov	r3, r0
 800055e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000; //+12db //0b00001000;
 8000560:	2300      	movs	r3, #0
 8000562:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000; //+12db //0b00001000;
 8000564:	2300      	movs	r3, #0
 8000566:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_INPUT_MODE, &aux, 2);
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	2302      	movs	r3, #2
 800056e:	210f      	movs	r1, #15
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f924 	bl	80007be <codec_set_reg>
 8000576:	4603      	mov	r3, r0
 8000578:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 800057a:	2300      	movs	r3, #0
 800057c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 800057e:	2300      	movs	r3, #0
 8000580:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_MIX_CONTROL, &aux, 2);
 8000582:	f107 020c 	add.w	r2, r7, #12
 8000586:	2302      	movs	r3, #2
 8000588:	2127      	movs	r1, #39	; 0x27
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f917 	bl	80007be <codec_set_reg>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000594:	2300      	movs	r3, #0
 8000596:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000598:	2300      	movs	r3, #0
 800059a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL1, &aux, 2);
 800059c:	f107 020c 	add.w	r2, r7, #12
 80005a0:	2302      	movs	r3, #2
 80005a2:	213b      	movs	r1, #59	; 0x3b
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f000 f90a 	bl	80007be <codec_set_reg>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001001;//000110; // TUDO UNMUTED 
 80005ae:	2349      	movs	r3, #73	; 0x49
 80005b0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80005b2:	2300      	movs	r3, #0
 80005b4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL2, &aux, 2);
 80005b6:	f107 020c 	add.w	r2, r7, #12
 80005ba:	2302      	movs	r3, #2
 80005bc:	213c      	movs	r1, #60	; 0x3c
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f000 f8fd 	bl	80007be <codec_set_reg>
 80005c4:	4603      	mov	r3, r0
 80005c6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001001; // TUDO UNMUTED 
 80005c8:	2349      	movs	r3, #73	; 0x49
 80005ca:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80005cc:	2300      	movs	r3, #0
 80005ce:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL2, &aux, 2);
 80005d0:	f107 020c 	add.w	r2, r7, #12
 80005d4:	2302      	movs	r3, #2
 80005d6:	213e      	movs	r1, #62	; 0x3e
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f000 f8f0 	bl	80007be <codec_set_reg>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL1, &aux, 2);
 80005ea:	f107 020c 	add.w	r2, r7, #12
 80005ee:	2302      	movs	r3, #2
 80005f0:	213d      	movs	r1, #61	; 0x3d
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f000 f8e3 	bl	80007be <codec_set_reg>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111001;
 80005fc:	2379      	movs	r3, #121	; 0x79
 80005fe:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000600:	2300      	movs	r3, #0
 8000602:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL3, &aux, 2);
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	2302      	movs	r3, #2
 800060a:	214f      	movs	r1, #79	; 0x4f
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f000 f8d6 	bl	80007be <codec_set_reg>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111001;
 8000616:	2379      	movs	r3, #121	; 0x79
 8000618:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 800061a:	2300      	movs	r3, #0
 800061c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXR_CTRL3, &aux, 2);
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	2302      	movs	r3, #2
 8000624:	2152      	movs	r1, #82	; 0x52
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f000 f8c9 	bl	80007be <codec_set_reg>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000630:	2300      	movs	r3, #0
 8000632:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b01110000;
 8000634:	2370      	movs	r3, #112	; 0x70
 8000636:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LOUTMIX_CTRL, &aux, 2);
 8000638:	f107 020c 	add.w	r2, r7, #12
 800063c:	2302      	movs	r3, #2
 800063e:	2153      	movs	r1, #83	; 0x53
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f000 f8bc 	bl	80007be <codec_set_reg>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00101111;
 800064a:	232f      	movs	r3, #47	; 0x2f
 800064c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00101111;
 800064e:	232f      	movs	r3, #47	; 0x2f
 8000650:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_VOL_CTRL, &aux, 2);
 8000652:	f107 020c 	add.w	r2, r7, #12
 8000656:	2302      	movs	r3, #2
 8000658:	211c      	movs	r1, #28
 800065a:	6878      	ldr	r0, [r7, #4]
 800065c:	f000 f8af 	bl	80007be <codec_set_reg>
 8000660:	4603      	mov	r3, r0
 8000662:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 8000664:	2300      	movs	r3, #0
 8000666:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8000668:	2300      	movs	r3, #0
 800066a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_BOOST_CTRL, &aux, 2);
 800066c:	f107 020c 	add.w	r2, r7, #12
 8000670:	2302      	movs	r3, #2
 8000672:	211e      	movs	r1, #30
 8000674:	6878      	ldr	r0, [r7, #4]
 8000676:	f000 f8a2 	bl	80007be <codec_set_reg>
 800067a:	4603      	mov	r3, r0
 800067c:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b11000000;
 800067e:	23c0      	movs	r3, #192	; 0xc0
 8000680:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000;
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC2DAC_DIG_MIX_CTRL, &aux, 2);
 8000686:	f107 020c 	add.w	r2, r7, #12
 800068a:	2302      	movs	r3, #2
 800068c:	2129      	movs	r1, #41	; 0x29
 800068e:	6878      	ldr	r0, [r7, #4]
 8000690:	f000 f895 	bl	80007be <codec_set_reg>
 8000694:	4603      	mov	r3, r0
 8000696:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0xAF;
 8000698:	23af      	movs	r3, #175	; 0xaf
 800069a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0xAF;
 800069c:	23af      	movs	r3, #175	; 0xaf
 800069e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DACL1_R1_DIG_VOL, &aux, 2);
 80006a0:	f107 020c 	add.w	r2, r7, #12
 80006a4:	2302      	movs	r3, #2
 80006a6:	2119      	movs	r1, #25
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f888 	bl	80007be <codec_set_reg>
 80006ae:	4603      	mov	r3, r0
 80006b0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01000010;
 80006b2:	2342      	movs	r3, #66	; 0x42
 80006b4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 80006b6:	2302      	movs	r3, #2
 80006b8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DAC_DIG_MIX_CTRL, &aux, 2);
 80006ba:	f107 020c 	add.w	r2, r7, #12
 80006be:	2302      	movs	r3, #2
 80006c0:	212a      	movs	r1, #42	; 0x2a
 80006c2:	6878      	ldr	r0, [r7, #4]
 80006c4:	f000 f87b 	bl	80007be <codec_set_reg>
 80006c8:	4603      	mov	r3, r0
 80006ca:	73fb      	strb	r3, [r7, #15]
Set MX-FA[0] to “1” // For MCLK input clock getting control
Set MX-61[15] to “1” // Enable I2S-1
Set MX-70[15] to “0” // Enable Master mode
*/

	aux[1] = 0b00001001;
 80006cc:	2309      	movs	r3, #9
 80006ce:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80006d0:	2300      	movs	r3, #0
 80006d2:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GENERAL_CTRL1, &aux, 2);
 80006d4:	f107 020c 	add.w	r2, r7, #12
 80006d8:	2302      	movs	r3, #2
 80006da:	21fa      	movs	r1, #250	; 0xfa
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f86e 	bl	80007be <codec_set_reg>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000110;
 80006e6:	2306      	movs	r3, #6
 80006e8:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10011000;
 80006ea:	2398      	movs	r3, #152	; 0x98
 80006ec:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL1, &aux, 2);
 80006ee:	f107 020c 	add.w	r2, r7, #12
 80006f2:	2302      	movs	r3, #2
 80006f4:	2161      	movs	r1, #97	; 0x61
 80006f6:	6878      	ldr	r0, [r7, #4]
 80006f8:	f000 f861 	bl	80007be <codec_set_reg>
 80006fc:	4603      	mov	r3, r0
 80006fe:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000700:	2300      	movs	r3, #0
 8000702:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10001000;
 8000704:	2388      	movs	r3, #136	; 0x88
 8000706:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL2, &aux, 2);
 8000708:	f107 020c 	add.w	r2, r7, #12
 800070c:	2302      	movs	r3, #2
 800070e:	2162      	movs	r1, #98	; 0x62
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f854 	bl	80007be <codec_set_reg>
 8000716:	4603      	mov	r3, r0
 8000718:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00011001;
 800071a:	2319      	movs	r3, #25
 800071c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11111000;
 800071e:	23f8      	movs	r3, #248	; 0xf8
 8000720:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL3, &aux, 2);
 8000722:	f107 020c 	add.w	r2, r7, #12
 8000726:	2302      	movs	r3, #2
 8000728:	2163      	movs	r1, #99	; 0x63
 800072a:	6878      	ldr	r0, [r7, #4]
 800072c:	f000 f847 	bl	80007be <codec_set_reg>
 8000730:	4603      	mov	r3, r0
 8000732:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 8000734:	2300      	movs	r3, #0
 8000736:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11001100;
 8000738:	23cc      	movs	r3, #204	; 0xcc
 800073a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL5, &aux, 2);
 800073c:	f107 020c 	add.w	r2, r7, #12
 8000740:	2302      	movs	r3, #2
 8000742:	2165      	movs	r1, #101	; 0x65
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f000 f83a 	bl	80007be <codec_set_reg>
 800074a:	4603      	mov	r3, r0
 800074c:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 800074e:	2300      	movs	r3, #0
 8000750:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00110011;
 8000752:	2333      	movs	r3, #51	; 0x33
 8000754:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL6, &aux, 2);
 8000756:	f107 020c 	add.w	r2, r7, #12
 800075a:	2302      	movs	r3, #2
 800075c:	2166      	movs	r1, #102	; 0x66
 800075e:	6878      	ldr	r0, [r7, #4]
 8000760:	f000 f82d 	bl	80007be <codec_set_reg>
 8000764:	4603      	mov	r3, r0
 8000766:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000110;
 8000768:	2306      	movs	r3, #6
 800076a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10011000; // config device as slave
 800076c:	2398      	movs	r3, #152	; 0x98
 800076e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DIG_INTERFACE_CONTROL, &aux, 2);
 8000770:	f107 020c 	add.w	r2, r7, #12
 8000774:	2302      	movs	r3, #2
 8000776:	2170      	movs	r1, #112	; 0x70
 8000778:	6878      	ldr	r0, [r7, #4]
 800077a:	f000 f820 	bl	80007be <codec_set_reg>
 800077e:	4603      	mov	r3, r0
 8000780:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000101;
 8000782:	2305      	movs	r3, #5
 8000784:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00110000;
 8000786:	2330      	movs	r3, #48	; 0x30
 8000788:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DAC_CLK_CTRL1, &aux, 2);
 800078a:	f107 020c 	add.w	r2, r7, #12
 800078e:	2302      	movs	r3, #2
 8000790:	2173      	movs	r1, #115	; 0x73
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f000 f813 	bl	80007be <codec_set_reg>
 8000798:	4603      	mov	r3, r0
 800079a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;
 800079c:	2308      	movs	r3, #8
 800079e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80007a0:	2300      	movs	r3, #0
 80007a2:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GLOBAL_CLK_CTRL, &aux, 2);
 80007a4:	f107 020c 	add.w	r2, r7, #12
 80007a8:	2302      	movs	r3, #2
 80007aa:	2180      	movs	r1, #128	; 0x80
 80007ac:	6878      	ldr	r0, [r7, #4]
 80007ae:	f000 f806 	bl	80007be <codec_set_reg>
 80007b2:	4603      	mov	r3, r0
 80007b4:	73fb      	strb	r3, [r7, #15]
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}

080007be <codec_set_reg>:

HAL_StatusTypeDef codec_set_reg(I2C_HandleTypeDef *i2c_instance, unsigned char MemAddress, unsigned char *pdata, unsigned int size)
{
 80007be:	b580      	push	{r7, lr}
 80007c0:	b08a      	sub	sp, #40	; 0x28
 80007c2:	af04      	add	r7, sp, #16
 80007c4:	60f8      	str	r0, [r7, #12]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	460b      	mov	r3, r1
 80007cc:	72fb      	strb	r3, [r7, #11]
	uint32_t delayTosco = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	617b      	str	r3, [r7, #20]
	uint32_t timer = 50000;
 80007d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80007d6:	613b      	str	r3, [r7, #16]

	while(delayTosco++ < timer){}
 80007d8:	bf00      	nop
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	1c5a      	adds	r2, r3, #1
 80007de:	617a      	str	r2, [r7, #20]
 80007e0:	693a      	ldr	r2, [r7, #16]
 80007e2:	429a      	cmp	r2, r3
 80007e4:	d8f9      	bhi.n	80007da <codec_set_reg+0x1c>
	return HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 80007e6:	7afb      	ldrb	r3, [r7, #11]
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	683b      	ldr	r3, [r7, #0]
 80007ec:	b29b      	uxth	r3, r3
 80007ee:	f04f 31ff 	mov.w	r1, #4294967295
 80007f2:	9102      	str	r1, [sp, #8]
 80007f4:	9301      	str	r3, [sp, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	9300      	str	r3, [sp, #0]
 80007fa:	2301      	movs	r3, #1
 80007fc:	2136      	movs	r1, #54	; 0x36
 80007fe:	68f8      	ldr	r0, [r7, #12]
 8000800:	f002 f8ce 	bl	80029a0 <HAL_I2C_Mem_Write>
 8000804:	4603      	mov	r3, r0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <codec_read_reg>:
uint8_t *pData,
uint16_t Size,
uint32_t Timeout)*/

HAL_StatusTypeDef codec_read_reg(I2C_HandleTypeDef *i2c_instance, uint16_t MemAddress, uint8_t * pdata, uint16_t size)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b088      	sub	sp, #32
 8000812:	af04      	add	r7, sp, #16
 8000814:	60f8      	str	r0, [r7, #12]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	461a      	mov	r2, r3
 800081a:	460b      	mov	r3, r1
 800081c:	817b      	strh	r3, [r7, #10]
 800081e:	4613      	mov	r3, r2
 8000820:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 8000822:	897a      	ldrh	r2, [r7, #10]
 8000824:	f04f 33ff 	mov.w	r3, #4294967295
 8000828:	9302      	str	r3, [sp, #8]
 800082a:	893b      	ldrh	r3, [r7, #8]
 800082c:	9301      	str	r3, [sp, #4]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	9300      	str	r3, [sp, #0]
 8000832:	2301      	movs	r3, #1
 8000834:	2136      	movs	r1, #54	; 0x36
 8000836:	68f8      	ldr	r0, [r7, #12]
 8000838:	f002 f9ac 	bl	8002b94 <HAL_I2C_Mem_Read>
 800083c:	4603      	mov	r3, r0
}
 800083e:	4618      	mov	r0, r3
 8000840:	3710      	adds	r7, #16
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
	...

08000848 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[0];
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 8000852:	4a08      	ldr	r2, [pc, #32]	; (8000874 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000854:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[0];
 8000856:	4b08      	ldr	r3, [pc, #32]	; (8000878 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000858:	4a08      	ldr	r2, [pc, #32]	; (800087c <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 800085a:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 800085c:	4b08      	ldr	r3, [pc, #32]	; (8000880 <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 800085e:	2201      	movs	r2, #1
 8000860:	701a      	strb	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	370c      	adds	r7, #12
 8000866:	46bd      	mov	sp, r7
 8000868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086c:	4770      	bx	lr
 800086e:	bf00      	nop
 8000870:	20000370 	.word	0x20000370
 8000874:	20000270 	.word	0x20000270
 8000878:	20000000 	.word	0x20000000
 800087c:	200002f0 	.word	0x200002f0
 8000880:	20000374 	.word	0x20000374

08000884 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[dBUFFER_SIZE / 2];
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800088e:	4a08      	ldr	r2, [pc, #32]	; (80008b0 <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 8000890:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[dBUFFER_SIZE / 2];
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000894:	4a08      	ldr	r2, [pc, #32]	; (80008b8 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000896:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 8000898:	4b08      	ldr	r3, [pc, #32]	; (80008bc <HAL_I2SEx_TxRxCpltCallback+0x38>)
 800089a:	2201      	movs	r2, #1
 800089c:	701a      	strb	r2, [r3, #0]
}
 800089e:	bf00      	nop
 80008a0:	370c      	adds	r7, #12
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	20000370 	.word	0x20000370
 80008b0:	200002b0 	.word	0x200002b0
 80008b4:	20000000 	.word	0x20000000
 80008b8:	20000330 	.word	0x20000330
 80008bc:	20000374 	.word	0x20000374

080008c0 <processData>:
  }
    
}

void processData()
{
 80008c0:	b480      	push	{r7}
 80008c2:	b083      	sub	sp, #12
 80008c4:	af00      	add	r7, sp, #0
  static float leftIn, leftOut;
  static float rightIn, rightOut;

  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 80008c6:	2300      	movs	r3, #0
 80008c8:	80fb      	strh	r3, [r7, #6]
 80008ca:	e07c      	b.n	80009c6 <processData+0x106>
  {

    //================ LEFT CHANNEL ================
    // Get ADC input and convert it to float
    leftIn = INT16_TO_FLOAT * inBufferPtr[n];
 80008cc:	4b44      	ldr	r3, [pc, #272]	; (80009e0 <processData+0x120>)
 80008ce:	681a      	ldr	r2, [r3, #0]
 80008d0:	88fb      	ldrh	r3, [r7, #6]
 80008d2:	005b      	lsls	r3, r3, #1
 80008d4:	4413      	add	r3, r2
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b21b      	sxth	r3, r3
 80008da:	ee07 3a90 	vmov	s15, r3
 80008de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e2:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80009e4 <processData+0x124>
 80008e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008ea:	4b3f      	ldr	r3, [pc, #252]	; (80009e8 <processData+0x128>)
 80008ec:	edc3 7a00 	vstr	s15, [r3]
    if (leftIn > 1.0f)
 80008f0:	4b3d      	ldr	r3, [pc, #244]	; (80009e8 <processData+0x128>)
 80008f2:	edd3 7a00 	vldr	s15, [r3]
 80008f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80008fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80008fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000902:	dd09      	ble.n	8000918 <processData+0x58>
    {
      leftIn -= 2.0f;
 8000904:	4b38      	ldr	r3, [pc, #224]	; (80009e8 <processData+0x128>)
 8000906:	edd3 7a00 	vldr	s15, [r3]
 800090a:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800090e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000912:	4b35      	ldr	r3, [pc, #212]	; (80009e8 <processData+0x128>)
 8000914:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    leftOut = leftIn;
 8000918:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <processData+0x128>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	4a33      	ldr	r2, [pc, #204]	; (80009ec <processData+0x12c>)
 800091e:	6013      	str	r3, [r2, #0]

    // Convert back to signed int  and set DAC output
    outBufferPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 8000920:	4b32      	ldr	r3, [pc, #200]	; (80009ec <processData+0x12c>)
 8000922:	edd3 7a00 	vldr	s15, [r3]
 8000926:	ed9f 7a32 	vldr	s14, [pc, #200]	; 80009f0 <processData+0x130>
 800092a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800092e:	4b31      	ldr	r3, [pc, #196]	; (80009f4 <processData+0x134>)
 8000930:	681a      	ldr	r2, [r3, #0]
 8000932:	88fb      	ldrh	r3, [r7, #6]
 8000934:	005b      	lsls	r3, r3, #1
 8000936:	4413      	add	r3, r2
 8000938:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800093c:	ee17 2a90 	vmov	r2, s15
 8000940:	b212      	sxth	r2, r2
 8000942:	801a      	strh	r2, [r3, #0]

    //================ RIGHT CHANNEL ================
    // Get ADC input and convert it to float
    rightIn = INT16_TO_FLOAT * inBufferPtr[n+1];
 8000944:	4b26      	ldr	r3, [pc, #152]	; (80009e0 <processData+0x120>)
 8000946:	681a      	ldr	r2, [r3, #0]
 8000948:	88fb      	ldrh	r3, [r7, #6]
 800094a:	3301      	adds	r3, #1
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	4413      	add	r3, r2
 8000950:	881b      	ldrh	r3, [r3, #0]
 8000952:	b21b      	sxth	r3, r3
 8000954:	ee07 3a90 	vmov	s15, r3
 8000958:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800095c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 80009e4 <processData+0x124>
 8000960:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000964:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <processData+0x138>)
 8000966:	edc3 7a00 	vstr	s15, [r3]
    if (rightIn > 1.0f)
 800096a:	4b23      	ldr	r3, [pc, #140]	; (80009f8 <processData+0x138>)
 800096c:	edd3 7a00 	vldr	s15, [r3]
 8000970:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000974:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800097c:	dd09      	ble.n	8000992 <processData+0xd2>
    {
      rightIn -= 2.0f;
 800097e:	4b1e      	ldr	r3, [pc, #120]	; (80009f8 <processData+0x138>)
 8000980:	edd3 7a00 	vldr	s15, [r3]
 8000984:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000988:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800098c:	4b1a      	ldr	r3, [pc, #104]	; (80009f8 <processData+0x138>)
 800098e:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    rightOut = rightIn;
 8000992:	4b19      	ldr	r3, [pc, #100]	; (80009f8 <processData+0x138>)
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	4a19      	ldr	r2, [pc, #100]	; (80009fc <processData+0x13c>)
 8000998:	6013      	str	r3, [r2, #0]

    // Convert back to signed int  and set DAC output
    outBufferPtr[n+1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 800099a:	4b18      	ldr	r3, [pc, #96]	; (80009fc <processData+0x13c>)
 800099c:	edd3 7a00 	vldr	s15, [r3]
 80009a0:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80009f0 <processData+0x130>
 80009a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a8:	4b12      	ldr	r3, [pc, #72]	; (80009f4 <processData+0x134>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	88fb      	ldrh	r3, [r7, #6]
 80009ae:	3301      	adds	r3, #1
 80009b0:	005b      	lsls	r3, r3, #1
 80009b2:	4413      	add	r3, r2
 80009b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80009b8:	ee17 2a90 	vmov	r2, s15
 80009bc:	b212      	sxth	r2, r2
 80009be:	801a      	strh	r2, [r3, #0]
  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 80009c0:	88fb      	ldrh	r3, [r7, #6]
 80009c2:	3302      	adds	r3, #2
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	88fb      	ldrh	r3, [r7, #6]
 80009c8:	2b1e      	cmp	r3, #30
 80009ca:	f67f af7f 	bls.w	80008cc <processData+0xc>

  }
  flagDataReady = 0;
 80009ce:	4b0c      	ldr	r3, [pc, #48]	; (8000a00 <processData+0x140>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	701a      	strb	r2, [r3, #0]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	20000370 	.word	0x20000370
 80009e4:	38000000 	.word	0x38000000
 80009e8:	20000378 	.word	0x20000378
 80009ec:	2000037c 	.word	0x2000037c
 80009f0:	47000000 	.word	0x47000000
 80009f4:	20000000 	.word	0x20000000
 80009f8:	20000380 	.word	0x20000380
 80009fc:	20000384 	.word	0x20000384
 8000a00:	20000374 	.word	0x20000374

08000a04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b0a2      	sub	sp, #136	; 0x88
 8000a08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a0a:	f000 fd5f 	bl	80014cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a0e:	f000 f851 	bl	8000ab4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a12:	f000 f9dd 	bl	8000dd0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a16:	f000 f9b3 	bl	8000d80 <MX_DMA_Init>
  MX_I2C2_Init();
 8000a1a:	f000 f907 	bl	8000c2c <MX_I2C2_Init>
  MX_I2S2_Init();
 8000a1e:	f000 f933 	bl	8000c88 <MX_I2S2_Init>
  MX_ADC1_Init();
 8000a22:	f000 f8b1 	bl	8000b88 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000a26:	f000 f981 	bl	8000d2c <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000a2a:	f000 f95b 	bl	8000ce4 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  codec_init(&hi2c2);
 8000a2e:	481a      	ldr	r0, [pc, #104]	; (8000a98 <main+0x94>)
 8000a30:	f7ff fd48 	bl	80004c4 <codec_init>
  HAL_TIM_Base_Start_IT(&htim14);
 8000a34:	4819      	ldr	r0, [pc, #100]	; (8000a9c <main+0x98>)
 8000a36:	f004 faf1 	bl	800501c <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef status = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)dacData, (uint16_t *)adcData, dBUFFER_SIZE);
 8000a3a:	2340      	movs	r3, #64	; 0x40
 8000a3c:	4a18      	ldr	r2, [pc, #96]	; (8000aa0 <main+0x9c>)
 8000a3e:	4919      	ldr	r1, [pc, #100]	; (8000aa4 <main+0xa0>)
 8000a40:	4819      	ldr	r0, [pc, #100]	; (8000aa8 <main+0xa4>)
 8000a42:	f003 f86f 	bl	8003b24 <HAL_I2SEx_TransmitReceive_DMA>
 8000a46:	4603      	mov	r3, r0
 8000a48:	f887 3083 	strb.w	r3, [r7, #131]	; 0x83

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (flagDataReady)
 8000a4c:	4b17      	ldr	r3, [pc, #92]	; (8000aac <main+0xa8>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d0fb      	beq.n	8000a4c <main+0x48>
    {
		int16_t current_ready_half[dBUFFER_SIZE];
		int i = 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		for (i = 0; i <= dBUFFER_SIZE; i++) {
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a60:	e013      	b.n	8000a8a <main+0x86>
			current_ready_half[i] = inBufferPtr[i];
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <main+0xac>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a6a:	005b      	lsls	r3, r3, #1
 8000a6c:	4413      	add	r3, r2
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b21a      	sxth	r2, r3
 8000a72:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a76:	005b      	lsls	r3, r3, #1
 8000a78:	3388      	adds	r3, #136	; 0x88
 8000a7a:	443b      	add	r3, r7
 8000a7c:	f823 2c88 	strh.w	r2, [r3, #-136]
		for (i = 0; i <= dBUFFER_SIZE; i++) {
 8000a80:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a84:	3301      	adds	r3, #1
 8000a86:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8000a8a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000a8e:	2b40      	cmp	r3, #64	; 0x40
 8000a90:	dde7      	ble.n	8000a62 <main+0x5e>
		}
		processData();
 8000a92:	f7ff ff15 	bl	80008c0 <processData>
    if (flagDataReady)
 8000a96:	e7d9      	b.n	8000a4c <main+0x48>
 8000a98:	20000088 	.word	0x20000088
 8000a9c:	200001e4 	.word	0x200001e4
 8000aa0:	20000270 	.word	0x20000270
 8000aa4:	200002f0 	.word	0x200002f0
 8000aa8:	200000dc 	.word	0x200000dc
 8000aac:	20000374 	.word	0x20000374
 8000ab0:	20000370 	.word	0x20000370

08000ab4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b094      	sub	sp, #80	; 0x50
 8000ab8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aba:	f107 0320 	add.w	r3, r7, #32
 8000abe:	2230      	movs	r2, #48	; 0x30
 8000ac0:	2100      	movs	r1, #0
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f004 ffc0 	bl	8005a48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac8:	f107 030c 	add.w	r3, r7, #12
 8000acc:	2200      	movs	r2, #0
 8000ace:	601a      	str	r2, [r3, #0]
 8000ad0:	605a      	str	r2, [r3, #4]
 8000ad2:	609a      	str	r2, [r3, #8]
 8000ad4:	60da      	str	r2, [r3, #12]
 8000ad6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	4b28      	ldr	r3, [pc, #160]	; (8000b80 <SystemClock_Config+0xcc>)
 8000ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae0:	4a27      	ldr	r2, [pc, #156]	; (8000b80 <SystemClock_Config+0xcc>)
 8000ae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae8:	4b25      	ldr	r3, [pc, #148]	; (8000b80 <SystemClock_Config+0xcc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000af0:	60bb      	str	r3, [r7, #8]
 8000af2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000af4:	2300      	movs	r3, #0
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	4b22      	ldr	r3, [pc, #136]	; (8000b84 <SystemClock_Config+0xd0>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a21      	ldr	r2, [pc, #132]	; (8000b84 <SystemClock_Config+0xd0>)
 8000afe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b02:	6013      	str	r3, [r2, #0]
 8000b04:	4b1f      	ldr	r3, [pc, #124]	; (8000b84 <SystemClock_Config+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b0c:	607b      	str	r3, [r7, #4]
 8000b0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b10:	2301      	movs	r3, #1
 8000b12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000b24:	230d      	movs	r3, #13
 8000b26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000b28:	23a8      	movs	r3, #168	; 0xa8
 8000b2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b30:	2304      	movs	r3, #4
 8000b32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b34:	f107 0320 	add.w	r3, r7, #32
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f003 fc87 	bl	800444c <HAL_RCC_OscConfig>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b44:	f000 fa18 	bl	8000f78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b48:	230f      	movs	r3, #15
 8000b4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b50:	2300      	movs	r3, #0
 8000b52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b54:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000b58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b5e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000b60:	f107 030c 	add.w	r3, r7, #12
 8000b64:	2105      	movs	r1, #5
 8000b66:	4618      	mov	r0, r3
 8000b68:	f003 fee8 	bl	800493c <HAL_RCC_ClockConfig>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b72:	f000 fa01 	bl	8000f78 <Error_Handler>
  }
}
 8000b76:	bf00      	nop
 8000b78:	3750      	adds	r7, #80	; 0x50
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000

08000b88 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b8e:	463b      	mov	r3, r7
 8000b90:	2200      	movs	r2, #0
 8000b92:	601a      	str	r2, [r3, #0]
 8000b94:	605a      	str	r2, [r3, #4]
 8000b96:	609a      	str	r2, [r3, #8]
 8000b98:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b9a:	4b21      	ldr	r3, [pc, #132]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000b9c:	4a21      	ldr	r2, [pc, #132]	; (8000c24 <MX_ADC1_Init+0x9c>)
 8000b9e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ba0:	4b1f      	ldr	r3, [pc, #124]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000ba2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ba6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bae:	4b1c      	ldr	r3, [pc, #112]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bb4:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bba:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bc8:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bca:	4a17      	ldr	r2, [pc, #92]	; (8000c28 <MX_ADC1_Init+0xa0>)
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bce:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bda:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be2:	4b0f      	ldr	r3, [pc, #60]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000be8:	480d      	ldr	r0, [pc, #52]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000bea:	f000 fce1 	bl	80015b0 <HAL_ADC_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000bf4:	f000 f9c0 	bl	8000f78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c00:	2300      	movs	r3, #0
 8000c02:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c04:	463b      	mov	r3, r7
 8000c06:	4619      	mov	r1, r3
 8000c08:	4805      	ldr	r0, [pc, #20]	; (8000c20 <MX_ADC1_Init+0x98>)
 8000c0a:	f000 fd15 	bl	8001638 <HAL_ADC_ConfigChannel>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c14:	f000 f9b0 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c18:	bf00      	nop
 8000c1a:	3710      	adds	r7, #16
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000040 	.word	0x20000040
 8000c24:	40012000 	.word	0x40012000
 8000c28:	0f000001 	.word	0x0f000001

08000c2c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000c30:	4b12      	ldr	r3, [pc, #72]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c32:	4a13      	ldr	r2, [pc, #76]	; (8000c80 <MX_I2C2_Init+0x54>)
 8000c34:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8000c36:	4b11      	ldr	r3, [pc, #68]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c38:	4a12      	ldr	r2, [pc, #72]	; (8000c84 <MX_I2C2_Init+0x58>)
 8000c3a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c3c:	4b0f      	ldr	r3, [pc, #60]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c48:	4b0c      	ldr	r3, [pc, #48]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c4e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c50:	4b0a      	ldr	r3, [pc, #40]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000c56:	4b09      	ldr	r3, [pc, #36]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c5c:	4b07      	ldr	r3, [pc, #28]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c62:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000c68:	4804      	ldr	r0, [pc, #16]	; (8000c7c <MX_I2C2_Init+0x50>)
 8000c6a:	f001 fd55 	bl	8002718 <HAL_I2C_Init>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000c74:	f000 f980 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	20000088 	.word	0x20000088
 8000c80:	40005800 	.word	0x40005800
 8000c84:	000186a0 	.word	0x000186a0

08000c88 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000c8c:	4b13      	ldr	r3, [pc, #76]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <MX_I2S2_Init+0x58>)
 8000c90:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000c92:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000c94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c98:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000ca0:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cac:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000cae:	4b0b      	ldr	r3, [pc, #44]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000cb0:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2S2_Init+0x54>)
 8000cca:	f002 fce5 	bl	8003698 <HAL_I2S_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000cd4:	f000 f950 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	200000dc 	.word	0x200000dc
 8000ce0:	40003800 	.word	0x40003800

08000ce4 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000ce8:	4b0e      	ldr	r3, [pc, #56]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000cea:	4a0f      	ldr	r2, [pc, #60]	; (8000d28 <MX_TIM14_Init+0x44>)
 8000cec:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8000cee:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 8000cfa:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000cfc:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000d00:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000d0e:	4805      	ldr	r0, [pc, #20]	; (8000d24 <MX_TIM14_Init+0x40>)
 8000d10:	f004 f934 	bl	8004f7c <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000d1a:	f000 f92d 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000d1e:	bf00      	nop
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200001e4 	.word	0x200001e4
 8000d28:	40002000 	.word	0x40002000

08000d2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000d30:	4b11      	ldr	r3, [pc, #68]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d32:	4a12      	ldr	r2, [pc, #72]	; (8000d7c <MX_USART1_UART_Init+0x50>)
 8000d34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d3e:	4b0e      	ldr	r3, [pc, #56]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d44:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d4a:	4b0b      	ldr	r3, [pc, #44]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d50:	4b09      	ldr	r3, [pc, #36]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d52:	220c      	movs	r2, #12
 8000d54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d56:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d58:	2200      	movs	r2, #0
 8000d5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_USART1_UART_Init+0x4c>)
 8000d64:	f004 fbae 	bl	80054c4 <HAL_UART_Init>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d6e:	f000 f903 	bl	8000f78 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d72:	bf00      	nop
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	2000022c 	.word	0x2000022c
 8000d7c:	40011000 	.word	0x40011000

08000d80 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b082      	sub	sp, #8
 8000d84:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	607b      	str	r3, [r7, #4]
 8000d8a:	4b10      	ldr	r3, [pc, #64]	; (8000dcc <MX_DMA_Init+0x4c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	4a0f      	ldr	r2, [pc, #60]	; (8000dcc <MX_DMA_Init+0x4c>)
 8000d90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
 8000d96:	4b0d      	ldr	r3, [pc, #52]	; (8000dcc <MX_DMA_Init+0x4c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000da2:	2200      	movs	r2, #0
 8000da4:	2100      	movs	r1, #0
 8000da6:	200e      	movs	r0, #14
 8000da8:	f000 ff3f 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000dac:	200e      	movs	r0, #14
 8000dae:	f000 ff58 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	200f      	movs	r0, #15
 8000db8:	f000 ff37 	bl	8001c2a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000dbc:	200f      	movs	r0, #15
 8000dbe:	f000 ff50 	bl	8001c62 <HAL_NVIC_EnableIRQ>

}
 8000dc2:	bf00      	nop
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	40023800 	.word	0x40023800

08000dd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08a      	sub	sp, #40	; 0x28
 8000dd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd6:	f107 0314 	add.w	r3, r7, #20
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
 8000de4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
 8000dea:	4b2e      	ldr	r3, [pc, #184]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	4a2d      	ldr	r2, [pc, #180]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000df0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000df4:	6313      	str	r3, [r2, #48]	; 0x30
 8000df6:	4b2b      	ldr	r3, [pc, #172]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dfe:	613b      	str	r3, [r7, #16]
 8000e00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
 8000e06:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	4a26      	ldr	r2, [pc, #152]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	6313      	str	r3, [r2, #48]	; 0x30
 8000e12:	4b24      	ldr	r3, [pc, #144]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	f003 0301 	and.w	r3, r3, #1
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b20      	ldr	r3, [pc, #128]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a1f      	ldr	r2, [pc, #124]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e28:	f043 0302 	orr.w	r3, r3, #2
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0302 	and.w	r3, r3, #2
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	607b      	str	r3, [r7, #4]
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	4a18      	ldr	r2, [pc, #96]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	; 0x30
 8000e4a:	4b16      	ldr	r3, [pc, #88]	; (8000ea4 <MX_GPIO_Init+0xd4>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	607b      	str	r3, [r7, #4]
 8000e54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000e5c:	4812      	ldr	r0, [pc, #72]	; (8000ea8 <MX_GPIO_Init+0xd8>)
 8000e5e:	f001 fc27 	bl	80026b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 8000e62:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	480b      	ldr	r0, [pc, #44]	; (8000ea8 <MX_GPIO_Init+0xd8>)
 8000e7c:	f001 fa7c 	bl	8002378 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000e80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4619      	mov	r1, r3
 8000e94:	4804      	ldr	r0, [pc, #16]	; (8000ea8 <MX_GPIO_Init+0xd8>)
 8000e96:	f001 fa6f 	bl	8002378 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3728      	adds	r7, #40	; 0x28
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40023800 	.word	0x40023800
 8000ea8:	40020400 	.word	0x40020400

08000eac <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  //static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a24      	ldr	r2, [pc, #144]	; (8000f4c <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d142      	bne.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x98>
  {
    

    GL_timer_100us = 1;
 8000ebe:	4b24      	ldr	r3, [pc, #144]	; (8000f50 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	601a      	str	r2, [r3, #0]
    count_100us++;
 8000ec4:	4b23      	ldr	r3, [pc, #140]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	4a22      	ldr	r2, [pc, #136]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ecc:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 8000ece:	4b21      	ldr	r3, [pc, #132]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b09      	cmp	r3, #9
 8000ed4:	dd0a      	ble.n	8000eec <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8000ed6:	4b1f      	ldr	r3, [pc, #124]	; (8000f54 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8000edc:	4b1e      	ldr	r3, [pc, #120]	; (8000f58 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000ede:	2201      	movs	r2, #1
 8000ee0:	601a      	str	r2, [r3, #0]
      count_1ms++;
 8000ee2:	4b1e      	ldr	r3, [pc, #120]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000eea:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b09      	cmp	r3, #9
 8000ef2:	dd0a      	ble.n	8000f0a <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8000ef4:	4b19      	ldr	r3, [pc, #100]	; (8000f5c <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8000efa:	4b19      	ldr	r3, [pc, #100]	; (8000f60 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
      count_10ms++;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	3301      	adds	r3, #1
 8000f06:	4a17      	ldr	r2, [pc, #92]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f08:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 8000f0a:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b09      	cmp	r3, #9
 8000f10:	dd0e      	ble.n	8000f30 <HAL_TIM_PeriodElapsedCallback+0x84>
    {
      count_10ms = 0;
 8000f12:	4b14      	ldr	r3, [pc, #80]	; (8000f64 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 8000f18:	4b13      	ldr	r3, [pc, #76]	; (8000f68 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000f1a:	2201      	movs	r2, #1
 8000f1c:	601a      	str	r2, [r3, #0]
      count_100ms++;
 8000f1e:	4b13      	ldr	r3, [pc, #76]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	3301      	adds	r3, #1
 8000f24:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f26:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 8000f28:	2180      	movs	r1, #128	; 0x80
 8000f2a:	4811      	ldr	r0, [pc, #68]	; (8000f70 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000f2c:	f001 fbd9 	bl	80026e2 <HAL_GPIO_TogglePin>
    }

    if(count_100ms >= 10)
 8000f30:	4b0e      	ldr	r3, [pc, #56]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	2b09      	cmp	r3, #9
 8000f36:	dd05      	ble.n	8000f44 <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      count_100ms = 0;
 8000f38:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 8000f3e:	4b0d      	ldr	r3, [pc, #52]	; (8000f74 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000f40:	2201      	movs	r2, #1
 8000f42:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }
}
 8000f44:	bf00      	nop
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	40002000 	.word	0x40002000
 8000f50:	2000002c 	.word	0x2000002c
 8000f54:	20000388 	.word	0x20000388
 8000f58:	20000030 	.word	0x20000030
 8000f5c:	2000038c 	.word	0x2000038c
 8000f60:	20000034 	.word	0x20000034
 8000f64:	20000390 	.word	0x20000390
 8000f68:	20000038 	.word	0x20000038
 8000f6c:	20000394 	.word	0x20000394
 8000f70:	40020400 	.word	0x40020400
 8000f74:	2000003c 	.word	0x2000003c

08000f78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f7c:	b672      	cpsid	i
}
 8000f7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <Error_Handler+0x8>
	...

08000f84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	607b      	str	r3, [r7, #4]
 8000f8e:	4b10      	ldr	r3, [pc, #64]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	4a0f      	ldr	r2, [pc, #60]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000f94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f98:	6453      	str	r3, [r2, #68]	; 0x44
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fa2:	607b      	str	r3, [r7, #4]
 8000fa4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	603b      	str	r3, [r7, #0]
 8000faa:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fae:	4a08      	ldr	r2, [pc, #32]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000fb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb6:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <HAL_MspInit+0x4c>)
 8000fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fbe:	603b      	str	r3, [r7, #0]
 8000fc0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fc2:	bf00      	nop
 8000fc4:	370c      	adds	r7, #12
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	40023800 	.word	0x40023800

08000fd4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08a      	sub	sp, #40	; 0x28
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fdc:	f107 0314 	add.w	r3, r7, #20
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	601a      	str	r2, [r3, #0]
 8000fe4:	605a      	str	r2, [r3, #4]
 8000fe6:	609a      	str	r2, [r3, #8]
 8000fe8:	60da      	str	r2, [r3, #12]
 8000fea:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a17      	ldr	r2, [pc, #92]	; (8001050 <HAL_ADC_MspInit+0x7c>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d127      	bne.n	8001046 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	4b16      	ldr	r3, [pc, #88]	; (8001054 <HAL_ADC_MspInit+0x80>)
 8000ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ffe:	4a15      	ldr	r2, [pc, #84]	; (8001054 <HAL_ADC_MspInit+0x80>)
 8001000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001004:	6453      	str	r3, [r2, #68]	; 0x44
 8001006:	4b13      	ldr	r3, [pc, #76]	; (8001054 <HAL_ADC_MspInit+0x80>)
 8001008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800100a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	4b0f      	ldr	r3, [pc, #60]	; (8001054 <HAL_ADC_MspInit+0x80>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a0e      	ldr	r2, [pc, #56]	; (8001054 <HAL_ADC_MspInit+0x80>)
 800101c:	f043 0301 	orr.w	r3, r3, #1
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b0c      	ldr	r3, [pc, #48]	; (8001054 <HAL_ADC_MspInit+0x80>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0301 	and.w	r3, r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin|POT4_Pin
 800102e:	231f      	movs	r3, #31
 8001030:	617b      	str	r3, [r7, #20]
                          |AD_PWR_SUPPLY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001032:	2303      	movs	r3, #3
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103a:	f107 0314 	add.w	r3, r7, #20
 800103e:	4619      	mov	r1, r3
 8001040:	4805      	ldr	r0, [pc, #20]	; (8001058 <HAL_ADC_MspInit+0x84>)
 8001042:	f001 f999 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001046:	bf00      	nop
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40012000 	.word	0x40012000
 8001054:	40023800 	.word	0x40023800
 8001058:	40020000 	.word	0x40020000

0800105c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b08a      	sub	sp, #40	; 0x28
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
 8001072:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a19      	ldr	r2, [pc, #100]	; (80010e0 <HAL_I2C_MspInit+0x84>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d12c      	bne.n	80010d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	613b      	str	r3, [r7, #16]
 8001082:	4b18      	ldr	r3, [pc, #96]	; (80010e4 <HAL_I2C_MspInit+0x88>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001086:	4a17      	ldr	r2, [pc, #92]	; (80010e4 <HAL_I2C_MspInit+0x88>)
 8001088:	f043 0302 	orr.w	r3, r3, #2
 800108c:	6313      	str	r3, [r2, #48]	; 0x30
 800108e:	4b15      	ldr	r3, [pc, #84]	; (80010e4 <HAL_I2C_MspInit+0x88>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	613b      	str	r3, [r7, #16]
 8001098:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800109a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800109e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a0:	2312      	movs	r3, #18
 80010a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a4:	2300      	movs	r3, #0
 80010a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010a8:	2303      	movs	r3, #3
 80010aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010ac:	2304      	movs	r3, #4
 80010ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	4619      	mov	r1, r3
 80010b6:	480c      	ldr	r0, [pc, #48]	; (80010e8 <HAL_I2C_MspInit+0x8c>)
 80010b8:	f001 f95e 	bl	8002378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <HAL_I2C_MspInit+0x88>)
 80010c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010c4:	4a07      	ldr	r2, [pc, #28]	; (80010e4 <HAL_I2C_MspInit+0x88>)
 80010c6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010ca:	6413      	str	r3, [r2, #64]	; 0x40
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <HAL_I2C_MspInit+0x88>)
 80010ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80010d8:	bf00      	nop
 80010da:	3728      	adds	r7, #40	; 0x28
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}
 80010e0:	40005800 	.word	0x40005800
 80010e4:	40023800 	.word	0x40023800
 80010e8:	40020400 	.word	0x40020400

080010ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08e      	sub	sp, #56	; 0x38
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001104:	f107 0314 	add.w	r3, r7, #20
 8001108:	2200      	movs	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	605a      	str	r2, [r3, #4]
 800110e:	609a      	str	r2, [r3, #8]
 8001110:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	4a6b      	ldr	r2, [pc, #428]	; (80012c4 <HAL_I2S_MspInit+0x1d8>)
 8001118:	4293      	cmp	r3, r2
 800111a:	f040 80cf 	bne.w	80012bc <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800111e:	2301      	movs	r3, #1
 8001120:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8001122:	2332      	movs	r3, #50	; 0x32
 8001124:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001126:	2302      	movs	r3, #2
 8001128:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	4618      	mov	r0, r3
 8001130:	f003 fde4 	bl	8004cfc <HAL_RCCEx_PeriphCLKConfig>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 800113a:	f7ff ff1d 	bl	8000f78 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
 8001142:	4b61      	ldr	r3, [pc, #388]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001146:	4a60      	ldr	r2, [pc, #384]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800114c:	6413      	str	r3, [r2, #64]	; 0x40
 800114e:	4b5e      	ldr	r3, [pc, #376]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001152:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	4b5a      	ldr	r3, [pc, #360]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a59      	ldr	r2, [pc, #356]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b57      	ldr	r3, [pc, #348]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	60fb      	str	r3, [r7, #12]
 8001174:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	60bb      	str	r3, [r7, #8]
 800117a:	4b53      	ldr	r3, [pc, #332]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a52      	ldr	r2, [pc, #328]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001180:	f043 0304 	orr.w	r3, r3, #4
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b50      	ldr	r3, [pc, #320]	; (80012c8 <HAL_I2S_MspInit+0x1dc>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0304 	and.w	r3, r3, #4
 800118e:	60bb      	str	r3, [r7, #8]
 8001190:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001192:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001196:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001198:	2302      	movs	r3, #2
 800119a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119c:	2300      	movs	r3, #0
 800119e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	2300      	movs	r3, #0
 80011a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011a4:	2305      	movs	r3, #5
 80011a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ac:	4619      	mov	r1, r3
 80011ae:	4847      	ldr	r0, [pc, #284]	; (80012cc <HAL_I2S_MspInit+0x1e0>)
 80011b0:	f001 f8e2 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80011b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011ba:	2302      	movs	r3, #2
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011be:	2300      	movs	r3, #0
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c2:	2300      	movs	r3, #0
 80011c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80011c6:	2306      	movs	r3, #6
 80011c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	483e      	ldr	r0, [pc, #248]	; (80012cc <HAL_I2S_MspInit+0x1e0>)
 80011d2:	f001 f8d1 	bl	8002378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80011d6:	2340      	movs	r3, #64	; 0x40
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011e6:	2305      	movs	r3, #5
 80011e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	4837      	ldr	r0, [pc, #220]	; (80012d0 <HAL_I2S_MspInit+0x1e4>)
 80011f2:	f001 f8c1 	bl	8002378 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80011f6:	4b37      	ldr	r3, [pc, #220]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 80011f8:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <HAL_I2S_MspInit+0x1ec>)
 80011fa:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80011fc:	4b35      	ldr	r3, [pc, #212]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001202:	4b34      	ldr	r3, [pc, #208]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001204:	2240      	movs	r2, #64	; 0x40
 8001206:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001208:	4b32      	ldr	r3, [pc, #200]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 800120a:	2200      	movs	r2, #0
 800120c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800120e:	4b31      	ldr	r3, [pc, #196]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001210:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001214:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001216:	4b2f      	ldr	r3, [pc, #188]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001218:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800121c:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800121e:	4b2d      	ldr	r3, [pc, #180]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001220:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001224:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001226:	4b2b      	ldr	r3, [pc, #172]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001228:	f44f 7280 	mov.w	r2, #256	; 0x100
 800122c:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800122e:	4b29      	ldr	r3, [pc, #164]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001230:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001234:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001236:	4b27      	ldr	r3, [pc, #156]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001238:	2200      	movs	r2, #0
 800123a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 800123c:	4825      	ldr	r0, [pc, #148]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 800123e:	f000 fd2b 	bl	8001c98 <HAL_DMA_Init>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d001      	beq.n	800124c <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8001248:	f7ff fe96 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001250:	639a      	str	r2, [r3, #56]	; 0x38
 8001252:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <HAL_I2S_MspInit+0x1e8>)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001258:	4b20      	ldr	r3, [pc, #128]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <HAL_I2S_MspInit+0x1f4>)
 800125c:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800125e:	4b1f      	ldr	r3, [pc, #124]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 8001260:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001264:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001266:	4b1d      	ldr	r3, [pc, #116]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 800126e:	2200      	movs	r2, #0
 8001270:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001272:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 8001274:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001278:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 800127c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001280:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001282:	4b16      	ldr	r3, [pc, #88]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 8001284:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001288:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 800128a:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 800128c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001290:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001292:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 8001294:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001298:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 800129c:	2200      	movs	r2, #0
 800129e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 80012a0:	480e      	ldr	r0, [pc, #56]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 80012a2:	f000 fcf9 	bl	8001c98 <HAL_DMA_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 80012ac:	f7ff fe64 	bl	8000f78 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	4a0a      	ldr	r2, [pc, #40]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 80012b4:	63da      	str	r2, [r3, #60]	; 0x3c
 80012b6:	4a09      	ldr	r2, [pc, #36]	; (80012dc <HAL_I2S_MspInit+0x1f0>)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80012bc:	bf00      	nop
 80012be:	3738      	adds	r7, #56	; 0x38
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	40003800 	.word	0x40003800
 80012c8:	40023800 	.word	0x40023800
 80012cc:	40020400 	.word	0x40020400
 80012d0:	40020800 	.word	0x40020800
 80012d4:	20000124 	.word	0x20000124
 80012d8:	40026070 	.word	0x40026070
 80012dc:	20000184 	.word	0x20000184
 80012e0:	40026058 	.word	0x40026058

080012e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a0e      	ldr	r2, [pc, #56]	; (800132c <HAL_TIM_Base_MspInit+0x48>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d115      	bne.n	8001322 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
 80012fa:	4b0d      	ldr	r3, [pc, #52]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	4a0c      	ldr	r2, [pc, #48]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001300:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <HAL_TIM_Base_MspInit+0x4c>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	202d      	movs	r0, #45	; 0x2d
 8001318:	f000 fc87 	bl	8001c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 800131c:	202d      	movs	r0, #45	; 0x2d
 800131e:	f000 fca0 	bl	8001c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8001322:	bf00      	nop
 8001324:	3710      	adds	r7, #16
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	40002000 	.word	0x40002000
 8001330:	40023800 	.word	0x40023800

08001334 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b08a      	sub	sp, #40	; 0x28
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	2200      	movs	r2, #0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	605a      	str	r2, [r3, #4]
 8001346:	609a      	str	r2, [r3, #8]
 8001348:	60da      	str	r2, [r3, #12]
 800134a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a19      	ldr	r2, [pc, #100]	; (80013b8 <HAL_UART_MspInit+0x84>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d12c      	bne.n	80013b0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <HAL_UART_MspInit+0x88>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001360:	f043 0310 	orr.w	r3, r3, #16
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001372:	2300      	movs	r3, #0
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	4b11      	ldr	r3, [pc, #68]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137a:	4a10      	ldr	r2, [pc, #64]	; (80013bc <HAL_UART_MspInit+0x88>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6313      	str	r3, [r2, #48]	; 0x30
 8001382:	4b0e      	ldr	r3, [pc, #56]	; (80013bc <HAL_UART_MspInit+0x88>)
 8001384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001386:	f003 0301 	and.w	r3, r3, #1
 800138a:	60fb      	str	r3, [r7, #12]
 800138c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800138e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001392:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001394:	2302      	movs	r3, #2
 8001396:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013a0:	2307      	movs	r3, #7
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013a4:	f107 0314 	add.w	r3, r7, #20
 80013a8:	4619      	mov	r1, r3
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <HAL_UART_MspInit+0x8c>)
 80013ac:	f000 ffe4 	bl	8002378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40011000 	.word	0x40011000
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40020000 	.word	0x40020000

080013c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013c8:	e7fe      	b.n	80013c8 <NMI_Handler+0x4>

080013ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ce:	e7fe      	b.n	80013ce <HardFault_Handler+0x4>

080013d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013d4:	e7fe      	b.n	80013d4 <MemManage_Handler+0x4>

080013d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013da:	e7fe      	b.n	80013da <BusFault_Handler+0x4>

080013dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <UsageFault_Handler+0x4>

080013e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013e6:	bf00      	nop
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr

080013f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013fe:	b480      	push	{r7}
 8001400:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001402:	bf00      	nop
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr

0800140c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001410:	f000 f8ae 	bl	8001570 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001414:	bf00      	nop
 8001416:	bd80      	pop	{r7, pc}

08001418 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 800141c:	4802      	ldr	r0, [pc, #8]	; (8001428 <DMA1_Stream3_IRQHandler+0x10>)
 800141e:	f000 fd41 	bl	8001ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001422:	bf00      	nop
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20000184 	.word	0x20000184

0800142c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001430:	4802      	ldr	r0, [pc, #8]	; (800143c <DMA1_Stream4_IRQHandler+0x10>)
 8001432:	f000 fd37 	bl	8001ea4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000124 	.word	0x20000124

08001440 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001444:	4802      	ldr	r0, [pc, #8]	; (8001450 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001446:	f003 fe59 	bl	80050fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	200001e4 	.word	0x200001e4

08001454 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001458:	4b06      	ldr	r3, [pc, #24]	; (8001474 <SystemInit+0x20>)
 800145a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800145e:	4a05      	ldr	r2, [pc, #20]	; (8001474 <SystemInit+0x20>)
 8001460:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001464:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001478:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800147c:	480d      	ldr	r0, [pc, #52]	; (80014b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800147e:	490e      	ldr	r1, [pc, #56]	; (80014b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001480:	4a0e      	ldr	r2, [pc, #56]	; (80014bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001482:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001484:	e002      	b.n	800148c <LoopCopyDataInit>

08001486 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001486:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001488:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800148a:	3304      	adds	r3, #4

0800148c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800148c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800148e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001490:	d3f9      	bcc.n	8001486 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001492:	4a0b      	ldr	r2, [pc, #44]	; (80014c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001494:	4c0b      	ldr	r4, [pc, #44]	; (80014c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001496:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001498:	e001      	b.n	800149e <LoopFillZerobss>

0800149a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800149a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800149c:	3204      	adds	r2, #4

0800149e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800149e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014a0:	d3fb      	bcc.n	800149a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80014a2:	f7ff ffd7 	bl	8001454 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80014a6:	f004 fad7 	bl	8005a58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80014aa:	f7ff faab 	bl	8000a04 <main>
  bx  lr    
 80014ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80014b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80014b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014b8:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80014bc:	08005ae8 	.word	0x08005ae8
  ldr r2, =_sbss
 80014c0:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80014c4:	2000039c 	.word	0x2000039c

080014c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80014c8:	e7fe      	b.n	80014c8 <ADC_IRQHandler>
	...

080014cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80014d0:	4b0e      	ldr	r3, [pc, #56]	; (800150c <HAL_Init+0x40>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a0d      	ldr	r2, [pc, #52]	; (800150c <HAL_Init+0x40>)
 80014d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80014dc:	4b0b      	ldr	r3, [pc, #44]	; (800150c <HAL_Init+0x40>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a0a      	ldr	r2, [pc, #40]	; (800150c <HAL_Init+0x40>)
 80014e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80014e8:	4b08      	ldr	r3, [pc, #32]	; (800150c <HAL_Init+0x40>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a07      	ldr	r2, [pc, #28]	; (800150c <HAL_Init+0x40>)
 80014ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014f4:	2003      	movs	r0, #3
 80014f6:	f000 fb8d 	bl	8001c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014fa:	200f      	movs	r0, #15
 80014fc:	f000 f808 	bl	8001510 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001500:	f7ff fd40 	bl	8000f84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	40023c00 	.word	0x40023c00

08001510 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_InitTick+0x54>)
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b12      	ldr	r3, [pc, #72]	; (8001568 <HAL_InitTick+0x58>)
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	4619      	mov	r1, r3
 8001522:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001526:	fbb3 f3f1 	udiv	r3, r3, r1
 800152a:	fbb2 f3f3 	udiv	r3, r2, r3
 800152e:	4618      	mov	r0, r3
 8001530:	f000 fba5 	bl	8001c7e <HAL_SYSTICK_Config>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00e      	b.n	800155c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2b0f      	cmp	r3, #15
 8001542:	d80a      	bhi.n	800155a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001544:	2200      	movs	r2, #0
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	f04f 30ff 	mov.w	r0, #4294967295
 800154c:	f000 fb6d 	bl	8001c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001550:	4a06      	ldr	r2, [pc, #24]	; (800156c <HAL_InitTick+0x5c>)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001556:	2300      	movs	r3, #0
 8001558:	e000      	b.n	800155c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	20000004 	.word	0x20000004
 8001568:	2000000c 	.word	0x2000000c
 800156c:	20000008 	.word	0x20000008

08001570 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001574:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_IncTick+0x20>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	461a      	mov	r2, r3
 800157a:	4b06      	ldr	r3, [pc, #24]	; (8001594 <HAL_IncTick+0x24>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4413      	add	r3, r2
 8001580:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_IncTick+0x24>)
 8001582:	6013      	str	r3, [r2, #0]
}
 8001584:	bf00      	nop
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	2000000c 	.word	0x2000000c
 8001594:	20000398 	.word	0x20000398

08001598 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return uwTick;
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_GetTick+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000398 	.word	0x20000398

080015b0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b084      	sub	sp, #16
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d101      	bne.n	80015c6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e033      	b.n	800162e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d109      	bne.n	80015e2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015ce:	6878      	ldr	r0, [r7, #4]
 80015d0:	f7ff fd00 	bl	8000fd4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	2200      	movs	r2, #0
 80015de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d118      	bne.n	8001620 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80015f6:	f023 0302 	bic.w	r3, r3, #2
 80015fa:	f043 0202 	orr.w	r2, r3, #2
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f000 f93a 	bl	800187c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2200      	movs	r2, #0
 800160c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001612:	f023 0303 	bic.w	r3, r3, #3
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
 800161e:	e001      	b.n	8001624 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800162c:	7bfb      	ldrb	r3, [r7, #15]
}
 800162e:	4618      	mov	r0, r3
 8001630:	3710      	adds	r7, #16
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001638:	b480      	push	{r7}
 800163a:	b085      	sub	sp, #20
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_ADC_ConfigChannel+0x1c>
 8001650:	2302      	movs	r3, #2
 8001652:	e105      	b.n	8001860 <HAL_ADC_ConfigChannel+0x228>
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2b09      	cmp	r3, #9
 8001662:	d925      	bls.n	80016b0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	68d9      	ldr	r1, [r3, #12]
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	b29b      	uxth	r3, r3
 8001670:	461a      	mov	r2, r3
 8001672:	4613      	mov	r3, r2
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	4413      	add	r3, r2
 8001678:	3b1e      	subs	r3, #30
 800167a:	2207      	movs	r2, #7
 800167c:	fa02 f303 	lsl.w	r3, r2, r3
 8001680:	43da      	mvns	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	400a      	ands	r2, r1
 8001688:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68d9      	ldr	r1, [r3, #12]
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	689a      	ldr	r2, [r3, #8]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	b29b      	uxth	r3, r3
 800169a:	4618      	mov	r0, r3
 800169c:	4603      	mov	r3, r0
 800169e:	005b      	lsls	r3, r3, #1
 80016a0:	4403      	add	r3, r0
 80016a2:	3b1e      	subs	r3, #30
 80016a4:	409a      	lsls	r2, r3
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	430a      	orrs	r2, r1
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	e022      	b.n	80016f6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	6919      	ldr	r1, [r3, #16]
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	461a      	mov	r2, r3
 80016be:	4613      	mov	r3, r2
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	4413      	add	r3, r2
 80016c4:	2207      	movs	r2, #7
 80016c6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ca:	43da      	mvns	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	400a      	ands	r2, r1
 80016d2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	6919      	ldr	r1, [r3, #16]
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	4618      	mov	r0, r3
 80016e6:	4603      	mov	r3, r0
 80016e8:	005b      	lsls	r3, r3, #1
 80016ea:	4403      	add	r3, r0
 80016ec:	409a      	lsls	r2, r3
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	430a      	orrs	r2, r1
 80016f4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b06      	cmp	r3, #6
 80016fc:	d824      	bhi.n	8001748 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685a      	ldr	r2, [r3, #4]
 8001708:	4613      	mov	r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	4413      	add	r3, r2
 800170e:	3b05      	subs	r3, #5
 8001710:	221f      	movs	r2, #31
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43da      	mvns	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	400a      	ands	r2, r1
 800171e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	b29b      	uxth	r3, r3
 800172c:	4618      	mov	r0, r3
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	4613      	mov	r3, r2
 8001734:	009b      	lsls	r3, r3, #2
 8001736:	4413      	add	r3, r2
 8001738:	3b05      	subs	r3, #5
 800173a:	fa00 f203 	lsl.w	r2, r0, r3
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	430a      	orrs	r2, r1
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
 8001746:	e04c      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	2b0c      	cmp	r3, #12
 800174e:	d824      	bhi.n	800179a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685a      	ldr	r2, [r3, #4]
 800175a:	4613      	mov	r3, r2
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	3b23      	subs	r3, #35	; 0x23
 8001762:	221f      	movs	r2, #31
 8001764:	fa02 f303 	lsl.w	r3, r2, r3
 8001768:	43da      	mvns	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	400a      	ands	r2, r1
 8001770:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	b29b      	uxth	r3, r3
 800177e:	4618      	mov	r0, r3
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	4613      	mov	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	4413      	add	r3, r2
 800178a:	3b23      	subs	r3, #35	; 0x23
 800178c:	fa00 f203 	lsl.w	r2, r0, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	631a      	str	r2, [r3, #48]	; 0x30
 8001798:	e023      	b.n	80017e2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b41      	subs	r3, #65	; 0x41
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	400a      	ands	r2, r1
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b41      	subs	r3, #65	; 0x41
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e2:	4b22      	ldr	r3, [pc, #136]	; (800186c <HAL_ADC_ConfigChannel+0x234>)
 80017e4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a21      	ldr	r2, [pc, #132]	; (8001870 <HAL_ADC_ConfigChannel+0x238>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d109      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1cc>
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	2b12      	cmp	r3, #18
 80017f6:	d105      	bne.n	8001804 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a19      	ldr	r2, [pc, #100]	; (8001870 <HAL_ADC_ConfigChannel+0x238>)
 800180a:	4293      	cmp	r3, r2
 800180c:	d123      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x21e>
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b10      	cmp	r3, #16
 8001814:	d003      	beq.n	800181e <HAL_ADC_ConfigChannel+0x1e6>
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	2b11      	cmp	r3, #17
 800181c:	d11b      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	2b10      	cmp	r3, #16
 8001830:	d111      	bne.n	8001856 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001832:	4b10      	ldr	r3, [pc, #64]	; (8001874 <HAL_ADC_ConfigChannel+0x23c>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	4a10      	ldr	r2, [pc, #64]	; (8001878 <HAL_ADC_ConfigChannel+0x240>)
 8001838:	fba2 2303 	umull	r2, r3, r2, r3
 800183c:	0c9a      	lsrs	r2, r3, #18
 800183e:	4613      	mov	r3, r2
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	4413      	add	r3, r2
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001848:	e002      	b.n	8001850 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800184a:	68bb      	ldr	r3, [r7, #8]
 800184c:	3b01      	subs	r3, #1
 800184e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d1f9      	bne.n	800184a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800185e:	2300      	movs	r3, #0
}
 8001860:	4618      	mov	r0, r3
 8001862:	3714      	adds	r7, #20
 8001864:	46bd      	mov	sp, r7
 8001866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186a:	4770      	bx	lr
 800186c:	40012300 	.word	0x40012300
 8001870:	40012000 	.word	0x40012000
 8001874:	20000004 	.word	0x20000004
 8001878:	431bde83 	.word	0x431bde83

0800187c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001884:	4b79      	ldr	r3, [pc, #484]	; (8001a6c <ADC_Init+0x1f0>)
 8001886:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	431a      	orrs	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	685a      	ldr	r2, [r3, #4]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6859      	ldr	r1, [r3, #4]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	021a      	lsls	r2, r3, #8
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	685a      	ldr	r2, [r3, #4]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6859      	ldr	r1, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	689a      	ldr	r2, [r3, #8]
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	689a      	ldr	r2, [r3, #8]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6899      	ldr	r1, [r3, #8]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68da      	ldr	r2, [r3, #12]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800190e:	4a58      	ldr	r2, [pc, #352]	; (8001a70 <ADC_Init+0x1f4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d022      	beq.n	800195a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001922:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6899      	ldr	r1, [r3, #8]
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	430a      	orrs	r2, r1
 8001934:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	689a      	ldr	r2, [r3, #8]
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001944:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6899      	ldr	r1, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	430a      	orrs	r2, r1
 8001956:	609a      	str	r2, [r3, #8]
 8001958:	e00f      	b.n	800197a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001968:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	689a      	ldr	r2, [r3, #8]
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001978:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 0202 	bic.w	r2, r2, #2
 8001988:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	7e1b      	ldrb	r3, [r3, #24]
 8001994:	005a      	lsls	r2, r3, #1
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	430a      	orrs	r2, r1
 800199c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d01b      	beq.n	80019e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	685a      	ldr	r2, [r3, #4]
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019b6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80019c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d2:	3b01      	subs	r3, #1
 80019d4:	035a      	lsls	r2, r3, #13
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	430a      	orrs	r2, r1
 80019dc:	605a      	str	r2, [r3, #4]
 80019de:	e007      	b.n	80019f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ee:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019fe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	3b01      	subs	r3, #1
 8001a0c:	051a      	lsls	r2, r3, #20
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	430a      	orrs	r2, r1
 8001a14:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a32:	025a      	lsls	r2, r3, #9
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689a      	ldr	r2, [r3, #8]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6899      	ldr	r1, [r3, #8]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	695b      	ldr	r3, [r3, #20]
 8001a56:	029a      	lsls	r2, r3, #10
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	430a      	orrs	r2, r1
 8001a5e:	609a      	str	r2, [r3, #8]
}
 8001a60:	bf00      	nop
 8001a62:	3714      	adds	r7, #20
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40012300 	.word	0x40012300
 8001a70:	0f000001 	.word	0x0f000001

08001a74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f003 0307 	and.w	r3, r3, #7
 8001a82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a8a:	68ba      	ldr	r2, [r7, #8]
 8001a8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a90:	4013      	ands	r3, r2
 8001a92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001aa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aa6:	4a04      	ldr	r2, [pc, #16]	; (8001ab8 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	60d3      	str	r3, [r2, #12]
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ac0:	4b04      	ldr	r3, [pc, #16]	; (8001ad4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ac2:	68db      	ldr	r3, [r3, #12]
 8001ac4:	0a1b      	lsrs	r3, r3, #8
 8001ac6:	f003 0307 	and.w	r3, r3, #7
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b083      	sub	sp, #12
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	4603      	mov	r3, r0
 8001ae0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	db0b      	blt.n	8001b02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aea:	79fb      	ldrb	r3, [r7, #7]
 8001aec:	f003 021f 	and.w	r2, r3, #31
 8001af0:	4907      	ldr	r1, [pc, #28]	; (8001b10 <__NVIC_EnableIRQ+0x38>)
 8001af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	2001      	movs	r0, #1
 8001afa:	fa00 f202 	lsl.w	r2, r0, r2
 8001afe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	e000e100 	.word	0xe000e100

08001b14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	db0a      	blt.n	8001b3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	490c      	ldr	r1, [pc, #48]	; (8001b60 <__NVIC_SetPriority+0x4c>)
 8001b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b32:	0112      	lsls	r2, r2, #4
 8001b34:	b2d2      	uxtb	r2, r2
 8001b36:	440b      	add	r3, r1
 8001b38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b3c:	e00a      	b.n	8001b54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4908      	ldr	r1, [pc, #32]	; (8001b64 <__NVIC_SetPriority+0x50>)
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	f003 030f 	and.w	r3, r3, #15
 8001b4a:	3b04      	subs	r3, #4
 8001b4c:	0112      	lsls	r2, r2, #4
 8001b4e:	b2d2      	uxtb	r2, r2
 8001b50:	440b      	add	r3, r1
 8001b52:	761a      	strb	r2, [r3, #24]
}
 8001b54:	bf00      	nop
 8001b56:	370c      	adds	r7, #12
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5e:	4770      	bx	lr
 8001b60:	e000e100 	.word	0xe000e100
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b089      	sub	sp, #36	; 0x24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	f003 0307 	and.w	r3, r3, #7
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b7c:	69fb      	ldr	r3, [r7, #28]
 8001b7e:	f1c3 0307 	rsb	r3, r3, #7
 8001b82:	2b04      	cmp	r3, #4
 8001b84:	bf28      	it	cs
 8001b86:	2304      	movcs	r3, #4
 8001b88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3304      	adds	r3, #4
 8001b8e:	2b06      	cmp	r3, #6
 8001b90:	d902      	bls.n	8001b98 <NVIC_EncodePriority+0x30>
 8001b92:	69fb      	ldr	r3, [r7, #28]
 8001b94:	3b03      	subs	r3, #3
 8001b96:	e000      	b.n	8001b9a <NVIC_EncodePriority+0x32>
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43da      	mvns	r2, r3
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	401a      	ands	r2, r3
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bb0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bba:	43d9      	mvns	r1, r3
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc0:	4313      	orrs	r3, r2
         );
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
	...

08001bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	3b01      	subs	r3, #1
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d301      	bcc.n	8001be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001be2:	2301      	movs	r3, #1
 8001be4:	e00f      	b.n	8001c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001be6:	4a0a      	ldr	r2, [pc, #40]	; (8001c10 <SysTick_Config+0x40>)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3b01      	subs	r3, #1
 8001bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bee:	210f      	movs	r1, #15
 8001bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bf4:	f7ff ff8e 	bl	8001b14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bf8:	4b05      	ldr	r3, [pc, #20]	; (8001c10 <SysTick_Config+0x40>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bfe:	4b04      	ldr	r3, [pc, #16]	; (8001c10 <SysTick_Config+0x40>)
 8001c00:	2207      	movs	r2, #7
 8001c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3708      	adds	r7, #8
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	e000e010 	.word	0xe000e010

08001c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff29 	bl	8001a74 <__NVIC_SetPriorityGrouping>
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}

08001c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c2a:	b580      	push	{r7, lr}
 8001c2c:	b086      	sub	sp, #24
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	4603      	mov	r3, r0
 8001c32:	60b9      	str	r1, [r7, #8]
 8001c34:	607a      	str	r2, [r7, #4]
 8001c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c3c:	f7ff ff3e 	bl	8001abc <__NVIC_GetPriorityGrouping>
 8001c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	68b9      	ldr	r1, [r7, #8]
 8001c46:	6978      	ldr	r0, [r7, #20]
 8001c48:	f7ff ff8e 	bl	8001b68 <NVIC_EncodePriority>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff ff5d 	bl	8001b14 <__NVIC_SetPriority>
}
 8001c5a:	bf00      	nop
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b082      	sub	sp, #8
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	4603      	mov	r3, r0
 8001c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff31 	bl	8001ad8 <__NVIC_EnableIRQ>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff ffa2 	bl	8001bd0 <SysTick_Config>
 8001c8c:	4603      	mov	r3, r0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
	...

08001c98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ca4:	f7ff fc78 	bl	8001598 <HAL_GetTick>
 8001ca8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d101      	bne.n	8001cb4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001cb0:	2301      	movs	r3, #1
 8001cb2:	e099      	b.n	8001de8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f022 0201 	bic.w	r2, r2, #1
 8001cd2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cd4:	e00f      	b.n	8001cf6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cd6:	f7ff fc5f 	bl	8001598 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b05      	cmp	r3, #5
 8001ce2:	d908      	bls.n	8001cf6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2220      	movs	r2, #32
 8001ce8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2203      	movs	r2, #3
 8001cee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e078      	b.n	8001de8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0301 	and.w	r3, r3, #1
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d1e8      	bne.n	8001cd6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001d0c:	697a      	ldr	r2, [r7, #20]
 8001d0e:	4b38      	ldr	r3, [pc, #224]	; (8001df0 <HAL_DMA_Init+0x158>)
 8001d10:	4013      	ands	r3, r2
 8001d12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685a      	ldr	r2, [r3, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	691b      	ldr	r3, [r3, #16]
 8001d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	699b      	ldr	r3, [r3, #24]
 8001d34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d42:	697a      	ldr	r2, [r7, #20]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d107      	bne.n	8001d60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d58:	4313      	orrs	r3, r2
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	4313      	orrs	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	697a      	ldr	r2, [r7, #20]
 8001d66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f023 0307 	bic.w	r3, r3, #7
 8001d76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d86:	2b04      	cmp	r3, #4
 8001d88:	d117      	bne.n	8001dba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d00e      	beq.n	8001dba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa6f 	bl	8002280 <DMA_CheckFifoParam>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d008      	beq.n	8001dba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2240      	movs	r2, #64	; 0x40
 8001dac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001db6:	2301      	movs	r3, #1
 8001db8:	e016      	b.n	8001de8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f000 fa26 	bl	8002214 <DMA_CalcBaseAndBitshift>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd0:	223f      	movs	r2, #63	; 0x3f
 8001dd2:	409a      	lsls	r2, r3
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2201      	movs	r2, #1
 8001de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	f010803f 	.word	0xf010803f

08001df4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	60f8      	str	r0, [r7, #12]
 8001dfc:	60b9      	str	r1, [r7, #8]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d101      	bne.n	8001e1a <HAL_DMA_Start_IT+0x26>
 8001e16:	2302      	movs	r3, #2
 8001e18:	e040      	b.n	8001e9c <HAL_DMA_Start_IT+0xa8>
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d12f      	bne.n	8001e8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	2202      	movs	r2, #2
 8001e32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	68b9      	ldr	r1, [r7, #8]
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f9b8 	bl	80021b8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e4c:	223f      	movs	r2, #63	; 0x3f
 8001e4e:	409a      	lsls	r2, r3
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0216 	orr.w	r2, r2, #22
 8001e62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f042 0208 	orr.w	r2, r2, #8
 8001e7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 0201 	orr.w	r2, r2, #1
 8001e8a:	601a      	str	r2, [r3, #0]
 8001e8c:	e005      	b.n	8001e9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2200      	movs	r2, #0
 8001e92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e96:	2302      	movs	r3, #2
 8001e98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3718      	adds	r7, #24
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001eac:	2300      	movs	r3, #0
 8001eae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001eb0:	4b8e      	ldr	r3, [pc, #568]	; (80020ec <HAL_DMA_IRQHandler+0x248>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a8e      	ldr	r2, [pc, #568]	; (80020f0 <HAL_DMA_IRQHandler+0x24c>)
 8001eb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eba:	0a9b      	lsrs	r3, r3, #10
 8001ebc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ece:	2208      	movs	r2, #8
 8001ed0:	409a      	lsls	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d01a      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d013      	beq.n	8001f10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f022 0204 	bic.w	r2, r2, #4
 8001ef6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001efc:	2208      	movs	r2, #8
 8001efe:	409a      	lsls	r2, r3
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	f043 0201 	orr.w	r2, r3, #1
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f14:	2201      	movs	r2, #1
 8001f16:	409a      	lsls	r2, r3
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d012      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00b      	beq.n	8001f46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f32:	2201      	movs	r2, #1
 8001f34:	409a      	lsls	r2, r3
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f3e:	f043 0202 	orr.w	r2, r3, #2
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2204      	movs	r2, #4
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	4013      	ands	r3, r2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d012      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0302 	and.w	r3, r3, #2
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00b      	beq.n	8001f7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	2204      	movs	r2, #4
 8001f6a:	409a      	lsls	r2, r3
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f74:	f043 0204 	orr.w	r2, r3, #4
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f80:	2210      	movs	r2, #16
 8001f82:	409a      	lsls	r2, r3
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d043      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0308 	and.w	r3, r3, #8
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d03c      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9e:	2210      	movs	r2, #16
 8001fa0:	409a      	lsls	r2, r3
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d018      	beq.n	8001fe6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d108      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d024      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	4798      	blx	r3
 8001fd2:	e01f      	b.n	8002014 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d01b      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	4798      	blx	r3
 8001fe4:	e016      	b.n	8002014 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d107      	bne.n	8002004 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f022 0208 	bic.w	r2, r2, #8
 8002002:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d003      	beq.n	8002014 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	2220      	movs	r2, #32
 800201a:	409a      	lsls	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4013      	ands	r3, r2
 8002020:	2b00      	cmp	r3, #0
 8002022:	f000 808f 	beq.w	8002144 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0310 	and.w	r3, r3, #16
 8002030:	2b00      	cmp	r3, #0
 8002032:	f000 8087 	beq.w	8002144 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800203a:	2220      	movs	r2, #32
 800203c:	409a      	lsls	r2, r3
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b05      	cmp	r3, #5
 800204c:	d136      	bne.n	80020bc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0216 	bic.w	r2, r2, #22
 800205c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695a      	ldr	r2, [r3, #20]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800206c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002072:	2b00      	cmp	r3, #0
 8002074:	d103      	bne.n	800207e <HAL_DMA_IRQHandler+0x1da>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800207a:	2b00      	cmp	r3, #0
 800207c:	d007      	beq.n	800208e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	681a      	ldr	r2, [r3, #0]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f022 0208 	bic.w	r2, r2, #8
 800208c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	223f      	movs	r2, #63	; 0x3f
 8002094:	409a      	lsls	r2, r3
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2201      	movs	r2, #1
 800209e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d07e      	beq.n	80021b0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	4798      	blx	r3
        }
        return;
 80020ba:	e079      	b.n	80021b0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d01d      	beq.n	8002106 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10d      	bne.n	80020f4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d031      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e4:	6878      	ldr	r0, [r7, #4]
 80020e6:	4798      	blx	r3
 80020e8:	e02c      	b.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
 80020ea:	bf00      	nop
 80020ec:	20000004 	.word	0x20000004
 80020f0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d023      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	4798      	blx	r3
 8002104:	e01e      	b.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d10f      	bne.n	8002134 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f022 0210 	bic.w	r2, r2, #16
 8002122:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2201      	movs	r2, #1
 8002128:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002138:	2b00      	cmp	r3, #0
 800213a:	d003      	beq.n	8002144 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002148:	2b00      	cmp	r3, #0
 800214a:	d032      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002150:	f003 0301 	and.w	r3, r3, #1
 8002154:	2b00      	cmp	r3, #0
 8002156:	d022      	beq.n	800219e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2205      	movs	r2, #5
 800215c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f022 0201 	bic.w	r2, r2, #1
 800216e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	3301      	adds	r3, #1
 8002174:	60bb      	str	r3, [r7, #8]
 8002176:	697a      	ldr	r2, [r7, #20]
 8002178:	429a      	cmp	r2, r3
 800217a:	d307      	bcc.n	800218c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0301 	and.w	r3, r3, #1
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1f2      	bne.n	8002170 <HAL_DMA_IRQHandler+0x2cc>
 800218a:	e000      	b.n	800218e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800218c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2201      	movs	r2, #1
 8002192:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d005      	beq.n	80021b2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	4798      	blx	r3
 80021ae:	e000      	b.n	80021b2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80021b0:	bf00      	nop
    }
  }
}
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}

080021b8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b085      	sub	sp, #20
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80021d4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	683a      	ldr	r2, [r7, #0]
 80021dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	2b40      	cmp	r3, #64	; 0x40
 80021e4:	d108      	bne.n	80021f8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021f6:	e007      	b.n	8002208 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]
}
 8002208:	bf00      	nop
 800220a:	3714      	adds	r7, #20
 800220c:	46bd      	mov	sp, r7
 800220e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002212:	4770      	bx	lr

08002214 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002214:	b480      	push	{r7}
 8002216:	b085      	sub	sp, #20
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	3b10      	subs	r3, #16
 8002224:	4a14      	ldr	r2, [pc, #80]	; (8002278 <DMA_CalcBaseAndBitshift+0x64>)
 8002226:	fba2 2303 	umull	r2, r3, r2, r3
 800222a:	091b      	lsrs	r3, r3, #4
 800222c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800222e:	4a13      	ldr	r2, [pc, #76]	; (800227c <DMA_CalcBaseAndBitshift+0x68>)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	4413      	add	r3, r2
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	461a      	mov	r2, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2b03      	cmp	r3, #3
 8002240:	d909      	bls.n	8002256 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800224a:	f023 0303 	bic.w	r3, r3, #3
 800224e:	1d1a      	adds	r2, r3, #4
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	659a      	str	r2, [r3, #88]	; 0x58
 8002254:	e007      	b.n	8002266 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800225e:	f023 0303 	bic.w	r3, r3, #3
 8002262:	687a      	ldr	r2, [r7, #4]
 8002264:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800226a:	4618      	mov	r0, r3
 800226c:	3714      	adds	r7, #20
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	aaaaaaab 	.word	0xaaaaaaab
 800227c:	08005ad0 	.word	0x08005ad0

08002280 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002280:	b480      	push	{r7}
 8002282:	b085      	sub	sp, #20
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002288:	2300      	movs	r3, #0
 800228a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d11f      	bne.n	80022da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800229a:	68bb      	ldr	r3, [r7, #8]
 800229c:	2b03      	cmp	r3, #3
 800229e:	d856      	bhi.n	800234e <DMA_CheckFifoParam+0xce>
 80022a0:	a201      	add	r2, pc, #4	; (adr r2, 80022a8 <DMA_CheckFifoParam+0x28>)
 80022a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022a6:	bf00      	nop
 80022a8:	080022b9 	.word	0x080022b9
 80022ac:	080022cb 	.word	0x080022cb
 80022b0:	080022b9 	.word	0x080022b9
 80022b4:	0800234f 	.word	0x0800234f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d046      	beq.n	8002352 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022c8:	e043      	b.n	8002352 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022d2:	d140      	bne.n	8002356 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d8:	e03d      	b.n	8002356 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	699b      	ldr	r3, [r3, #24]
 80022de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80022e2:	d121      	bne.n	8002328 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b03      	cmp	r3, #3
 80022e8:	d837      	bhi.n	800235a <DMA_CheckFifoParam+0xda>
 80022ea:	a201      	add	r2, pc, #4	; (adr r2, 80022f0 <DMA_CheckFifoParam+0x70>)
 80022ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022f0:	08002301 	.word	0x08002301
 80022f4:	08002307 	.word	0x08002307
 80022f8:	08002301 	.word	0x08002301
 80022fc:	08002319 	.word	0x08002319
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	73fb      	strb	r3, [r7, #15]
      break;
 8002304:	e030      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d025      	beq.n	800235e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002316:	e022      	b.n	800235e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800231c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002320:	d11f      	bne.n	8002362 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002326:	e01c      	b.n	8002362 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	2b02      	cmp	r3, #2
 800232c:	d903      	bls.n	8002336 <DMA_CheckFifoParam+0xb6>
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	2b03      	cmp	r3, #3
 8002332:	d003      	beq.n	800233c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002334:	e018      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
      break;
 800233a:	e015      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002340:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00e      	beq.n	8002366 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	73fb      	strb	r3, [r7, #15]
      break;
 800234c:	e00b      	b.n	8002366 <DMA_CheckFifoParam+0xe6>
      break;
 800234e:	bf00      	nop
 8002350:	e00a      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      break;
 8002352:	bf00      	nop
 8002354:	e008      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      break;
 8002356:	bf00      	nop
 8002358:	e006      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      break;
 800235a:	bf00      	nop
 800235c:	e004      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      break;
 800235e:	bf00      	nop
 8002360:	e002      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      break;   
 8002362:	bf00      	nop
 8002364:	e000      	b.n	8002368 <DMA_CheckFifoParam+0xe8>
      break;
 8002366:	bf00      	nop
    }
  } 
  
  return status; 
 8002368:	7bfb      	ldrb	r3, [r7, #15]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3714      	adds	r7, #20
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop

08002378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002382:	2300      	movs	r3, #0
 8002384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	e16b      	b.n	800266c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002394:	2201      	movs	r2, #1
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	697a      	ldr	r2, [r7, #20]
 80023a4:	4013      	ands	r3, r2
 80023a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023a8:	693a      	ldr	r2, [r7, #16]
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	f040 815a 	bne.w	8002666 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	f003 0303 	and.w	r3, r3, #3
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d005      	beq.n	80023ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d130      	bne.n	800242c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023d0:	69fb      	ldr	r3, [r7, #28]
 80023d2:	005b      	lsls	r3, r3, #1
 80023d4:	2203      	movs	r2, #3
 80023d6:	fa02 f303 	lsl.w	r3, r2, r3
 80023da:	43db      	mvns	r3, r3
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	4013      	ands	r3, r2
 80023e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	68da      	ldr	r2, [r3, #12]
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	005b      	lsls	r3, r3, #1
 80023ea:	fa02 f303 	lsl.w	r3, r2, r3
 80023ee:	69ba      	ldr	r2, [r7, #24]
 80023f0:	4313      	orrs	r3, r2
 80023f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	69ba      	ldr	r2, [r7, #24]
 80023f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002400:	2201      	movs	r2, #1
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	fa02 f303 	lsl.w	r3, r2, r3
 8002408:	43db      	mvns	r3, r3
 800240a:	69ba      	ldr	r2, [r7, #24]
 800240c:	4013      	ands	r3, r2
 800240e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	091b      	lsrs	r3, r3, #4
 8002416:	f003 0201 	and.w	r2, r3, #1
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	4313      	orrs	r3, r2
 8002424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f003 0303 	and.w	r3, r3, #3
 8002434:	2b03      	cmp	r3, #3
 8002436:	d017      	beq.n	8002468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	005b      	lsls	r3, r3, #1
 8002442:	2203      	movs	r2, #3
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	689a      	ldr	r2, [r3, #8]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	005b      	lsls	r3, r3, #1
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4313      	orrs	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	69ba      	ldr	r2, [r7, #24]
 8002466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f003 0303 	and.w	r3, r3, #3
 8002470:	2b02      	cmp	r3, #2
 8002472:	d123      	bne.n	80024bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	08da      	lsrs	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	3208      	adds	r2, #8
 800247c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	f003 0307 	and.w	r3, r3, #7
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	220f      	movs	r2, #15
 800248c:	fa02 f303 	lsl.w	r3, r2, r3
 8002490:	43db      	mvns	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	4013      	ands	r3, r2
 8002496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	691a      	ldr	r2, [r3, #16]
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	009b      	lsls	r3, r3, #2
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	08da      	lsrs	r2, r3, #3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	3208      	adds	r2, #8
 80024b6:	69b9      	ldr	r1, [r7, #24]
 80024b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	2203      	movs	r2, #3
 80024c8:	fa02 f303 	lsl.w	r3, r2, r3
 80024cc:	43db      	mvns	r3, r3
 80024ce:	69ba      	ldr	r2, [r7, #24]
 80024d0:	4013      	ands	r3, r2
 80024d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	f003 0203 	and.w	r2, r3, #3
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	005b      	lsls	r3, r3, #1
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	69ba      	ldr	r2, [r7, #24]
 80024ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024f0:	683b      	ldr	r3, [r7, #0]
 80024f2:	685b      	ldr	r3, [r3, #4]
 80024f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80b4 	beq.w	8002666 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fe:	2300      	movs	r3, #0
 8002500:	60fb      	str	r3, [r7, #12]
 8002502:	4b60      	ldr	r3, [pc, #384]	; (8002684 <HAL_GPIO_Init+0x30c>)
 8002504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002506:	4a5f      	ldr	r2, [pc, #380]	; (8002684 <HAL_GPIO_Init+0x30c>)
 8002508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800250c:	6453      	str	r3, [r2, #68]	; 0x44
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <HAL_GPIO_Init+0x30c>)
 8002510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002516:	60fb      	str	r3, [r7, #12]
 8002518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800251a:	4a5b      	ldr	r2, [pc, #364]	; (8002688 <HAL_GPIO_Init+0x310>)
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	089b      	lsrs	r3, r3, #2
 8002520:	3302      	adds	r3, #2
 8002522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	f003 0303 	and.w	r3, r3, #3
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	220f      	movs	r2, #15
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a52      	ldr	r2, [pc, #328]	; (800268c <HAL_GPIO_Init+0x314>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d02b      	beq.n	800259e <HAL_GPIO_Init+0x226>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a51      	ldr	r2, [pc, #324]	; (8002690 <HAL_GPIO_Init+0x318>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d025      	beq.n	800259a <HAL_GPIO_Init+0x222>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a50      	ldr	r2, [pc, #320]	; (8002694 <HAL_GPIO_Init+0x31c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d01f      	beq.n	8002596 <HAL_GPIO_Init+0x21e>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a4f      	ldr	r2, [pc, #316]	; (8002698 <HAL_GPIO_Init+0x320>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d019      	beq.n	8002592 <HAL_GPIO_Init+0x21a>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4e      	ldr	r2, [pc, #312]	; (800269c <HAL_GPIO_Init+0x324>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d013      	beq.n	800258e <HAL_GPIO_Init+0x216>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4a4d      	ldr	r2, [pc, #308]	; (80026a0 <HAL_GPIO_Init+0x328>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d00d      	beq.n	800258a <HAL_GPIO_Init+0x212>
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	4a4c      	ldr	r2, [pc, #304]	; (80026a4 <HAL_GPIO_Init+0x32c>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d007      	beq.n	8002586 <HAL_GPIO_Init+0x20e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a4b      	ldr	r2, [pc, #300]	; (80026a8 <HAL_GPIO_Init+0x330>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d101      	bne.n	8002582 <HAL_GPIO_Init+0x20a>
 800257e:	2307      	movs	r3, #7
 8002580:	e00e      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002582:	2308      	movs	r3, #8
 8002584:	e00c      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002586:	2306      	movs	r3, #6
 8002588:	e00a      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800258a:	2305      	movs	r3, #5
 800258c:	e008      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800258e:	2304      	movs	r3, #4
 8002590:	e006      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002592:	2303      	movs	r3, #3
 8002594:	e004      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 8002596:	2302      	movs	r3, #2
 8002598:	e002      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800259a:	2301      	movs	r3, #1
 800259c:	e000      	b.n	80025a0 <HAL_GPIO_Init+0x228>
 800259e:	2300      	movs	r3, #0
 80025a0:	69fa      	ldr	r2, [r7, #28]
 80025a2:	f002 0203 	and.w	r2, r2, #3
 80025a6:	0092      	lsls	r2, r2, #2
 80025a8:	4093      	lsls	r3, r2
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025b0:	4935      	ldr	r1, [pc, #212]	; (8002688 <HAL_GPIO_Init+0x310>)
 80025b2:	69fb      	ldr	r3, [r7, #28]
 80025b4:	089b      	lsrs	r3, r3, #2
 80025b6:	3302      	adds	r3, #2
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025be:	4b3b      	ldr	r3, [pc, #236]	; (80026ac <HAL_GPIO_Init+0x334>)
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025e2:	4a32      	ldr	r2, [pc, #200]	; (80026ac <HAL_GPIO_Init+0x334>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025e8:	4b30      	ldr	r3, [pc, #192]	; (80026ac <HAL_GPIO_Init+0x334>)
 80025ea:	68db      	ldr	r3, [r3, #12]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800260c:	4a27      	ldr	r2, [pc, #156]	; (80026ac <HAL_GPIO_Init+0x334>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002612:	4b26      	ldr	r3, [pc, #152]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002618:	693b      	ldr	r3, [r7, #16]
 800261a:	43db      	mvns	r3, r3
 800261c:	69ba      	ldr	r2, [r7, #24]
 800261e:	4013      	ands	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	685b      	ldr	r3, [r3, #4]
 8002626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d003      	beq.n	8002636 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800262e:	69ba      	ldr	r2, [r7, #24]
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	4313      	orrs	r3, r2
 8002634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002636:	4a1d      	ldr	r2, [pc, #116]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800263c:	4b1b      	ldr	r3, [pc, #108]	; (80026ac <HAL_GPIO_Init+0x334>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	43db      	mvns	r3, r3
 8002646:	69ba      	ldr	r2, [r7, #24]
 8002648:	4013      	ands	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d003      	beq.n	8002660 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002658:	69ba      	ldr	r2, [r7, #24]
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	4313      	orrs	r3, r2
 800265e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002660:	4a12      	ldr	r2, [pc, #72]	; (80026ac <HAL_GPIO_Init+0x334>)
 8002662:	69bb      	ldr	r3, [r7, #24]
 8002664:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	3301      	adds	r3, #1
 800266a:	61fb      	str	r3, [r7, #28]
 800266c:	69fb      	ldr	r3, [r7, #28]
 800266e:	2b0f      	cmp	r3, #15
 8002670:	f67f ae90 	bls.w	8002394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002674:	bf00      	nop
 8002676:	bf00      	nop
 8002678:	3724      	adds	r7, #36	; 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	40023800 	.word	0x40023800
 8002688:	40013800 	.word	0x40013800
 800268c:	40020000 	.word	0x40020000
 8002690:	40020400 	.word	0x40020400
 8002694:	40020800 	.word	0x40020800
 8002698:	40020c00 	.word	0x40020c00
 800269c:	40021000 	.word	0x40021000
 80026a0:	40021400 	.word	0x40021400
 80026a4:	40021800 	.word	0x40021800
 80026a8:	40021c00 	.word	0x40021c00
 80026ac:	40013c00 	.word	0x40013c00

080026b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	460b      	mov	r3, r1
 80026ba:	807b      	strh	r3, [r7, #2]
 80026bc:	4613      	mov	r3, r2
 80026be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026c0:	787b      	ldrb	r3, [r7, #1]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026c6:	887a      	ldrh	r2, [r7, #2]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80026cc:	e003      	b.n	80026d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80026ce:	887b      	ldrh	r3, [r7, #2]
 80026d0:	041a      	lsls	r2, r3, #16
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	619a      	str	r2, [r3, #24]
}
 80026d6:	bf00      	nop
 80026d8:	370c      	adds	r7, #12
 80026da:	46bd      	mov	sp, r7
 80026dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e0:	4770      	bx	lr

080026e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80026e2:	b480      	push	{r7}
 80026e4:	b085      	sub	sp, #20
 80026e6:	af00      	add	r7, sp, #0
 80026e8:	6078      	str	r0, [r7, #4]
 80026ea:	460b      	mov	r3, r1
 80026ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	695b      	ldr	r3, [r3, #20]
 80026f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80026f4:	887a      	ldrh	r2, [r7, #2]
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	4013      	ands	r3, r2
 80026fa:	041a      	lsls	r2, r3, #16
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	43d9      	mvns	r1, r3
 8002700:	887b      	ldrh	r3, [r7, #2]
 8002702:	400b      	ands	r3, r1
 8002704:	431a      	orrs	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	619a      	str	r2, [r3, #24]
}
 800270a:	bf00      	nop
 800270c:	3714      	adds	r7, #20
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
	...

08002718 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d101      	bne.n	800272a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e12b      	b.n	8002982 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002730:	b2db      	uxtb	r3, r3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d106      	bne.n	8002744 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f7fe fc8c 	bl	800105c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2224      	movs	r2, #36	; 0x24
 8002748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	681a      	ldr	r2, [r3, #0]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f022 0201 	bic.w	r2, r2, #1
 800275a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800276a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800277a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800277c:	f002 fa96 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 8002780:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	4a81      	ldr	r2, [pc, #516]	; (800298c <HAL_I2C_Init+0x274>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d807      	bhi.n	800279c <HAL_I2C_Init+0x84>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4a80      	ldr	r2, [pc, #512]	; (8002990 <HAL_I2C_Init+0x278>)
 8002790:	4293      	cmp	r3, r2
 8002792:	bf94      	ite	ls
 8002794:	2301      	movls	r3, #1
 8002796:	2300      	movhi	r3, #0
 8002798:	b2db      	uxtb	r3, r3
 800279a:	e006      	b.n	80027aa <HAL_I2C_Init+0x92>
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	4a7d      	ldr	r2, [pc, #500]	; (8002994 <HAL_I2C_Init+0x27c>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	bf94      	ite	ls
 80027a4:	2301      	movls	r3, #1
 80027a6:	2300      	movhi	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e0e7      	b.n	8002982 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	4a78      	ldr	r2, [pc, #480]	; (8002998 <HAL_I2C_Init+0x280>)
 80027b6:	fba2 2303 	umull	r2, r3, r2, r3
 80027ba:	0c9b      	lsrs	r3, r3, #18
 80027bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68ba      	ldr	r2, [r7, #8]
 80027ce:	430a      	orrs	r2, r1
 80027d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	4a6a      	ldr	r2, [pc, #424]	; (800298c <HAL_I2C_Init+0x274>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d802      	bhi.n	80027ec <HAL_I2C_Init+0xd4>
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	3301      	adds	r3, #1
 80027ea:	e009      	b.n	8002800 <HAL_I2C_Init+0xe8>
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80027f2:	fb02 f303 	mul.w	r3, r2, r3
 80027f6:	4a69      	ldr	r2, [pc, #420]	; (800299c <HAL_I2C_Init+0x284>)
 80027f8:	fba2 2303 	umull	r2, r3, r2, r3
 80027fc:	099b      	lsrs	r3, r3, #6
 80027fe:	3301      	adds	r3, #1
 8002800:	687a      	ldr	r2, [r7, #4]
 8002802:	6812      	ldr	r2, [r2, #0]
 8002804:	430b      	orrs	r3, r1
 8002806:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	69db      	ldr	r3, [r3, #28]
 800280e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002812:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	495c      	ldr	r1, [pc, #368]	; (800298c <HAL_I2C_Init+0x274>)
 800281c:	428b      	cmp	r3, r1
 800281e:	d819      	bhi.n	8002854 <HAL_I2C_Init+0x13c>
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	1e59      	subs	r1, r3, #1
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	005b      	lsls	r3, r3, #1
 800282a:	fbb1 f3f3 	udiv	r3, r1, r3
 800282e:	1c59      	adds	r1, r3, #1
 8002830:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002834:	400b      	ands	r3, r1
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00a      	beq.n	8002850 <HAL_I2C_Init+0x138>
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	1e59      	subs	r1, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	fbb1 f3f3 	udiv	r3, r1, r3
 8002848:	3301      	adds	r3, #1
 800284a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800284e:	e051      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002850:	2304      	movs	r3, #4
 8002852:	e04f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d111      	bne.n	8002880 <HAL_I2C_Init+0x168>
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	1e58      	subs	r0, r3, #1
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6859      	ldr	r1, [r3, #4]
 8002864:	460b      	mov	r3, r1
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	440b      	add	r3, r1
 800286a:	fbb0 f3f3 	udiv	r3, r0, r3
 800286e:	3301      	adds	r3, #1
 8002870:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf0c      	ite	eq
 8002878:	2301      	moveq	r3, #1
 800287a:	2300      	movne	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e012      	b.n	80028a6 <HAL_I2C_Init+0x18e>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	1e58      	subs	r0, r3, #1
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6859      	ldr	r1, [r3, #4]
 8002888:	460b      	mov	r3, r1
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	440b      	add	r3, r1
 800288e:	0099      	lsls	r1, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	fbb0 f3f3 	udiv	r3, r0, r3
 8002896:	3301      	adds	r3, #1
 8002898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800289c:	2b00      	cmp	r3, #0
 800289e:	bf0c      	ite	eq
 80028a0:	2301      	moveq	r3, #1
 80028a2:	2300      	movne	r3, #0
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_I2C_Init+0x196>
 80028aa:	2301      	movs	r3, #1
 80028ac:	e022      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689b      	ldr	r3, [r3, #8]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d10e      	bne.n	80028d4 <HAL_I2C_Init+0x1bc>
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	1e58      	subs	r0, r3, #1
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6859      	ldr	r1, [r3, #4]
 80028be:	460b      	mov	r3, r1
 80028c0:	005b      	lsls	r3, r3, #1
 80028c2:	440b      	add	r3, r1
 80028c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80028c8:	3301      	adds	r3, #1
 80028ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80028d2:	e00f      	b.n	80028f4 <HAL_I2C_Init+0x1dc>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	1e58      	subs	r0, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6859      	ldr	r1, [r3, #4]
 80028dc:	460b      	mov	r3, r1
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	0099      	lsls	r1, r3, #2
 80028e4:	440b      	add	r3, r1
 80028e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80028ea:	3301      	adds	r3, #1
 80028ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80028f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	6809      	ldr	r1, [r1, #0]
 80028f8:	4313      	orrs	r3, r2
 80028fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69da      	ldr	r2, [r3, #28]
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6a1b      	ldr	r3, [r3, #32]
 800290e:	431a      	orrs	r2, r3
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	430a      	orrs	r2, r1
 8002916:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002922:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	6911      	ldr	r1, [r2, #16]
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	68d2      	ldr	r2, [r2, #12]
 800292e:	4311      	orrs	r1, r2
 8002930:	687a      	ldr	r2, [r7, #4]
 8002932:	6812      	ldr	r2, [r2, #0]
 8002934:	430b      	orrs	r3, r1
 8002936:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	695a      	ldr	r2, [r3, #20]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	699b      	ldr	r3, [r3, #24]
 800294a:	431a      	orrs	r2, r3
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	681a      	ldr	r2, [r3, #0]
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f042 0201 	orr.w	r2, r2, #1
 8002962:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2220      	movs	r2, #32
 800296e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2200      	movs	r2, #0
 8002976:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3710      	adds	r7, #16
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	000186a0 	.word	0x000186a0
 8002990:	001e847f 	.word	0x001e847f
 8002994:	003d08ff 	.word	0x003d08ff
 8002998:	431bde83 	.word	0x431bde83
 800299c:	10624dd3 	.word	0x10624dd3

080029a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af02      	add	r7, sp, #8
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	4608      	mov	r0, r1
 80029aa:	4611      	mov	r1, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	4603      	mov	r3, r0
 80029b0:	817b      	strh	r3, [r7, #10]
 80029b2:	460b      	mov	r3, r1
 80029b4:	813b      	strh	r3, [r7, #8]
 80029b6:	4613      	mov	r3, r2
 80029b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80029ba:	f7fe fded 	bl	8001598 <HAL_GetTick>
 80029be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b20      	cmp	r3, #32
 80029ca:	f040 80d9 	bne.w	8002b80 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	9300      	str	r3, [sp, #0]
 80029d2:	2319      	movs	r3, #25
 80029d4:	2201      	movs	r2, #1
 80029d6:	496d      	ldr	r1, [pc, #436]	; (8002b8c <HAL_I2C_Mem_Write+0x1ec>)
 80029d8:	68f8      	ldr	r0, [r7, #12]
 80029da:	f000 fc7f 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 80029de:	4603      	mov	r3, r0
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d001      	beq.n	80029e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80029e4:	2302      	movs	r3, #2
 80029e6:	e0cc      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d101      	bne.n	80029f6 <HAL_I2C_Mem_Write+0x56>
 80029f2:	2302      	movs	r3, #2
 80029f4:	e0c5      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2201      	movs	r2, #1
 80029fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d007      	beq.n	8002a1c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f042 0201 	orr.w	r2, r2, #1
 8002a1a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681a      	ldr	r2, [r3, #0]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a2a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	2221      	movs	r2, #33	; 0x21
 8002a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2240      	movs	r2, #64	; 0x40
 8002a38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a3a      	ldr	r2, [r7, #32]
 8002a46:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002a4c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a52:	b29a      	uxth	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a4d      	ldr	r2, [pc, #308]	; (8002b90 <HAL_I2C_Mem_Write+0x1f0>)
 8002a5c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002a5e:	88f8      	ldrh	r0, [r7, #6]
 8002a60:	893a      	ldrh	r2, [r7, #8]
 8002a62:	8979      	ldrh	r1, [r7, #10]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a6a:	9300      	str	r3, [sp, #0]
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	68f8      	ldr	r0, [r7, #12]
 8002a70:	f000 fab6 	bl	8002fe0 <I2C_RequestMemoryWrite>
 8002a74:	4603      	mov	r3, r0
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d052      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	e081      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 fd00 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00d      	beq.n	8002aaa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d107      	bne.n	8002aa6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002aa4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e06b      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aae:	781a      	ldrb	r2, [r3, #0]
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aba:	1c5a      	adds	r2, r3, #1
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac4:	3b01      	subs	r3, #1
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	3b01      	subs	r3, #1
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	2b04      	cmp	r3, #4
 8002ae6:	d11b      	bne.n	8002b20 <HAL_I2C_Mem_Write+0x180>
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d017      	beq.n	8002b20 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af4:	781a      	ldrb	r2, [r3, #0]
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	1c5a      	adds	r2, r3, #1
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b0a:	3b01      	subs	r3, #1
 8002b0c:	b29a      	uxth	r2, r3
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	3b01      	subs	r3, #1
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d1aa      	bne.n	8002a7e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b28:	697a      	ldr	r2, [r7, #20]
 8002b2a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b2c:	68f8      	ldr	r0, [r7, #12]
 8002b2e:	f000 fcec 	bl	800350a <I2C_WaitOnBTFFlagUntilTimeout>
 8002b32:	4603      	mov	r3, r0
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d00d      	beq.n	8002b54 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	2b04      	cmp	r3, #4
 8002b3e:	d107      	bne.n	8002b50 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681a      	ldr	r2, [r3, #0]
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b4e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e016      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2220      	movs	r2, #32
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	e000      	b.n	8002b82 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002b80:	2302      	movs	r3, #2
  }
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3718      	adds	r7, #24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	00100002 	.word	0x00100002
 8002b90:	ffff0000 	.word	0xffff0000

08002b94 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b08c      	sub	sp, #48	; 0x30
 8002b98:	af02      	add	r7, sp, #8
 8002b9a:	60f8      	str	r0, [r7, #12]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	817b      	strh	r3, [r7, #10]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	813b      	strh	r3, [r7, #8]
 8002baa:	4613      	mov	r3, r2
 8002bac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002bae:	f7fe fcf3 	bl	8001598 <HAL_GetTick>
 8002bb2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 8208 	bne.w	8002fd2 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	2319      	movs	r3, #25
 8002bc8:	2201      	movs	r2, #1
 8002bca:	497b      	ldr	r1, [pc, #492]	; (8002db8 <HAL_I2C_Mem_Read+0x224>)
 8002bcc:	68f8      	ldr	r0, [r7, #12]
 8002bce:	f000 fb85 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d001      	beq.n	8002bdc <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	e1fb      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d101      	bne.n	8002bea <HAL_I2C_Mem_Read+0x56>
 8002be6:	2302      	movs	r3, #2
 8002be8:	e1f4      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2201      	movs	r2, #1
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d007      	beq.n	8002c10 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f042 0201 	orr.w	r2, r2, #1
 8002c0e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c1e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	2222      	movs	r2, #34	; 0x22
 8002c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	2240      	movs	r2, #64	; 0x40
 8002c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002c3a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002c40:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c46:	b29a      	uxth	r2, r3
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	4a5b      	ldr	r2, [pc, #364]	; (8002dbc <HAL_I2C_Mem_Read+0x228>)
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002c52:	88f8      	ldrh	r0, [r7, #6]
 8002c54:	893a      	ldrh	r2, [r7, #8]
 8002c56:	8979      	ldrh	r1, [r7, #10]
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	9301      	str	r3, [sp, #4]
 8002c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4603      	mov	r3, r0
 8002c62:	68f8      	ldr	r0, [r7, #12]
 8002c64:	f000 fa52 	bl	800310c <I2C_RequestMemoryRead>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d001      	beq.n	8002c72 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e1b0      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d113      	bne.n	8002ca2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	623b      	str	r3, [r7, #32]
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	695b      	ldr	r3, [r3, #20]
 8002c84:	623b      	str	r3, [r7, #32]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	699b      	ldr	r3, [r3, #24]
 8002c8c:	623b      	str	r3, [r7, #32]
 8002c8e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	e184      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d11b      	bne.n	8002ce2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cb8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61fb      	str	r3, [r7, #28]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	695b      	ldr	r3, [r3, #20]
 8002cc4:	61fb      	str	r3, [r7, #28]
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	61fb      	str	r3, [r7, #28]
 8002cce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681a      	ldr	r2, [r3, #0]
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cde:	601a      	str	r2, [r3, #0]
 8002ce0:	e164      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d11b      	bne.n	8002d22 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681a      	ldr	r2, [r3, #0]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	61bb      	str	r3, [r7, #24]
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	695b      	ldr	r3, [r3, #20]
 8002d14:	61bb      	str	r3, [r7, #24]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	699b      	ldr	r3, [r3, #24]
 8002d1c:	61bb      	str	r3, [r7, #24]
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	e144      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d22:	2300      	movs	r3, #0
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	695b      	ldr	r3, [r3, #20]
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	699b      	ldr	r3, [r3, #24]
 8002d34:	617b      	str	r3, [r7, #20]
 8002d36:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002d38:	e138      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d3e:	2b03      	cmp	r3, #3
 8002d40:	f200 80f1 	bhi.w	8002f26 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d123      	bne.n	8002d94 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d4e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f000 fc1b 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e139      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	691a      	ldr	r2, [r3, #16]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	1c5a      	adds	r2, r3, #1
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d7c:	3b01      	subs	r3, #1
 8002d7e:	b29a      	uxth	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002d92:	e10b      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d14e      	bne.n	8002e3a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d9e:	9300      	str	r3, [sp, #0]
 8002da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da2:	2200      	movs	r2, #0
 8002da4:	4906      	ldr	r1, [pc, #24]	; (8002dc0 <HAL_I2C_Mem_Read+0x22c>)
 8002da6:	68f8      	ldr	r0, [r7, #12]
 8002da8:	f000 fa98 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d008      	beq.n	8002dc4 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e10e      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
 8002db6:	bf00      	nop
 8002db8:	00100002 	.word	0x00100002
 8002dbc:	ffff0000 	.word	0xffff0000
 8002dc0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	691a      	ldr	r2, [r3, #16]
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	b2d2      	uxtb	r2, r2
 8002de0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de6:	1c5a      	adds	r2, r3, #1
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	b29a      	uxth	r2, r3
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	691a      	ldr	r2, [r3, #16]
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e10:	b2d2      	uxtb	r2, r2
 8002e12:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	1c5a      	adds	r2, r3, #1
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e22:	3b01      	subs	r3, #1
 8002e24:	b29a      	uxth	r2, r3
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2e:	b29b      	uxth	r3, r3
 8002e30:	3b01      	subs	r3, #1
 8002e32:	b29a      	uxth	r2, r3
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e38:	e0b8      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	9300      	str	r3, [sp, #0]
 8002e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e40:	2200      	movs	r2, #0
 8002e42:	4966      	ldr	r1, [pc, #408]	; (8002fdc <HAL_I2C_Mem_Read+0x448>)
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	f000 fa49 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d001      	beq.n	8002e54 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e0bf      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	681a      	ldr	r2, [r3, #0]
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e62:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	691a      	ldr	r2, [r3, #16]
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	b2d2      	uxtb	r2, r2
 8002e70:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	1c5a      	adds	r2, r3, #1
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e80:	3b01      	subs	r3, #1
 8002e82:	b29a      	uxth	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e8c:	b29b      	uxth	r3, r3
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	b29a      	uxth	r2, r3
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e98:	9300      	str	r3, [sp, #0]
 8002e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	494f      	ldr	r1, [pc, #316]	; (8002fdc <HAL_I2C_Mem_Read+0x448>)
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 fa1b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d001      	beq.n	8002eb0 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	e091      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002ebe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed2:	1c5a      	adds	r2, r3, #1
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	b2d2      	uxtb	r2, r2
 8002efe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f04:	1c5a      	adds	r2, r3, #1
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f0e:	3b01      	subs	r3, #1
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	3b01      	subs	r3, #1
 8002f1e:	b29a      	uxth	r2, r3
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f24:	e042      	b.n	8002fac <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f28:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002f2a:	68f8      	ldr	r0, [r7, #12]
 8002f2c:	f000 fb2e 	bl	800358c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002f30:	4603      	mov	r3, r0
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d001      	beq.n	8002f3a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e04c      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	691a      	ldr	r2, [r3, #16]
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	b2d2      	uxtb	r2, r2
 8002f46:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	1c5a      	adds	r2, r3, #1
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f56:	3b01      	subs	r3, #1
 8002f58:	b29a      	uxth	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	3b01      	subs	r3, #1
 8002f66:	b29a      	uxth	r2, r3
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	f003 0304 	and.w	r3, r3, #4
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d118      	bne.n	8002fac <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	691a      	ldr	r2, [r3, #16]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	b2d2      	uxtb	r2, r2
 8002f86:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	1c5a      	adds	r2, r3, #1
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f96:	3b01      	subs	r3, #1
 8002f98:	b29a      	uxth	r2, r3
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fa2:	b29b      	uxth	r3, r3
 8002fa4:	3b01      	subs	r3, #1
 8002fa6:	b29a      	uxth	r2, r3
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f47f aec2 	bne.w	8002d3a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	2220      	movs	r2, #32
 8002fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2200      	movs	r2, #0
 8002fca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	e000      	b.n	8002fd4 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002fd2:	2302      	movs	r3, #2
  }
}
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	3728      	adds	r7, #40	; 0x28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}
 8002fdc:	00010004 	.word	0x00010004

08002fe0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af02      	add	r7, sp, #8
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	4608      	mov	r0, r1
 8002fea:	4611      	mov	r1, r2
 8002fec:	461a      	mov	r2, r3
 8002fee:	4603      	mov	r3, r0
 8002ff0:	817b      	strh	r3, [r7, #10]
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	813b      	strh	r3, [r7, #8]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003008:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800300a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300c:	9300      	str	r3, [sp, #0]
 800300e:	6a3b      	ldr	r3, [r7, #32]
 8003010:	2200      	movs	r2, #0
 8003012:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003016:	68f8      	ldr	r0, [r7, #12]
 8003018:	f000 f960 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00d      	beq.n	800303e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003030:	d103      	bne.n	800303a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003038:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800303a:	2303      	movs	r3, #3
 800303c:	e05f      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800303e:	897b      	ldrh	r3, [r7, #10]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	461a      	mov	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800304c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800304e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003050:	6a3a      	ldr	r2, [r7, #32]
 8003052:	492d      	ldr	r1, [pc, #180]	; (8003108 <I2C_RequestMemoryWrite+0x128>)
 8003054:	68f8      	ldr	r0, [r7, #12]
 8003056:	f000 f998 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e04c      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	617b      	str	r3, [r7, #20]
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	617b      	str	r3, [r7, #20]
 8003078:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800307a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800307c:	6a39      	ldr	r1, [r7, #32]
 800307e:	68f8      	ldr	r0, [r7, #12]
 8003080:	f000 fa02 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	d00d      	beq.n	80030a6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	2b04      	cmp	r3, #4
 8003090:	d107      	bne.n	80030a2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e02b      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d105      	bne.n	80030b8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030ac:	893b      	ldrh	r3, [r7, #8]
 80030ae:	b2da      	uxtb	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	611a      	str	r2, [r3, #16]
 80030b6:	e021      	b.n	80030fc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80030b8:	893b      	ldrh	r3, [r7, #8]
 80030ba:	0a1b      	lsrs	r3, r3, #8
 80030bc:	b29b      	uxth	r3, r3
 80030be:	b2da      	uxtb	r2, r3
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80030c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030c8:	6a39      	ldr	r1, [r7, #32]
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f9dc 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d00d      	beq.n	80030f2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	2b04      	cmp	r3, #4
 80030dc:	d107      	bne.n	80030ee <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030ec:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e005      	b.n	80030fe <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80030f2:	893b      	ldrh	r3, [r7, #8]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	00010002 	.word	0x00010002

0800310c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b088      	sub	sp, #32
 8003110:	af02      	add	r7, sp, #8
 8003112:	60f8      	str	r0, [r7, #12]
 8003114:	4608      	mov	r0, r1
 8003116:	4611      	mov	r1, r2
 8003118:	461a      	mov	r2, r3
 800311a:	4603      	mov	r3, r0
 800311c:	817b      	strh	r3, [r7, #10]
 800311e:	460b      	mov	r3, r1
 8003120:	813b      	strh	r3, [r7, #8]
 8003122:	4613      	mov	r3, r2
 8003124:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003134:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003144:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	9300      	str	r3, [sp, #0]
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	2200      	movs	r2, #0
 800314e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f8c2 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d00d      	beq.n	800317a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800316c:	d103      	bne.n	8003176 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	e0aa      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800317a:	897b      	ldrh	r3, [r7, #10]
 800317c:	b2db      	uxtb	r3, r3
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003188:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	6a3a      	ldr	r2, [r7, #32]
 800318e:	4952      	ldr	r1, [pc, #328]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 8003190:	68f8      	ldr	r0, [r7, #12]
 8003192:	f000 f8fa 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003196:	4603      	mov	r3, r0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d001      	beq.n	80031a0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	e097      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031a0:	2300      	movs	r3, #0
 80031a2:	617b      	str	r3, [r7, #20]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	617b      	str	r3, [r7, #20]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	617b      	str	r3, [r7, #20]
 80031b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031b8:	6a39      	ldr	r1, [r7, #32]
 80031ba:	68f8      	ldr	r0, [r7, #12]
 80031bc:	f000 f964 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00d      	beq.n	80031e2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	2b04      	cmp	r3, #4
 80031cc:	d107      	bne.n	80031de <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e076      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031e2:	88fb      	ldrh	r3, [r7, #6]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d105      	bne.n	80031f4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031e8:	893b      	ldrh	r3, [r7, #8]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	611a      	str	r2, [r3, #16]
 80031f2:	e021      	b.n	8003238 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031f4:	893b      	ldrh	r3, [r7, #8]
 80031f6:	0a1b      	lsrs	r3, r3, #8
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003204:	6a39      	ldr	r1, [r7, #32]
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f000 f93e 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 800320c:	4603      	mov	r3, r0
 800320e:	2b00      	cmp	r3, #0
 8003210:	d00d      	beq.n	800322e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	2b04      	cmp	r3, #4
 8003218:	d107      	bne.n	800322a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003228:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800322a:	2301      	movs	r3, #1
 800322c:	e050      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800322e:	893b      	ldrh	r3, [r7, #8]
 8003230:	b2da      	uxtb	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323a:	6a39      	ldr	r1, [r7, #32]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f000 f923 	bl	8003488 <I2C_WaitOnTXEFlagUntilTimeout>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d00d      	beq.n	8003264 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800324c:	2b04      	cmp	r3, #4
 800324e:	d107      	bne.n	8003260 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	681a      	ldr	r2, [r3, #0]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800325e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e035      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003272:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003276:	9300      	str	r3, [sp, #0]
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	2200      	movs	r2, #0
 800327c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003280:	68f8      	ldr	r0, [r7, #12]
 8003282:	f000 f82b 	bl	80032dc <I2C_WaitOnFlagUntilTimeout>
 8003286:	4603      	mov	r3, r0
 8003288:	2b00      	cmp	r3, #0
 800328a:	d00d      	beq.n	80032a8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800329a:	d103      	bne.n	80032a4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032a4:	2303      	movs	r3, #3
 80032a6:	e013      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80032a8:	897b      	ldrh	r3, [r7, #10]
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	f043 0301 	orr.w	r3, r3, #1
 80032b0:	b2da      	uxtb	r2, r3
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	6a3a      	ldr	r2, [r7, #32]
 80032bc:	4906      	ldr	r1, [pc, #24]	; (80032d8 <I2C_RequestMemoryRead+0x1cc>)
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 f863 	bl	800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e000      	b.n	80032d0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00010002 	.word	0x00010002

080032dc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	603b      	str	r3, [r7, #0]
 80032e8:	4613      	mov	r3, r2
 80032ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032ec:	e025      	b.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032f4:	d021      	beq.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032f6:	f7fe f94f 	bl	8001598 <HAL_GetTick>
 80032fa:	4602      	mov	r2, r0
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	1ad3      	subs	r3, r2, r3
 8003300:	683a      	ldr	r2, [r7, #0]
 8003302:	429a      	cmp	r2, r3
 8003304:	d302      	bcc.n	800330c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d116      	bne.n	800333a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2200      	movs	r2, #0
 8003310:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	2220      	movs	r2, #32
 8003316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2200      	movs	r2, #0
 800331e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003326:	f043 0220 	orr.w	r2, r3, #32
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003336:	2301      	movs	r3, #1
 8003338:	e023      	b.n	8003382 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	0c1b      	lsrs	r3, r3, #16
 800333e:	b2db      	uxtb	r3, r3
 8003340:	2b01      	cmp	r3, #1
 8003342:	d10d      	bne.n	8003360 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	43da      	mvns	r2, r3
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	4013      	ands	r3, r2
 8003350:	b29b      	uxth	r3, r3
 8003352:	2b00      	cmp	r3, #0
 8003354:	bf0c      	ite	eq
 8003356:	2301      	moveq	r3, #1
 8003358:	2300      	movne	r3, #0
 800335a:	b2db      	uxtb	r3, r3
 800335c:	461a      	mov	r2, r3
 800335e:	e00c      	b.n	800337a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	699b      	ldr	r3, [r3, #24]
 8003366:	43da      	mvns	r2, r3
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	4013      	ands	r3, r2
 800336c:	b29b      	uxth	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	bf0c      	ite	eq
 8003372:	2301      	moveq	r3, #1
 8003374:	2300      	movne	r3, #0
 8003376:	b2db      	uxtb	r3, r3
 8003378:	461a      	mov	r2, r3
 800337a:	79fb      	ldrb	r3, [r7, #7]
 800337c:	429a      	cmp	r2, r3
 800337e:	d0b6      	beq.n	80032ee <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003380:	2300      	movs	r3, #0
}
 8003382:	4618      	mov	r0, r3
 8003384:	3710      	adds	r7, #16
 8003386:	46bd      	mov	sp, r7
 8003388:	bd80      	pop	{r7, pc}

0800338a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800338a:	b580      	push	{r7, lr}
 800338c:	b084      	sub	sp, #16
 800338e:	af00      	add	r7, sp, #0
 8003390:	60f8      	str	r0, [r7, #12]
 8003392:	60b9      	str	r1, [r7, #8]
 8003394:	607a      	str	r2, [r7, #4]
 8003396:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003398:	e051      	b.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033a8:	d123      	bne.n	80033f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033b8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80033c2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	2200      	movs	r2, #0
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033de:	f043 0204 	orr.w	r2, r3, #4
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e046      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f8:	d021      	beq.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033fa:	f7fe f8cd 	bl	8001598 <HAL_GetTick>
 80033fe:	4602      	mov	r2, r0
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	1ad3      	subs	r3, r2, r3
 8003404:	687a      	ldr	r2, [r7, #4]
 8003406:	429a      	cmp	r2, r3
 8003408:	d302      	bcc.n	8003410 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d116      	bne.n	800343e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	2200      	movs	r2, #0
 8003414:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f043 0220 	orr.w	r2, r3, #32
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800343a:	2301      	movs	r3, #1
 800343c:	e020      	b.n	8003480 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	0c1b      	lsrs	r3, r3, #16
 8003442:	b2db      	uxtb	r3, r3
 8003444:	2b01      	cmp	r3, #1
 8003446:	d10c      	bne.n	8003462 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	43da      	mvns	r2, r3
 8003450:	68bb      	ldr	r3, [r7, #8]
 8003452:	4013      	ands	r3, r2
 8003454:	b29b      	uxth	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	bf14      	ite	ne
 800345a:	2301      	movne	r3, #1
 800345c:	2300      	moveq	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	e00b      	b.n	800347a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	699b      	ldr	r3, [r3, #24]
 8003468:	43da      	mvns	r2, r3
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	4013      	ands	r3, r2
 800346e:	b29b      	uxth	r3, r3
 8003470:	2b00      	cmp	r3, #0
 8003472:	bf14      	ite	ne
 8003474:	2301      	movne	r3, #1
 8003476:	2300      	moveq	r3, #0
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d18d      	bne.n	800339a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3710      	adds	r7, #16
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}

08003488 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b084      	sub	sp, #16
 800348c:	af00      	add	r7, sp, #0
 800348e:	60f8      	str	r0, [r7, #12]
 8003490:	60b9      	str	r1, [r7, #8]
 8003492:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003494:	e02d      	b.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003496:	68f8      	ldr	r0, [r7, #12]
 8003498:	f000 f8ce 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e02d      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034ac:	d021      	beq.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034ae:	f7fe f873 	bl	8001598 <HAL_GetTick>
 80034b2:	4602      	mov	r2, r0
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	1ad3      	subs	r3, r2, r3
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d302      	bcc.n	80034c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d116      	bne.n	80034f2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2200      	movs	r2, #0
 80034c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034de:	f043 0220 	orr.w	r2, r3, #32
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e007      	b.n	8003502 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fc:	2b80      	cmp	r3, #128	; 0x80
 80034fe:	d1ca      	bne.n	8003496 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}

0800350a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800350a:	b580      	push	{r7, lr}
 800350c:	b084      	sub	sp, #16
 800350e:	af00      	add	r7, sp, #0
 8003510:	60f8      	str	r0, [r7, #12]
 8003512:	60b9      	str	r1, [r7, #8]
 8003514:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003516:	e02d      	b.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f000 f88d 	bl	8003638 <I2C_IsAcknowledgeFailed>
 800351e:	4603      	mov	r3, r0
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003524:	2301      	movs	r3, #1
 8003526:	e02d      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800352e:	d021      	beq.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003530:	f7fe f832 	bl	8001598 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	429a      	cmp	r2, r3
 800353e:	d302      	bcc.n	8003546 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2220      	movs	r2, #32
 8003550:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	2200      	movs	r2, #0
 8003558:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f043 0220 	orr.w	r2, r3, #32
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	2200      	movs	r2, #0
 800356c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e007      	b.n	8003584 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	695b      	ldr	r3, [r3, #20]
 800357a:	f003 0304 	and.w	r3, r3, #4
 800357e:	2b04      	cmp	r3, #4
 8003580:	d1ca      	bne.n	8003518 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b084      	sub	sp, #16
 8003590:	af00      	add	r7, sp, #0
 8003592:	60f8      	str	r0, [r7, #12]
 8003594:	60b9      	str	r1, [r7, #8]
 8003596:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003598:	e042      	b.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695b      	ldr	r3, [r3, #20]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d119      	bne.n	80035dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2200      	movs	r2, #0
 80035b6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2220      	movs	r2, #32
 80035bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80035d8:	2301      	movs	r3, #1
 80035da:	e029      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035dc:	f7fd ffdc 	bl	8001598 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	68ba      	ldr	r2, [r7, #8]
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d302      	bcc.n	80035f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d116      	bne.n	8003620 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360c:	f043 0220 	orr.w	r2, r3, #32
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e007      	b.n	8003630 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800362a:	2b40      	cmp	r3, #64	; 0x40
 800362c:	d1b5      	bne.n	800359a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800362e:	2300      	movs	r3, #0
}
 8003630:	4618      	mov	r0, r3
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
 800363e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	695b      	ldr	r3, [r3, #20]
 8003646:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800364a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364e:	d11b      	bne.n	8003688 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003658:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2220      	movs	r2, #32
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003674:	f043 0204 	orr.w	r2, r3, #4
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e000      	b.n	800368a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b088      	sub	sp, #32
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e128      	b.n	80038fc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d109      	bne.n	80036ca <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a90      	ldr	r2, [pc, #576]	; (8003904 <HAL_I2S_Init+0x26c>)
 80036c2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f7fd fd11 	bl	80010ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2202      	movs	r2, #2
 80036ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69db      	ldr	r3, [r3, #28]
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80036e0:	f023 030f 	bic.w	r3, r3, #15
 80036e4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2202      	movs	r2, #2
 80036ec:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	695b      	ldr	r3, [r3, #20]
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d060      	beq.n	80037b8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d102      	bne.n	8003704 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80036fe:	2310      	movs	r3, #16
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e001      	b.n	8003708 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003704:	2320      	movs	r3, #32
 8003706:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689b      	ldr	r3, [r3, #8]
 800370c:	2b20      	cmp	r3, #32
 800370e:	d802      	bhi.n	8003716 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003716:	2001      	movs	r0, #1
 8003718:	f001 fbd2 	bl	8004ec0 <HAL_RCCEx_GetPeriphCLKFreq>
 800371c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003726:	d125      	bne.n	8003774 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d010      	beq.n	8003752 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	fbb2 f2f3 	udiv	r2, r2, r3
 800373a:	4613      	mov	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	4413      	add	r3, r2
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	461a      	mov	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	695b      	ldr	r3, [r3, #20]
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	3305      	adds	r3, #5
 800374e:	613b      	str	r3, [r7, #16]
 8003750:	e01f      	b.n	8003792 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	00db      	lsls	r3, r3, #3
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	fbb2 f2f3 	udiv	r2, r2, r3
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	005b      	lsls	r3, r3, #1
 8003764:	461a      	mov	r2, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	695b      	ldr	r3, [r3, #20]
 800376a:	fbb2 f3f3 	udiv	r3, r2, r3
 800376e:	3305      	adds	r3, #5
 8003770:	613b      	str	r3, [r7, #16]
 8003772:	e00e      	b.n	8003792 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003774:	68fa      	ldr	r2, [r7, #12]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	fbb2 f2f3 	udiv	r2, r2, r3
 800377c:	4613      	mov	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4413      	add	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	461a      	mov	r2, r3
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	695b      	ldr	r3, [r3, #20]
 800378a:	fbb2 f3f3 	udiv	r3, r2, r3
 800378e:	3305      	adds	r3, #5
 8003790:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	4a5c      	ldr	r2, [pc, #368]	; (8003908 <HAL_I2S_Init+0x270>)
 8003796:	fba2 2303 	umull	r2, r3, r2, r3
 800379a:	08db      	lsrs	r3, r3, #3
 800379c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80037a6:	693a      	ldr	r2, [r7, #16]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	085b      	lsrs	r3, r3, #1
 80037ae:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	61bb      	str	r3, [r7, #24]
 80037b6:	e003      	b.n	80037c0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80037b8:	2302      	movs	r3, #2
 80037ba:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80037bc:	2300      	movs	r3, #0
 80037be:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80037c0:	69fb      	ldr	r3, [r7, #28]
 80037c2:	2b01      	cmp	r3, #1
 80037c4:	d902      	bls.n	80037cc <HAL_I2S_Init+0x134>
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2bff      	cmp	r3, #255	; 0xff
 80037ca:	d907      	bls.n	80037dc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d0:	f043 0210 	orr.w	r2, r3, #16
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e08f      	b.n	80038fc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	691a      	ldr	r2, [r3, #16]
 80037e0:	69bb      	ldr	r3, [r7, #24]
 80037e2:	ea42 0103 	orr.w	r1, r2, r3
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69fa      	ldr	r2, [r7, #28]
 80037ec:	430a      	orrs	r2, r1
 80037ee:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037fa:	f023 030f 	bic.w	r3, r3, #15
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	6851      	ldr	r1, [r2, #4]
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6892      	ldr	r2, [r2, #8]
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68d2      	ldr	r2, [r2, #12]
 800380c:	4311      	orrs	r1, r2
 800380e:	687a      	ldr	r2, [r7, #4]
 8003810:	6992      	ldr	r2, [r2, #24]
 8003812:	430a      	orrs	r2, r1
 8003814:	431a      	orrs	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800381e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a1b      	ldr	r3, [r3, #32]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d161      	bne.n	80038ec <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a38      	ldr	r2, [pc, #224]	; (800390c <HAL_I2S_Init+0x274>)
 800382c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a37      	ldr	r2, [pc, #220]	; (8003910 <HAL_I2S_Init+0x278>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d101      	bne.n	800383c <HAL_I2S_Init+0x1a4>
 8003838:	4b36      	ldr	r3, [pc, #216]	; (8003914 <HAL_I2S_Init+0x27c>)
 800383a:	e001      	b.n	8003840 <HAL_I2S_Init+0x1a8>
 800383c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	687a      	ldr	r2, [r7, #4]
 8003844:	6812      	ldr	r2, [r2, #0]
 8003846:	4932      	ldr	r1, [pc, #200]	; (8003910 <HAL_I2S_Init+0x278>)
 8003848:	428a      	cmp	r2, r1
 800384a:	d101      	bne.n	8003850 <HAL_I2S_Init+0x1b8>
 800384c:	4a31      	ldr	r2, [pc, #196]	; (8003914 <HAL_I2S_Init+0x27c>)
 800384e:	e001      	b.n	8003854 <HAL_I2S_Init+0x1bc>
 8003850:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003854:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003858:	f023 030f 	bic.w	r3, r3, #15
 800385c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a2b      	ldr	r2, [pc, #172]	; (8003910 <HAL_I2S_Init+0x278>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d101      	bne.n	800386c <HAL_I2S_Init+0x1d4>
 8003868:	4b2a      	ldr	r3, [pc, #168]	; (8003914 <HAL_I2S_Init+0x27c>)
 800386a:	e001      	b.n	8003870 <HAL_I2S_Init+0x1d8>
 800386c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003870:	2202      	movs	r2, #2
 8003872:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a25      	ldr	r2, [pc, #148]	; (8003910 <HAL_I2S_Init+0x278>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d101      	bne.n	8003882 <HAL_I2S_Init+0x1ea>
 800387e:	4b25      	ldr	r3, [pc, #148]	; (8003914 <HAL_I2S_Init+0x27c>)
 8003880:	e001      	b.n	8003886 <HAL_I2S_Init+0x1ee>
 8003882:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003886:	69db      	ldr	r3, [r3, #28]
 8003888:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003892:	d003      	beq.n	800389c <HAL_I2S_Init+0x204>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d103      	bne.n	80038a4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800389c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038a0:	613b      	str	r3, [r7, #16]
 80038a2:	e001      	b.n	80038a8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038b2:	4313      	orrs	r3, r2
 80038b4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038bc:	4313      	orrs	r3, r2
 80038be:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80038c6:	4313      	orrs	r3, r2
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	897b      	ldrh	r3, [r7, #10]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80038d4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a0d      	ldr	r2, [pc, #52]	; (8003910 <HAL_I2S_Init+0x278>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d101      	bne.n	80038e4 <HAL_I2S_Init+0x24c>
 80038e0:	4b0c      	ldr	r3, [pc, #48]	; (8003914 <HAL_I2S_Init+0x27c>)
 80038e2:	e001      	b.n	80038e8 <HAL_I2S_Init+0x250>
 80038e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e8:	897a      	ldrh	r2, [r7, #10]
 80038ea:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2201      	movs	r2, #1
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3720      	adds	r7, #32
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	08003a0f 	.word	0x08003a0f
 8003908:	cccccccd 	.word	0xcccccccd
 800390c:	08003e39 	.word	0x08003e39
 8003910:	40003800 	.word	0x40003800
 8003914:	40003400 	.word	0x40003400

08003918 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr

08003954 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b082      	sub	sp, #8
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	881a      	ldrh	r2, [r3, #0]
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800396c:	1c9a      	adds	r2, r3, #2
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003976:	b29b      	uxth	r3, r3
 8003978:	3b01      	subs	r3, #1
 800397a:	b29a      	uxth	r2, r3
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003984:	b29b      	uxth	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d10e      	bne.n	80039a8 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003998:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7ff ffb8 	bl	8003918 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80039a8:	bf00      	nop
 80039aa:	3708      	adds	r7, #8
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b082      	sub	sp, #8
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c2:	b292      	uxth	r2, r2
 80039c4:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ca:	1c9a      	adds	r2, r3, #2
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	3b01      	subs	r3, #1
 80039d8:	b29a      	uxth	r2, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d10e      	bne.n	8003a06 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039f6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff93 	bl	800392c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a06:	bf00      	nop
 8003a08:	3708      	adds	r7, #8
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bd80      	pop	{r7, pc}

08003a0e <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a0e:	b580      	push	{r7, lr}
 8003a10:	b086      	sub	sp, #24
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d13a      	bne.n	8003aa0 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d109      	bne.n	8003a48 <I2S_IRQHandler+0x3a>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3e:	2b40      	cmp	r3, #64	; 0x40
 8003a40:	d102      	bne.n	8003a48 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f7ff ffb4 	bl	80039b0 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a4e:	2b40      	cmp	r3, #64	; 0x40
 8003a50:	d126      	bne.n	8003aa0 <I2S_IRQHandler+0x92>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f003 0320 	and.w	r3, r3, #32
 8003a5c:	2b20      	cmp	r3, #32
 8003a5e:	d11f      	bne.n	8003aa0 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685a      	ldr	r2, [r3, #4]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a6e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a70:	2300      	movs	r3, #0
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	68db      	ldr	r3, [r3, #12]
 8003a7a:	613b      	str	r3, [r7, #16]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689b      	ldr	r3, [r3, #8]
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2201      	movs	r2, #1
 8003a8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a92:	f043 0202 	orr.w	r2, r3, #2
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff ff50 	bl	8003940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa6:	b2db      	uxtb	r3, r3
 8003aa8:	2b03      	cmp	r3, #3
 8003aaa:	d136      	bne.n	8003b1a <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d109      	bne.n	8003aca <I2S_IRQHandler+0xbc>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac0:	2b80      	cmp	r3, #128	; 0x80
 8003ac2:	d102      	bne.n	8003aca <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff45 	bl	8003954 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003aca:	697b      	ldr	r3, [r7, #20]
 8003acc:	f003 0308 	and.w	r3, r3, #8
 8003ad0:	2b08      	cmp	r3, #8
 8003ad2:	d122      	bne.n	8003b1a <I2S_IRQHandler+0x10c>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f003 0320 	and.w	r3, r3, #32
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d11b      	bne.n	8003b1a <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003af0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	60fb      	str	r3, [r7, #12]
 8003afe:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2201      	movs	r2, #1
 8003b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0c:	f043 0204 	orr.w	r2, r3, #4
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f7ff ff13 	bl	8003940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b1a:	bf00      	nop
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b088      	sub	sp, #32
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
 8003b30:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b44:	b2db      	uxtb	r3, r3
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d002      	beq.n	8003b50 <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003b4a:	2302      	movs	r3, #2
 8003b4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b4e:	e160      	b.n	8003e12 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d005      	beq.n	8003b62 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003b5c:	887b      	ldrh	r3, [r7, #2]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d101      	bne.n	8003b66 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	e15a      	b.n	8003e1c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d101      	bne.n	8003b76 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003b72:	2302      	movs	r3, #2
 8003b74:	e152      	b.n	8003e1c <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2201      	movs	r2, #1
 8003b7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003b7e:	68ba      	ldr	r2, [r7, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0307 	and.w	r3, r3, #7
 8003b94:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003b96:	697b      	ldr	r3, [r7, #20]
 8003b98:	2b03      	cmp	r3, #3
 8003b9a:	d002      	beq.n	8003ba2 <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	2b05      	cmp	r3, #5
 8003ba0:	d114      	bne.n	8003bcc <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003ba2:	887b      	ldrh	r3, [r7, #2]
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003bac:	887b      	ldrh	r3, [r7, #2]
 8003bae:	005b      	lsls	r3, r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	b29a      	uxth	r2, r3
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003bc0:	887b      	ldrh	r3, [r7, #2]
 8003bc2:	005b      	lsls	r3, r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	865a      	strh	r2, [r3, #50]	; 0x32
 8003bca:	e00b      	b.n	8003be4 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	887a      	ldrh	r2, [r7, #2]
 8003bd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	887a      	ldrh	r2, [r7, #2]
 8003bdc:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	887a      	ldrh	r2, [r7, #2]
 8003be2:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	2200      	movs	r2, #0
 8003be8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	2205      	movs	r2, #5
 8003bee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf6:	4a8b      	ldr	r2, [pc, #556]	; (8003e24 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003bf8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bfe:	4a8a      	ldr	r2, [pc, #552]	; (8003e28 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003c00:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c06:	4a89      	ldr	r2, [pc, #548]	; (8003e2c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003c08:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0e:	2200      	movs	r2, #0
 8003c10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	2200      	movs	r2, #0
 8003c18:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1e:	4a83      	ldr	r2, [pc, #524]	; (8003e2c <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003c20:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	69db      	ldr	r3, [r3, #28]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c34:	d002      	beq.n	8003c3c <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d16b      	bne.n	8003d14 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003c3c:	1d3b      	adds	r3, r7, #4
 8003c3e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a79      	ldr	r2, [pc, #484]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003c4a:	4293      	cmp	r3, r2
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003c4e:	4b79      	ldr	r3, [pc, #484]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003c50:	e001      	b.n	8003c56 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003c52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c56:	330c      	adds	r3, #12
 8003c58:	4619      	mov	r1, r3
 8003c5a:	69bb      	ldr	r3, [r7, #24]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	f7fe f8c6 	bl	8001df4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a70      	ldr	r2, [pc, #448]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d101      	bne.n	8003c76 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003c72:	4b70      	ldr	r3, [pc, #448]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003c74:	e001      	b.n	8003c7a <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003c76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	496b      	ldr	r1, [pc, #428]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003c82:	428b      	cmp	r3, r1
 8003c84:	d101      	bne.n	8003c8a <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003c86:	4b6b      	ldr	r3, [pc, #428]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003c88:	e001      	b.n	8003c8e <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003c8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c8e:	f042 0201 	orr.w	r2, r2, #1
 8003c92:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003c94:	f107 0308 	add.w	r3, r7, #8
 8003c98:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003c9e:	69bb      	ldr	r3, [r7, #24]
 8003ca0:	6819      	ldr	r1, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	461a      	mov	r2, r3
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	f7fe f8a0 	bl	8001df4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	685a      	ldr	r2, [r3, #4]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0202 	orr.w	r2, r2, #2
 8003cc2:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	69db      	ldr	r3, [r3, #28]
 8003cca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003cd2:	f000 809e 	beq.w	8003e12 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a55      	ldr	r2, [pc, #340]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d101      	bne.n	8003ce4 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003ce0:	4b54      	ldr	r3, [pc, #336]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ce2:	e001      	b.n	8003ce8 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003ce4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ce8:	69da      	ldr	r2, [r3, #28]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4950      	ldr	r1, [pc, #320]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003cf0:	428b      	cmp	r3, r1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003cf4:	4b4f      	ldr	r3, [pc, #316]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003cf6:	e001      	b.n	8003cfc <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003cf8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cfc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d00:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	69da      	ldr	r2, [r3, #28]
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003d10:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003d12:	e07e      	b.n	8003e12 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d22:	d10a      	bne.n	8003d3a <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003d24:	2300      	movs	r3, #0
 8003d26:	613b      	str	r3, [r7, #16]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	613b      	str	r3, [r7, #16]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	613b      	str	r3, [r7, #16]
 8003d38:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003d3a:	f107 0308 	add.w	r3, r7, #8
 8003d3e:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d44:	69bb      	ldr	r3, [r7, #24]
 8003d46:	6819      	ldr	r1, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a38      	ldr	r2, [pc, #224]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003d52:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d54:	e001      	b.n	8003d5a <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5a:	330c      	adds	r3, #12
 8003d5c:	461a      	mov	r2, r3
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f7fe f846 	bl	8001df4 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a30      	ldr	r2, [pc, #192]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d101      	bne.n	8003d76 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003d72:	4b30      	ldr	r3, [pc, #192]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d74:	e001      	b.n	8003d7a <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003d76:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7a:	685a      	ldr	r2, [r3, #4]
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	492b      	ldr	r1, [pc, #172]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d82:	428b      	cmp	r3, r1
 8003d84:	d101      	bne.n	8003d8a <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003d86:	4b2b      	ldr	r3, [pc, #172]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d88:	e001      	b.n	8003d8e <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003d8a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d8e:	f042 0202 	orr.w	r2, r2, #2
 8003d92:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003d94:	1d3b      	adds	r3, r7, #4
 8003d96:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	330c      	adds	r3, #12
 8003da2:	4619      	mov	r1, r3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003dac:	b29b      	uxth	r3, r3
 8003dae:	f7fe f821 	bl	8001df4 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f042 0201 	orr.w	r2, r2, #1
 8003dc0:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d01e      	beq.n	8003e10 <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a16      	ldr	r2, [pc, #88]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003ddc:	4b15      	ldr	r3, [pc, #84]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003dde:	e001      	b.n	8003de4 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de4:	69da      	ldr	r2, [r3, #28]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4911      	ldr	r1, [pc, #68]	; (8003e30 <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003dec:	428b      	cmp	r3, r1
 8003dee:	d101      	bne.n	8003df4 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003df0:	4b10      	ldr	r3, [pc, #64]	; (8003e34 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003df2:	e001      	b.n	8003df8 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dfc:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69da      	ldr	r2, [r3, #28]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e0c:	61da      	str	r2, [r3, #28]
 8003e0e:	e000      	b.n	8003e12 <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003e10:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003e1a:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	3720      	adds	r7, #32
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	080040e1 	.word	0x080040e1
 8003e28:	080040fd 	.word	0x080040fd
 8003e2c:	080041d5 	.word	0x080041d5
 8003e30:	40003800 	.word	0x40003800
 8003e34:	40003400 	.word	0x40003400

08003e38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	b088      	sub	sp, #32
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	689b      	ldr	r3, [r3, #8]
 8003e46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a92      	ldr	r2, [pc, #584]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d101      	bne.n	8003e56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003e52:	4b92      	ldr	r3, [pc, #584]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e54:	e001      	b.n	8003e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003e56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a8b      	ldr	r2, [pc, #556]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d101      	bne.n	8003e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003e70:	4b8a      	ldr	r3, [pc, #552]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e72:	e001      	b.n	8003e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003e74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e84:	d004      	beq.n	8003e90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 8099 	bne.w	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d107      	bne.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d002      	beq.n	8003eaa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f000 f9d5 	bl	8004254 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b01      	cmp	r3, #1
 8003eb2:	d107      	bne.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 fa78 	bl	80043b4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eca:	2b40      	cmp	r3, #64	; 0x40
 8003ecc:	d13a      	bne.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	f003 0320 	and.w	r3, r3, #32
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d035      	beq.n	8003f44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d101      	bne.n	8003ee6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003ee2:	4b6e      	ldr	r3, [pc, #440]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ee4:	e001      	b.n	8003eea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003eea:	685a      	ldr	r2, [r3, #4]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4969      	ldr	r1, [pc, #420]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003ef2:	428b      	cmp	r3, r1
 8003ef4:	d101      	bne.n	8003efa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003ef6:	4b69      	ldr	r3, [pc, #420]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ef8:	e001      	b.n	8003efe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003efa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003efe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	685a      	ldr	r2, [r3, #4]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003f14:	2300      	movs	r3, #0
 8003f16:	60fb      	str	r3, [r7, #12]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	60fb      	str	r3, [r7, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	60fb      	str	r3, [r7, #12]
 8003f28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f043 0202 	orr.w	r2, r3, #2
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f7ff fcfe 	bl	8003940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	f003 0308 	and.w	r3, r3, #8
 8003f4a:	2b08      	cmp	r3, #8
 8003f4c:	f040 80c3 	bne.w	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	f003 0320 	and.w	r3, r3, #32
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	f000 80bd 	beq.w	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685a      	ldr	r2, [r3, #4]
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a49      	ldr	r2, [pc, #292]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003f76:	4b49      	ldr	r3, [pc, #292]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f78:	e001      	b.n	8003f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f7e:	685a      	ldr	r2, [r3, #4]
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	4944      	ldr	r1, [pc, #272]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f86:	428b      	cmp	r3, r1
 8003f88:	d101      	bne.n	8003f8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003f8a:	4b44      	ldr	r3, [pc, #272]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f8c:	e001      	b.n	8003f92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003f8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	60bb      	str	r3, [r7, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	60bb      	str	r3, [r7, #8]
 8003fa4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fb2:	f043 0204 	orr.w	r2, r3, #4
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fcc0 	bl	8003940 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fc0:	e089      	b.n	80040d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b02      	cmp	r3, #2
 8003fca:	d107      	bne.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d002      	beq.n	8003fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f96e 	bl	80042b8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003fdc:	69fb      	ldr	r3, [r7, #28]
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d107      	bne.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d002      	beq.n	8003ff6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f000 f9ad 	bl	8004350 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ff6:	69fb      	ldr	r3, [r7, #28]
 8003ff8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ffc:	2b40      	cmp	r3, #64	; 0x40
 8003ffe:	d12f      	bne.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d02a      	beq.n	8004060 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	685a      	ldr	r2, [r3, #4]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004018:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a1e      	ldr	r2, [pc, #120]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d101      	bne.n	8004028 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004024:	4b1d      	ldr	r3, [pc, #116]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004026:	e001      	b.n	800402c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004028:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800402c:	685a      	ldr	r2, [r3, #4]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4919      	ldr	r1, [pc, #100]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004034:	428b      	cmp	r3, r1
 8004036:	d101      	bne.n	800403c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004038:	4b18      	ldr	r3, [pc, #96]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800403a:	e001      	b.n	8004040 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800403c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004040:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004044:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2201      	movs	r2, #1
 800404a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004052:	f043 0202 	orr.w	r2, r3, #2
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f7ff fc70 	bl	8003940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b08      	cmp	r3, #8
 8004068:	d136      	bne.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	f003 0320 	and.w	r3, r3, #32
 8004070:	2b00      	cmp	r3, #0
 8004072:	d031      	beq.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a07      	ldr	r2, [pc, #28]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d101      	bne.n	8004082 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004080:	e001      	b.n	8004086 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004082:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004086:	685a      	ldr	r2, [r3, #4]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4902      	ldr	r1, [pc, #8]	; (8004098 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800408e:	428b      	cmp	r3, r1
 8004090:	d106      	bne.n	80040a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004092:	4b02      	ldr	r3, [pc, #8]	; (800409c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004094:	e006      	b.n	80040a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004096:	bf00      	nop
 8004098:	40003800 	.word	0x40003800
 800409c:	40003400 	.word	0x40003400
 80040a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040a8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2201      	movs	r2, #1
 80040be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	f043 0204 	orr.w	r2, r3, #4
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7ff fc36 	bl	8003940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	e000      	b.n	80040d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d6:	bf00      	nop
}
 80040d8:	bf00      	nop
 80040da:	3720      	adds	r7, #32
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80040ee:	68f8      	ldr	r0, [r7, #12]
 80040f0:	f7fc fbaa 	bl	8000848 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80040f4:	bf00      	nop
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}

080040fc <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004108:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d155      	bne.n	80041be <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	69db      	ldr	r3, [r3, #28]
 8004118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800411c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004120:	d006      	beq.n	8004130 <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 800412c:	2b00      	cmp	r3, #0
 800412e:	d11e      	bne.n	800416e <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a25      	ldr	r2, [pc, #148]	; (80041cc <I2SEx_TxRxDMACplt+0xd0>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d101      	bne.n	800413e <I2SEx_TxRxDMACplt+0x42>
 800413a:	4b25      	ldr	r3, [pc, #148]	; (80041d0 <I2SEx_TxRxDMACplt+0xd4>)
 800413c:	e001      	b.n	8004142 <I2SEx_TxRxDMACplt+0x46>
 800413e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004142:	685a      	ldr	r2, [r3, #4]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4920      	ldr	r1, [pc, #128]	; (80041cc <I2SEx_TxRxDMACplt+0xd0>)
 800414a:	428b      	cmp	r3, r1
 800414c:	d101      	bne.n	8004152 <I2SEx_TxRxDMACplt+0x56>
 800414e:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <I2SEx_TxRxDMACplt+0xd4>)
 8004150:	e001      	b.n	8004156 <I2SEx_TxRxDMACplt+0x5a>
 8004152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004156:	f022 0201 	bic.w	r2, r2, #1
 800415a:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	685a      	ldr	r2, [r3, #4]
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0202 	bic.w	r2, r2, #2
 800416a:	605a      	str	r2, [r3, #4]
 800416c:	e01d      	b.n	80041aa <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	685a      	ldr	r2, [r3, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f022 0201 	bic.w	r2, r2, #1
 800417c:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a12      	ldr	r2, [pc, #72]	; (80041cc <I2SEx_TxRxDMACplt+0xd0>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d101      	bne.n	800418c <I2SEx_TxRxDMACplt+0x90>
 8004188:	4b11      	ldr	r3, [pc, #68]	; (80041d0 <I2SEx_TxRxDMACplt+0xd4>)
 800418a:	e001      	b.n	8004190 <I2SEx_TxRxDMACplt+0x94>
 800418c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	490d      	ldr	r1, [pc, #52]	; (80041cc <I2SEx_TxRxDMACplt+0xd0>)
 8004198:	428b      	cmp	r3, r1
 800419a:	d101      	bne.n	80041a0 <I2SEx_TxRxDMACplt+0xa4>
 800419c:	4b0c      	ldr	r3, [pc, #48]	; (80041d0 <I2SEx_TxRxDMACplt+0xd4>)
 800419e:	e001      	b.n	80041a4 <I2SEx_TxRxDMACplt+0xa8>
 80041a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a4:	f022 0202 	bic.w	r2, r2, #2
 80041a8:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2200      	movs	r2, #0
 80041ae:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041be:	68f8      	ldr	r0, [r7, #12]
 80041c0:	f7fc fb60 	bl	8000884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80041c4:	bf00      	nop
 80041c6:	3710      	adds	r7, #16
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	40003800 	.word	0x40003800
 80041d0:	40003400 	.word	0x40003400

080041d4 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e0:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685a      	ldr	r2, [r3, #4]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0203 	bic.w	r2, r2, #3
 80041f0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	4a15      	ldr	r2, [pc, #84]	; (800424c <I2SEx_TxRxDMAError+0x78>)
 80041f8:	4293      	cmp	r3, r2
 80041fa:	d101      	bne.n	8004200 <I2SEx_TxRxDMAError+0x2c>
 80041fc:	4b14      	ldr	r3, [pc, #80]	; (8004250 <I2SEx_TxRxDMAError+0x7c>)
 80041fe:	e001      	b.n	8004204 <I2SEx_TxRxDMAError+0x30>
 8004200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4910      	ldr	r1, [pc, #64]	; (800424c <I2SEx_TxRxDMAError+0x78>)
 800420c:	428b      	cmp	r3, r1
 800420e:	d101      	bne.n	8004214 <I2SEx_TxRxDMAError+0x40>
 8004210:	4b0f      	ldr	r3, [pc, #60]	; (8004250 <I2SEx_TxRxDMAError+0x7c>)
 8004212:	e001      	b.n	8004218 <I2SEx_TxRxDMAError+0x44>
 8004214:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004218:	f022 0203 	bic.w	r2, r2, #3
 800421c:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	2200      	movs	r2, #0
 8004228:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004236:	f043 0208 	orr.w	r2, r3, #8
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f7ff fb7e 	bl	8003940 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004244:	bf00      	nop
 8004246:	3710      	adds	r7, #16
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}
 800424c:	40003800 	.word	0x40003800
 8004250:	40003400 	.word	0x40003400

08004254 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b082      	sub	sp, #8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004260:	1c99      	adds	r1, r3, #2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6251      	str	r1, [r2, #36]	; 0x24
 8004266:	881a      	ldrh	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004272:	b29b      	uxth	r3, r3
 8004274:	3b01      	subs	r3, #1
 8004276:	b29a      	uxth	r2, r3
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	2b00      	cmp	r3, #0
 8004284:	d113      	bne.n	80042ae <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004294:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	d106      	bne.n	80042ae <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80042a8:	6878      	ldr	r0, [r7, #4]
 80042aa:	f7fc faeb 	bl	8000884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
	...

080042b8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b082      	sub	sp, #8
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	1c99      	adds	r1, r3, #2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6251      	str	r1, [r2, #36]	; 0x24
 80042ca:	8819      	ldrh	r1, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a1d      	ldr	r2, [pc, #116]	; (8004348 <I2SEx_TxISR_I2SExt+0x90>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <I2SEx_TxISR_I2SExt+0x22>
 80042d6:	4b1d      	ldr	r3, [pc, #116]	; (800434c <I2SEx_TxISR_I2SExt+0x94>)
 80042d8:	e001      	b.n	80042de <I2SEx_TxISR_I2SExt+0x26>
 80042da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042de:	460a      	mov	r2, r1
 80042e0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	3b01      	subs	r3, #1
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042f4:	b29b      	uxth	r3, r3
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d121      	bne.n	800433e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a12      	ldr	r2, [pc, #72]	; (8004348 <I2SEx_TxISR_I2SExt+0x90>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d101      	bne.n	8004308 <I2SEx_TxISR_I2SExt+0x50>
 8004304:	4b11      	ldr	r3, [pc, #68]	; (800434c <I2SEx_TxISR_I2SExt+0x94>)
 8004306:	e001      	b.n	800430c <I2SEx_TxISR_I2SExt+0x54>
 8004308:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	490d      	ldr	r1, [pc, #52]	; (8004348 <I2SEx_TxISR_I2SExt+0x90>)
 8004314:	428b      	cmp	r3, r1
 8004316:	d101      	bne.n	800431c <I2SEx_TxISR_I2SExt+0x64>
 8004318:	4b0c      	ldr	r3, [pc, #48]	; (800434c <I2SEx_TxISR_I2SExt+0x94>)
 800431a:	e001      	b.n	8004320 <I2SEx_TxISR_I2SExt+0x68>
 800431c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004320:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004324:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800432a:	b29b      	uxth	r3, r3
 800432c:	2b00      	cmp	r3, #0
 800432e:	d106      	bne.n	800433e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2201      	movs	r2, #1
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004338:	6878      	ldr	r0, [r7, #4]
 800433a:	f7fc faa3 	bl	8000884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800433e:	bf00      	nop
 8004340:	3708      	adds	r7, #8
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	40003800 	.word	0x40003800
 800434c:	40003400 	.word	0x40003400

08004350 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68d8      	ldr	r0, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004362:	1c99      	adds	r1, r3, #2
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004368:	b282      	uxth	r2, r0
 800436a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004370:	b29b      	uxth	r3, r3
 8004372:	3b01      	subs	r3, #1
 8004374:	b29a      	uxth	r2, r3
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800437e:	b29b      	uxth	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d113      	bne.n	80043ac <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004392:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004398:	b29b      	uxth	r3, r3
 800439a:	2b00      	cmp	r3, #0
 800439c:	d106      	bne.n	80043ac <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7fc fa6c 	bl	8000884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b082      	sub	sp, #8
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a20      	ldr	r2, [pc, #128]	; (8004444 <I2SEx_RxISR_I2SExt+0x90>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d101      	bne.n	80043ca <I2SEx_RxISR_I2SExt+0x16>
 80043c6:	4b20      	ldr	r3, [pc, #128]	; (8004448 <I2SEx_RxISR_I2SExt+0x94>)
 80043c8:	e001      	b.n	80043ce <I2SEx_RxISR_I2SExt+0x1a>
 80043ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ce:	68d8      	ldr	r0, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d4:	1c99      	adds	r1, r3, #2
 80043d6:	687a      	ldr	r2, [r7, #4]
 80043d8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80043da:	b282      	uxth	r2, r0
 80043dc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80043f0:	b29b      	uxth	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d121      	bne.n	800443a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a12      	ldr	r2, [pc, #72]	; (8004444 <I2SEx_RxISR_I2SExt+0x90>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d101      	bne.n	8004404 <I2SEx_RxISR_I2SExt+0x50>
 8004400:	4b11      	ldr	r3, [pc, #68]	; (8004448 <I2SEx_RxISR_I2SExt+0x94>)
 8004402:	e001      	b.n	8004408 <I2SEx_RxISR_I2SExt+0x54>
 8004404:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004408:	685a      	ldr	r2, [r3, #4]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	490d      	ldr	r1, [pc, #52]	; (8004444 <I2SEx_RxISR_I2SExt+0x90>)
 8004410:	428b      	cmp	r3, r1
 8004412:	d101      	bne.n	8004418 <I2SEx_RxISR_I2SExt+0x64>
 8004414:	4b0c      	ldr	r3, [pc, #48]	; (8004448 <I2SEx_RxISR_I2SExt+0x94>)
 8004416:	e001      	b.n	800441c <I2SEx_RxISR_I2SExt+0x68>
 8004418:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800441c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004420:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004426:	b29b      	uxth	r3, r3
 8004428:	2b00      	cmp	r3, #0
 800442a:	d106      	bne.n	800443a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7fc fa25 	bl	8000884 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800443a:	bf00      	nop
 800443c:	3708      	adds	r7, #8
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40003800 	.word	0x40003800
 8004448:	40003400 	.word	0x40003400

0800444c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800444c:	b580      	push	{r7, lr}
 800444e:	b086      	sub	sp, #24
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d101      	bne.n	800445e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	e267      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d075      	beq.n	8004556 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800446a:	4b88      	ldr	r3, [pc, #544]	; (800468c <HAL_RCC_OscConfig+0x240>)
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	f003 030c 	and.w	r3, r3, #12
 8004472:	2b04      	cmp	r3, #4
 8004474:	d00c      	beq.n	8004490 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004476:	4b85      	ldr	r3, [pc, #532]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004478:	689b      	ldr	r3, [r3, #8]
 800447a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800447e:	2b08      	cmp	r3, #8
 8004480:	d112      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004482:	4b82      	ldr	r3, [pc, #520]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800448a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800448e:	d10b      	bne.n	80044a8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004490:	4b7e      	ldr	r3, [pc, #504]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004498:	2b00      	cmp	r3, #0
 800449a:	d05b      	beq.n	8004554 <HAL_RCC_OscConfig+0x108>
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d157      	bne.n	8004554 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80044a4:	2301      	movs	r3, #1
 80044a6:	e242      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b0:	d106      	bne.n	80044c0 <HAL_RCC_OscConfig+0x74>
 80044b2:	4b76      	ldr	r3, [pc, #472]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4a75      	ldr	r2, [pc, #468]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044bc:	6013      	str	r3, [r2, #0]
 80044be:	e01d      	b.n	80044fc <HAL_RCC_OscConfig+0xb0>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80044c8:	d10c      	bne.n	80044e4 <HAL_RCC_OscConfig+0x98>
 80044ca:	4b70      	ldr	r3, [pc, #448]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a6f      	ldr	r2, [pc, #444]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044d4:	6013      	str	r3, [r2, #0]
 80044d6:	4b6d      	ldr	r3, [pc, #436]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a6c      	ldr	r2, [pc, #432]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6013      	str	r3, [r2, #0]
 80044e2:	e00b      	b.n	80044fc <HAL_RCC_OscConfig+0xb0>
 80044e4:	4b69      	ldr	r3, [pc, #420]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a68      	ldr	r2, [pc, #416]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ee:	6013      	str	r3, [r2, #0]
 80044f0:	4b66      	ldr	r3, [pc, #408]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a65      	ldr	r2, [pc, #404]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80044f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d013      	beq.n	800452c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004504:	f7fd f848 	bl	8001598 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800450c:	f7fd f844 	bl	8001598 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b64      	cmp	r3, #100	; 0x64
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e207      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800451e:	4b5b      	ldr	r3, [pc, #364]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0f0      	beq.n	800450c <HAL_RCC_OscConfig+0xc0>
 800452a:	e014      	b.n	8004556 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800452c:	f7fd f834 	bl	8001598 <HAL_GetTick>
 8004530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004532:	e008      	b.n	8004546 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004534:	f7fd f830 	bl	8001598 <HAL_GetTick>
 8004538:	4602      	mov	r2, r0
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	2b64      	cmp	r3, #100	; 0x64
 8004540:	d901      	bls.n	8004546 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e1f3      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004546:	4b51      	ldr	r3, [pc, #324]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d1f0      	bne.n	8004534 <HAL_RCC_OscConfig+0xe8>
 8004552:	e000      	b.n	8004556 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004554:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d063      	beq.n	800462a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004562:	4b4a      	ldr	r3, [pc, #296]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004564:	689b      	ldr	r3, [r3, #8]
 8004566:	f003 030c 	and.w	r3, r3, #12
 800456a:	2b00      	cmp	r3, #0
 800456c:	d00b      	beq.n	8004586 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800456e:	4b47      	ldr	r3, [pc, #284]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004576:	2b08      	cmp	r3, #8
 8004578:	d11c      	bne.n	80045b4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800457a:	4b44      	ldr	r3, [pc, #272]	; (800468c <HAL_RCC_OscConfig+0x240>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d116      	bne.n	80045b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004586:	4b41      	ldr	r3, [pc, #260]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0302 	and.w	r3, r3, #2
 800458e:	2b00      	cmp	r3, #0
 8004590:	d005      	beq.n	800459e <HAL_RCC_OscConfig+0x152>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	2b01      	cmp	r3, #1
 8004598:	d001      	beq.n	800459e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e1c7      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459e:	4b3b      	ldr	r3, [pc, #236]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	00db      	lsls	r3, r3, #3
 80045ac:	4937      	ldr	r1, [pc, #220]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80045ae:	4313      	orrs	r3, r2
 80045b0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045b2:	e03a      	b.n	800462a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d020      	beq.n	80045fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80045bc:	4b34      	ldr	r3, [pc, #208]	; (8004690 <HAL_RCC_OscConfig+0x244>)
 80045be:	2201      	movs	r2, #1
 80045c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045c2:	f7fc ffe9 	bl	8001598 <HAL_GetTick>
 80045c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045c8:	e008      	b.n	80045dc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80045ca:	f7fc ffe5 	bl	8001598 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d901      	bls.n	80045dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80045d8:	2303      	movs	r3, #3
 80045da:	e1a8      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045dc:	4b2b      	ldr	r3, [pc, #172]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0302 	and.w	r3, r3, #2
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0f0      	beq.n	80045ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80045e8:	4b28      	ldr	r3, [pc, #160]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	691b      	ldr	r3, [r3, #16]
 80045f4:	00db      	lsls	r3, r3, #3
 80045f6:	4925      	ldr	r1, [pc, #148]	; (800468c <HAL_RCC_OscConfig+0x240>)
 80045f8:	4313      	orrs	r3, r2
 80045fa:	600b      	str	r3, [r1, #0]
 80045fc:	e015      	b.n	800462a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045fe:	4b24      	ldr	r3, [pc, #144]	; (8004690 <HAL_RCC_OscConfig+0x244>)
 8004600:	2200      	movs	r2, #0
 8004602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004604:	f7fc ffc8 	bl	8001598 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800460c:	f7fc ffc4 	bl	8001598 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b02      	cmp	r3, #2
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e187      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800461e:	4b1b      	ldr	r3, [pc, #108]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1f0      	bne.n	800460c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 0308 	and.w	r3, r3, #8
 8004632:	2b00      	cmp	r3, #0
 8004634:	d036      	beq.n	80046a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d016      	beq.n	800466c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800463e:	4b15      	ldr	r3, [pc, #84]	; (8004694 <HAL_RCC_OscConfig+0x248>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004644:	f7fc ffa8 	bl	8001598 <HAL_GetTick>
 8004648:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800464a:	e008      	b.n	800465e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800464c:	f7fc ffa4 	bl	8001598 <HAL_GetTick>
 8004650:	4602      	mov	r2, r0
 8004652:	693b      	ldr	r3, [r7, #16]
 8004654:	1ad3      	subs	r3, r2, r3
 8004656:	2b02      	cmp	r3, #2
 8004658:	d901      	bls.n	800465e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e167      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800465e:	4b0b      	ldr	r3, [pc, #44]	; (800468c <HAL_RCC_OscConfig+0x240>)
 8004660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d0f0      	beq.n	800464c <HAL_RCC_OscConfig+0x200>
 800466a:	e01b      	b.n	80046a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <HAL_RCC_OscConfig+0x248>)
 800466e:	2200      	movs	r2, #0
 8004670:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004672:	f7fc ff91 	bl	8001598 <HAL_GetTick>
 8004676:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004678:	e00e      	b.n	8004698 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800467a:	f7fc ff8d 	bl	8001598 <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b02      	cmp	r3, #2
 8004686:	d907      	bls.n	8004698 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004688:	2303      	movs	r3, #3
 800468a:	e150      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
 800468c:	40023800 	.word	0x40023800
 8004690:	42470000 	.word	0x42470000
 8004694:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004698:	4b88      	ldr	r3, [pc, #544]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800469a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800469c:	f003 0302 	and.w	r3, r3, #2
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d1ea      	bne.n	800467a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0304 	and.w	r3, r3, #4
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	f000 8097 	beq.w	80047e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046b2:	2300      	movs	r3, #0
 80046b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046b6:	4b81      	ldr	r3, [pc, #516]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80046b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10f      	bne.n	80046e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80046c2:	2300      	movs	r3, #0
 80046c4:	60bb      	str	r3, [r7, #8]
 80046c6:	4b7d      	ldr	r3, [pc, #500]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	4a7c      	ldr	r2, [pc, #496]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80046cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80046d0:	6413      	str	r3, [r2, #64]	; 0x40
 80046d2:	4b7a      	ldr	r3, [pc, #488]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046da:	60bb      	str	r3, [r7, #8]
 80046dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046de:	2301      	movs	r3, #1
 80046e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046e2:	4b77      	ldr	r3, [pc, #476]	; (80048c0 <HAL_RCC_OscConfig+0x474>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d118      	bne.n	8004720 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ee:	4b74      	ldr	r3, [pc, #464]	; (80048c0 <HAL_RCC_OscConfig+0x474>)
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a73      	ldr	r2, [pc, #460]	; (80048c0 <HAL_RCC_OscConfig+0x474>)
 80046f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046fa:	f7fc ff4d 	bl	8001598 <HAL_GetTick>
 80046fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004700:	e008      	b.n	8004714 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004702:	f7fc ff49 	bl	8001598 <HAL_GetTick>
 8004706:	4602      	mov	r2, r0
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	1ad3      	subs	r3, r2, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d901      	bls.n	8004714 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e10c      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004714:	4b6a      	ldr	r3, [pc, #424]	; (80048c0 <HAL_RCC_OscConfig+0x474>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0f0      	beq.n	8004702 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	2b01      	cmp	r3, #1
 8004726:	d106      	bne.n	8004736 <HAL_RCC_OscConfig+0x2ea>
 8004728:	4b64      	ldr	r3, [pc, #400]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800472a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800472c:	4a63      	ldr	r2, [pc, #396]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800472e:	f043 0301 	orr.w	r3, r3, #1
 8004732:	6713      	str	r3, [r2, #112]	; 0x70
 8004734:	e01c      	b.n	8004770 <HAL_RCC_OscConfig+0x324>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	2b05      	cmp	r3, #5
 800473c:	d10c      	bne.n	8004758 <HAL_RCC_OscConfig+0x30c>
 800473e:	4b5f      	ldr	r3, [pc, #380]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004740:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004742:	4a5e      	ldr	r2, [pc, #376]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004744:	f043 0304 	orr.w	r3, r3, #4
 8004748:	6713      	str	r3, [r2, #112]	; 0x70
 800474a:	4b5c      	ldr	r3, [pc, #368]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800474c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800474e:	4a5b      	ldr	r2, [pc, #364]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004750:	f043 0301 	orr.w	r3, r3, #1
 8004754:	6713      	str	r3, [r2, #112]	; 0x70
 8004756:	e00b      	b.n	8004770 <HAL_RCC_OscConfig+0x324>
 8004758:	4b58      	ldr	r3, [pc, #352]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800475a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800475c:	4a57      	ldr	r2, [pc, #348]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800475e:	f023 0301 	bic.w	r3, r3, #1
 8004762:	6713      	str	r3, [r2, #112]	; 0x70
 8004764:	4b55      	ldr	r3, [pc, #340]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004768:	4a54      	ldr	r2, [pc, #336]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 800476a:	f023 0304 	bic.w	r3, r3, #4
 800476e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d015      	beq.n	80047a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004778:	f7fc ff0e 	bl	8001598 <HAL_GetTick>
 800477c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800477e:	e00a      	b.n	8004796 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004780:	f7fc ff0a 	bl	8001598 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	f241 3288 	movw	r2, #5000	; 0x1388
 800478e:	4293      	cmp	r3, r2
 8004790:	d901      	bls.n	8004796 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e0cb      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004796:	4b49      	ldr	r3, [pc, #292]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800479a:	f003 0302 	and.w	r3, r3, #2
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d0ee      	beq.n	8004780 <HAL_RCC_OscConfig+0x334>
 80047a2:	e014      	b.n	80047ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047a4:	f7fc fef8 	bl	8001598 <HAL_GetTick>
 80047a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047aa:	e00a      	b.n	80047c2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047ac:	f7fc fef4 	bl	8001598 <HAL_GetTick>
 80047b0:	4602      	mov	r2, r0
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	1ad3      	subs	r3, r2, r3
 80047b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e0b5      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80047c2:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80047c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1ee      	bne.n	80047ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047ce:	7dfb      	ldrb	r3, [r7, #23]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d105      	bne.n	80047e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047d4:	4b39      	ldr	r3, [pc, #228]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80047d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d8:	4a38      	ldr	r2, [pc, #224]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80047da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047de:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	699b      	ldr	r3, [r3, #24]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 80a1 	beq.w	800492c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80047ea:	4b34      	ldr	r3, [pc, #208]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 030c 	and.w	r3, r3, #12
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d05c      	beq.n	80048b0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d141      	bne.n	8004882 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047fe:	4b31      	ldr	r3, [pc, #196]	; (80048c4 <HAL_RCC_OscConfig+0x478>)
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004804:	f7fc fec8 	bl	8001598 <HAL_GetTick>
 8004808:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800480a:	e008      	b.n	800481e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800480c:	f7fc fec4 	bl	8001598 <HAL_GetTick>
 8004810:	4602      	mov	r2, r0
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	1ad3      	subs	r3, r2, r3
 8004816:	2b02      	cmp	r3, #2
 8004818:	d901      	bls.n	800481e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800481a:	2303      	movs	r3, #3
 800481c:	e087      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800481e:	4b27      	ldr	r3, [pc, #156]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d1f0      	bne.n	800480c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	69da      	ldr	r2, [r3, #28]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	019b      	lsls	r3, r3, #6
 800483a:	431a      	orrs	r2, r3
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004840:	085b      	lsrs	r3, r3, #1
 8004842:	3b01      	subs	r3, #1
 8004844:	041b      	lsls	r3, r3, #16
 8004846:	431a      	orrs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484c:	061b      	lsls	r3, r3, #24
 800484e:	491b      	ldr	r1, [pc, #108]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004850:	4313      	orrs	r3, r2
 8004852:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004854:	4b1b      	ldr	r3, [pc, #108]	; (80048c4 <HAL_RCC_OscConfig+0x478>)
 8004856:	2201      	movs	r2, #1
 8004858:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800485a:	f7fc fe9d 	bl	8001598 <HAL_GetTick>
 800485e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004860:	e008      	b.n	8004874 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004862:	f7fc fe99 	bl	8001598 <HAL_GetTick>
 8004866:	4602      	mov	r2, r0
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	1ad3      	subs	r3, r2, r3
 800486c:	2b02      	cmp	r3, #2
 800486e:	d901      	bls.n	8004874 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004870:	2303      	movs	r3, #3
 8004872:	e05c      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004874:	4b11      	ldr	r3, [pc, #68]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800487c:	2b00      	cmp	r3, #0
 800487e:	d0f0      	beq.n	8004862 <HAL_RCC_OscConfig+0x416>
 8004880:	e054      	b.n	800492c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004882:	4b10      	ldr	r3, [pc, #64]	; (80048c4 <HAL_RCC_OscConfig+0x478>)
 8004884:	2200      	movs	r2, #0
 8004886:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004888:	f7fc fe86 	bl	8001598 <HAL_GetTick>
 800488c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800488e:	e008      	b.n	80048a2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004890:	f7fc fe82 	bl	8001598 <HAL_GetTick>
 8004894:	4602      	mov	r2, r0
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	1ad3      	subs	r3, r2, r3
 800489a:	2b02      	cmp	r3, #2
 800489c:	d901      	bls.n	80048a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800489e:	2303      	movs	r3, #3
 80048a0:	e045      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048a2:	4b06      	ldr	r3, [pc, #24]	; (80048bc <HAL_RCC_OscConfig+0x470>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d1f0      	bne.n	8004890 <HAL_RCC_OscConfig+0x444>
 80048ae:	e03d      	b.n	800492c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d107      	bne.n	80048c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e038      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40007000 	.word	0x40007000
 80048c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80048c8:	4b1b      	ldr	r3, [pc, #108]	; (8004938 <HAL_RCC_OscConfig+0x4ec>)
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d028      	beq.n	8004928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80048e0:	429a      	cmp	r2, r3
 80048e2:	d121      	bne.n	8004928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d11a      	bne.n	8004928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80048f2:	68fa      	ldr	r2, [r7, #12]
 80048f4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80048fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004900:	4293      	cmp	r3, r2
 8004902:	d111      	bne.n	8004928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800490e:	085b      	lsrs	r3, r3, #1
 8004910:	3b01      	subs	r3, #1
 8004912:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004914:	429a      	cmp	r2, r3
 8004916:	d107      	bne.n	8004928 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004922:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004924:	429a      	cmp	r2, r3
 8004926:	d001      	beq.n	800492c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e000      	b.n	800492e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3718      	adds	r7, #24
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800

0800493c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b084      	sub	sp, #16
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d101      	bne.n	8004950 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800494c:	2301      	movs	r3, #1
 800494e:	e0cc      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004950:	4b68      	ldr	r3, [pc, #416]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 0307 	and.w	r3, r3, #7
 8004958:	683a      	ldr	r2, [r7, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d90c      	bls.n	8004978 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800495e:	4b65      	ldr	r3, [pc, #404]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004960:	683a      	ldr	r2, [r7, #0]
 8004962:	b2d2      	uxtb	r2, r2
 8004964:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004966:	4b63      	ldr	r3, [pc, #396]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0307 	and.w	r3, r3, #7
 800496e:	683a      	ldr	r2, [r7, #0]
 8004970:	429a      	cmp	r2, r3
 8004972:	d001      	beq.n	8004978 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	e0b8      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0302 	and.w	r3, r3, #2
 8004980:	2b00      	cmp	r3, #0
 8004982:	d020      	beq.n	80049c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004990:	4b59      	ldr	r3, [pc, #356]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004992:	689b      	ldr	r3, [r3, #8]
 8004994:	4a58      	ldr	r2, [pc, #352]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800499a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 0308 	and.w	r3, r3, #8
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d005      	beq.n	80049b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049a8:	4b53      	ldr	r3, [pc, #332]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	4a52      	ldr	r2, [pc, #328]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80049b4:	4b50      	ldr	r3, [pc, #320]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	494d      	ldr	r1, [pc, #308]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049c2:	4313      	orrs	r3, r2
 80049c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0301 	and.w	r3, r3, #1
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d044      	beq.n	8004a5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	685b      	ldr	r3, [r3, #4]
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d107      	bne.n	80049ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4b47      	ldr	r3, [pc, #284]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d119      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80049e6:	2301      	movs	r3, #1
 80049e8:	e07f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	2b02      	cmp	r3, #2
 80049f0:	d003      	beq.n	80049fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80049f6:	2b03      	cmp	r3, #3
 80049f8:	d107      	bne.n	8004a0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80049fa:	4b3f      	ldr	r3, [pc, #252]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d109      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e06f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a0a:	4b3b      	ldr	r3, [pc, #236]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f003 0302 	and.w	r3, r3, #2
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d101      	bne.n	8004a1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e067      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a1a:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	f023 0203 	bic.w	r2, r3, #3
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	4934      	ldr	r1, [pc, #208]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a2c:	f7fc fdb4 	bl	8001598 <HAL_GetTick>
 8004a30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a32:	e00a      	b.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a34:	f7fc fdb0 	bl	8001598 <HAL_GetTick>
 8004a38:	4602      	mov	r2, r0
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	1ad3      	subs	r3, r2, r3
 8004a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d901      	bls.n	8004a4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e04f      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a4a:	4b2b      	ldr	r3, [pc, #172]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a4c:	689b      	ldr	r3, [r3, #8]
 8004a4e:	f003 020c 	and.w	r2, r3, #12
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	429a      	cmp	r2, r3
 8004a5a:	d1eb      	bne.n	8004a34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004a5c:	4b25      	ldr	r3, [pc, #148]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f003 0307 	and.w	r3, r3, #7
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d20c      	bcs.n	8004a84 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a6a:	4b22      	ldr	r3, [pc, #136]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a72:	4b20      	ldr	r3, [pc, #128]	; (8004af4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0307 	and.w	r3, r3, #7
 8004a7a:	683a      	ldr	r2, [r7, #0]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	e032      	b.n	8004aea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d008      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004a90:	4b19      	ldr	r3, [pc, #100]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4916      	ldr	r1, [pc, #88]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0308 	and.w	r3, r3, #8
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d009      	beq.n	8004ac2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004aae:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	691b      	ldr	r3, [r3, #16]
 8004aba:	00db      	lsls	r3, r3, #3
 8004abc:	490e      	ldr	r1, [pc, #56]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004abe:	4313      	orrs	r3, r2
 8004ac0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ac2:	f000 f821 	bl	8004b08 <HAL_RCC_GetSysClockFreq>
 8004ac6:	4602      	mov	r2, r0
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	f003 030f 	and.w	r3, r3, #15
 8004ad2:	490a      	ldr	r1, [pc, #40]	; (8004afc <HAL_RCC_ClockConfig+0x1c0>)
 8004ad4:	5ccb      	ldrb	r3, [r1, r3]
 8004ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8004ada:	4a09      	ldr	r2, [pc, #36]	; (8004b00 <HAL_RCC_ClockConfig+0x1c4>)
 8004adc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004ade:	4b09      	ldr	r3, [pc, #36]	; (8004b04 <HAL_RCC_ClockConfig+0x1c8>)
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fc fd14 	bl	8001510 <HAL_InitTick>

  return HAL_OK;
 8004ae8:	2300      	movs	r3, #0
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3710      	adds	r7, #16
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40023c00 	.word	0x40023c00
 8004af8:	40023800 	.word	0x40023800
 8004afc:	08005ab8 	.word	0x08005ab8
 8004b00:	20000004 	.word	0x20000004
 8004b04:	20000008 	.word	0x20000008

08004b08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b0c:	b090      	sub	sp, #64	; 0x40
 8004b0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	637b      	str	r3, [r7, #52]	; 0x34
 8004b14:	2300      	movs	r3, #0
 8004b16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b18:	2300      	movs	r3, #0
 8004b1a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b20:	4b59      	ldr	r3, [pc, #356]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b22:	689b      	ldr	r3, [r3, #8]
 8004b24:	f003 030c 	and.w	r3, r3, #12
 8004b28:	2b08      	cmp	r3, #8
 8004b2a:	d00d      	beq.n	8004b48 <HAL_RCC_GetSysClockFreq+0x40>
 8004b2c:	2b08      	cmp	r3, #8
 8004b2e:	f200 80a1 	bhi.w	8004c74 <HAL_RCC_GetSysClockFreq+0x16c>
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d002      	beq.n	8004b3c <HAL_RCC_GetSysClockFreq+0x34>
 8004b36:	2b04      	cmp	r3, #4
 8004b38:	d003      	beq.n	8004b42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004b3a:	e09b      	b.n	8004c74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004b3c:	4b53      	ldr	r3, [pc, #332]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004b3e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004b40:	e09b      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004b42:	4b53      	ldr	r3, [pc, #332]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b44:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b46:	e098      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004b48:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004b52:	4b4d      	ldr	r3, [pc, #308]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d028      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b5e:	4b4a      	ldr	r3, [pc, #296]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b60:	685b      	ldr	r3, [r3, #4]
 8004b62:	099b      	lsrs	r3, r3, #6
 8004b64:	2200      	movs	r2, #0
 8004b66:	623b      	str	r3, [r7, #32]
 8004b68:	627a      	str	r2, [r7, #36]	; 0x24
 8004b6a:	6a3b      	ldr	r3, [r7, #32]
 8004b6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004b70:	2100      	movs	r1, #0
 8004b72:	4b47      	ldr	r3, [pc, #284]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b74:	fb03 f201 	mul.w	r2, r3, r1
 8004b78:	2300      	movs	r3, #0
 8004b7a:	fb00 f303 	mul.w	r3, r0, r3
 8004b7e:	4413      	add	r3, r2
 8004b80:	4a43      	ldr	r2, [pc, #268]	; (8004c90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004b82:	fba0 1202 	umull	r1, r2, r0, r2
 8004b86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004b88:	460a      	mov	r2, r1
 8004b8a:	62ba      	str	r2, [r7, #40]	; 0x28
 8004b8c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b8e:	4413      	add	r3, r2
 8004b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b94:	2200      	movs	r2, #0
 8004b96:	61bb      	str	r3, [r7, #24]
 8004b98:	61fa      	str	r2, [r7, #28]
 8004b9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004ba2:	f7fb fb11 	bl	80001c8 <__aeabi_uldivmod>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	4613      	mov	r3, r2
 8004bac:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bae:	e053      	b.n	8004c58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb0:	4b35      	ldr	r3, [pc, #212]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	099b      	lsrs	r3, r3, #6
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	613b      	str	r3, [r7, #16]
 8004bba:	617a      	str	r2, [r7, #20]
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004bc2:	f04f 0b00 	mov.w	fp, #0
 8004bc6:	4652      	mov	r2, sl
 8004bc8:	465b      	mov	r3, fp
 8004bca:	f04f 0000 	mov.w	r0, #0
 8004bce:	f04f 0100 	mov.w	r1, #0
 8004bd2:	0159      	lsls	r1, r3, #5
 8004bd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004bd8:	0150      	lsls	r0, r2, #5
 8004bda:	4602      	mov	r2, r0
 8004bdc:	460b      	mov	r3, r1
 8004bde:	ebb2 080a 	subs.w	r8, r2, sl
 8004be2:	eb63 090b 	sbc.w	r9, r3, fp
 8004be6:	f04f 0200 	mov.w	r2, #0
 8004bea:	f04f 0300 	mov.w	r3, #0
 8004bee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004bf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004bf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004bfa:	ebb2 0408 	subs.w	r4, r2, r8
 8004bfe:	eb63 0509 	sbc.w	r5, r3, r9
 8004c02:	f04f 0200 	mov.w	r2, #0
 8004c06:	f04f 0300 	mov.w	r3, #0
 8004c0a:	00eb      	lsls	r3, r5, #3
 8004c0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c10:	00e2      	lsls	r2, r4, #3
 8004c12:	4614      	mov	r4, r2
 8004c14:	461d      	mov	r5, r3
 8004c16:	eb14 030a 	adds.w	r3, r4, sl
 8004c1a:	603b      	str	r3, [r7, #0]
 8004c1c:	eb45 030b 	adc.w	r3, r5, fp
 8004c20:	607b      	str	r3, [r7, #4]
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c2e:	4629      	mov	r1, r5
 8004c30:	028b      	lsls	r3, r1, #10
 8004c32:	4621      	mov	r1, r4
 8004c34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004c38:	4621      	mov	r1, r4
 8004c3a:	028a      	lsls	r2, r1, #10
 8004c3c:	4610      	mov	r0, r2
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c42:	2200      	movs	r2, #0
 8004c44:	60bb      	str	r3, [r7, #8]
 8004c46:	60fa      	str	r2, [r7, #12]
 8004c48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c4c:	f7fb fabc 	bl	80001c8 <__aeabi_uldivmod>
 8004c50:	4602      	mov	r2, r0
 8004c52:	460b      	mov	r3, r1
 8004c54:	4613      	mov	r3, r2
 8004c56:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004c58:	4b0b      	ldr	r3, [pc, #44]	; (8004c88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c5a:	685b      	ldr	r3, [r3, #4]
 8004c5c:	0c1b      	lsrs	r3, r3, #16
 8004c5e:	f003 0303 	and.w	r3, r3, #3
 8004c62:	3301      	adds	r3, #1
 8004c64:	005b      	lsls	r3, r3, #1
 8004c66:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004c68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c70:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c72:	e002      	b.n	8004c7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004c74:	4b05      	ldr	r3, [pc, #20]	; (8004c8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c76:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3740      	adds	r7, #64	; 0x40
 8004c80:	46bd      	mov	sp, r7
 8004c82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	018cba80 	.word	0x018cba80

08004c94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c94:	b480      	push	{r7}
 8004c96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c98:	4b03      	ldr	r3, [pc, #12]	; (8004ca8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca4:	4770      	bx	lr
 8004ca6:	bf00      	nop
 8004ca8:	20000004 	.word	0x20000004

08004cac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004cb0:	f7ff fff0 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	4b05      	ldr	r3, [pc, #20]	; (8004ccc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	0a9b      	lsrs	r3, r3, #10
 8004cbc:	f003 0307 	and.w	r3, r3, #7
 8004cc0:	4903      	ldr	r1, [pc, #12]	; (8004cd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cc2:	5ccb      	ldrb	r3, [r1, r3]
 8004cc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	08005ac8 	.word	0x08005ac8

08004cd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004cd8:	f7ff ffdc 	bl	8004c94 <HAL_RCC_GetHCLKFreq>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	4b05      	ldr	r3, [pc, #20]	; (8004cf4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	0b5b      	lsrs	r3, r3, #13
 8004ce4:	f003 0307 	and.w	r3, r3, #7
 8004ce8:	4903      	ldr	r1, [pc, #12]	; (8004cf8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cea:	5ccb      	ldrb	r3, [r1, r3]
 8004cec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	bd80      	pop	{r7, pc}
 8004cf4:	40023800 	.word	0x40023800
 8004cf8:	08005ac8 	.word	0x08005ac8

08004cfc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d105      	bne.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d035      	beq.n	8004d90 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004d24:	4b62      	ldr	r3, [pc, #392]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d2a:	f7fc fc35 	bl	8001598 <HAL_GetTick>
 8004d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d30:	e008      	b.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d32:	f7fc fc31 	bl	8001598 <HAL_GetTick>
 8004d36:	4602      	mov	r2, r0
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	1ad3      	subs	r3, r2, r3
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	d901      	bls.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0b0      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004d44:	4b5b      	ldr	r3, [pc, #364]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d1f0      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	019a      	lsls	r2, r3, #6
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	689b      	ldr	r3, [r3, #8]
 8004d5a:	071b      	lsls	r3, r3, #28
 8004d5c:	4955      	ldr	r1, [pc, #340]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d64:	4b52      	ldr	r3, [pc, #328]	; (8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004d66:	2201      	movs	r2, #1
 8004d68:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004d6a:	f7fc fc15 	bl	8001598 <HAL_GetTick>
 8004d6e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d70:	e008      	b.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004d72:	f7fc fc11 	bl	8001598 <HAL_GetTick>
 8004d76:	4602      	mov	r2, r0
 8004d78:	697b      	ldr	r3, [r7, #20]
 8004d7a:	1ad3      	subs	r3, r2, r3
 8004d7c:	2b02      	cmp	r3, #2
 8004d7e:	d901      	bls.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d80:	2303      	movs	r3, #3
 8004d82:	e090      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d84:	4b4b      	ldr	r3, [pc, #300]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0f0      	beq.n	8004d72 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f003 0302 	and.w	r3, r3, #2
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	f000 8083 	beq.w	8004ea4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d9e:	2300      	movs	r3, #0
 8004da0:	60fb      	str	r3, [r7, #12]
 8004da2:	4b44      	ldr	r3, [pc, #272]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da6:	4a43      	ldr	r2, [pc, #268]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dac:	6413      	str	r3, [r2, #64]	; 0x40
 8004dae:	4b41      	ldr	r3, [pc, #260]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004dba:	4b3f      	ldr	r3, [pc, #252]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a3e      	ldr	r2, [pc, #248]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004dc6:	f7fc fbe7 	bl	8001598 <HAL_GetTick>
 8004dca:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004dcc:	e008      	b.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004dce:	f7fc fbe3 	bl	8001598 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	2b02      	cmp	r3, #2
 8004dda:	d901      	bls.n	8004de0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e062      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004de0:	4b35      	ldr	r3, [pc, #212]	; (8004eb8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d0f0      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004dec:	4b31      	ldr	r3, [pc, #196]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004df4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d02f      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d028      	beq.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004e0a:	4b2a      	ldr	r3, [pc, #168]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e12:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004e14:	4b29      	ldr	r3, [pc, #164]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e16:	2201      	movs	r2, #1
 8004e18:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004e1a:	4b28      	ldr	r3, [pc, #160]	; (8004ebc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004e20:	4a24      	ldr	r2, [pc, #144]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004e26:	4b23      	ldr	r3, [pc, #140]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d114      	bne.n	8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fc fbb1 	bl	8001598 <HAL_GetTick>
 8004e36:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e38:	e00a      	b.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e3a:	f7fc fbad 	bl	8001598 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e48:	4293      	cmp	r3, r2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e02a      	b.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e50:	4b18      	ldr	r3, [pc, #96]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0ee      	beq.n	8004e3a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e68:	d10d      	bne.n	8004e86 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004e6a:	4b12      	ldr	r3, [pc, #72]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e7e:	490d      	ldr	r1, [pc, #52]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e80:	4313      	orrs	r3, r2
 8004e82:	608b      	str	r3, [r1, #8]
 8004e84:	e005      	b.n	8004e92 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004e86:	4b0b      	ldr	r3, [pc, #44]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	4a0a      	ldr	r2, [pc, #40]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e90:	6093      	str	r3, [r2, #8]
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e94:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e9e:	4905      	ldr	r1, [pc, #20]	; (8004eb4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	42470068 	.word	0x42470068
 8004eb4:	40023800 	.word	0x40023800
 8004eb8:	40007000 	.word	0x40007000
 8004ebc:	42470e40 	.word	0x42470e40

08004ec0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b087      	sub	sp, #28
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d13e      	bne.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004ede:	4b23      	ldr	r3, [pc, #140]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d005      	beq.n	8004efa <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d12f      	bne.n	8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004ef4:	4b1e      	ldr	r3, [pc, #120]	; (8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004ef6:	617b      	str	r3, [r7, #20]
          break;
 8004ef8:	e02f      	b.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004efa:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f06:	d108      	bne.n	8004f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f08:	4b18      	ldr	r3, [pc, #96]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f10:	4a18      	ldr	r2, [pc, #96]	; (8004f74 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	613b      	str	r3, [r7, #16]
 8004f18:	e007      	b.n	8004f2a <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004f1a:	4b14      	ldr	r3, [pc, #80]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f28:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f30:	099b      	lsrs	r3, r3, #6
 8004f32:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	fb02 f303 	mul.w	r3, r2, r3
 8004f3c:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004f40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f44:	0f1b      	lsrs	r3, r3, #28
 8004f46:	f003 0307 	and.w	r3, r3, #7
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f50:	617b      	str	r3, [r7, #20]
          break;
 8004f52:	e002      	b.n	8004f5a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004f54:	2300      	movs	r3, #0
 8004f56:	617b      	str	r3, [r7, #20]
          break;
 8004f58:	bf00      	nop
        }
      }
      break;
 8004f5a:	bf00      	nop
    }
  }
  return frequency;
 8004f5c:	697b      	ldr	r3, [r7, #20]
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	371c      	adds	r7, #28
 8004f62:	46bd      	mov	sp, r7
 8004f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f68:	4770      	bx	lr
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	00bb8000 	.word	0x00bb8000
 8004f74:	018cba80 	.word	0x018cba80
 8004f78:	00f42400 	.word	0x00f42400

08004f7c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d101      	bne.n	8004f8e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e041      	b.n	8005012 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f94:	b2db      	uxtb	r3, r3
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d106      	bne.n	8004fa8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f7fc f99e 	bl	80012e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2202      	movs	r2, #2
 8004fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	3304      	adds	r3, #4
 8004fb8:	4619      	mov	r1, r3
 8004fba:	4610      	mov	r0, r2
 8004fbc:	f000 f9ce 	bl	800535c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2201      	movs	r2, #1
 8004fd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2201      	movs	r2, #1
 8004fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2201      	movs	r2, #1
 8004ffc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}
	...

0800501c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800501c:	b480      	push	{r7}
 800501e:	b085      	sub	sp, #20
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800502a:	b2db      	uxtb	r3, r3
 800502c:	2b01      	cmp	r3, #1
 800502e:	d001      	beq.n	8005034 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	e04e      	b.n	80050d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2202      	movs	r2, #2
 8005038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	68da      	ldr	r2, [r3, #12]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f042 0201 	orr.w	r2, r2, #1
 800504a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a23      	ldr	r2, [pc, #140]	; (80050e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d022      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505e:	d01d      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a1f      	ldr	r2, [pc, #124]	; (80050e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d018      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a1e      	ldr	r2, [pc, #120]	; (80050e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d013      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a1c      	ldr	r2, [pc, #112]	; (80050ec <HAL_TIM_Base_Start_IT+0xd0>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d00e      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a1b      	ldr	r2, [pc, #108]	; (80050f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d009      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a19      	ldr	r2, [pc, #100]	; (80050f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d004      	beq.n	800509c <HAL_TIM_Base_Start_IT+0x80>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a18      	ldr	r2, [pc, #96]	; (80050f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d111      	bne.n	80050c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	2b06      	cmp	r3, #6
 80050ac:	d010      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	681a      	ldr	r2, [r3, #0]
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f042 0201 	orr.w	r2, r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050be:	e007      	b.n	80050d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	3714      	adds	r7, #20
 80050d6:	46bd      	mov	sp, r7
 80050d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050dc:	4770      	bx	lr
 80050de:	bf00      	nop
 80050e0:	40010000 	.word	0x40010000
 80050e4:	40000400 	.word	0x40000400
 80050e8:	40000800 	.word	0x40000800
 80050ec:	40000c00 	.word	0x40000c00
 80050f0:	40010400 	.word	0x40010400
 80050f4:	40014000 	.word	0x40014000
 80050f8:	40001800 	.word	0x40001800

080050fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	691b      	ldr	r3, [r3, #16]
 800510a:	f003 0302 	and.w	r3, r3, #2
 800510e:	2b02      	cmp	r3, #2
 8005110:	d122      	bne.n	8005158 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	f003 0302 	and.w	r3, r3, #2
 800511c:	2b02      	cmp	r3, #2
 800511e:	d11b      	bne.n	8005158 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f06f 0202 	mvn.w	r2, #2
 8005128:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2201      	movs	r2, #1
 800512e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	699b      	ldr	r3, [r3, #24]
 8005136:	f003 0303 	and.w	r3, r3, #3
 800513a:	2b00      	cmp	r3, #0
 800513c:	d003      	beq.n	8005146 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800513e:	6878      	ldr	r0, [r7, #4]
 8005140:	f000 f8ee 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8005144:	e005      	b.n	8005152 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f000 f8e0 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800514c:	6878      	ldr	r0, [r7, #4]
 800514e:	f000 f8f1 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0304 	and.w	r3, r3, #4
 8005162:	2b04      	cmp	r3, #4
 8005164:	d122      	bne.n	80051ac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0304 	and.w	r3, r3, #4
 8005170:	2b04      	cmp	r3, #4
 8005172:	d11b      	bne.n	80051ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0204 	mvn.w	r2, #4
 800517c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2202      	movs	r2, #2
 8005182:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	699b      	ldr	r3, [r3, #24]
 800518a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800518e:	2b00      	cmp	r3, #0
 8005190:	d003      	beq.n	800519a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	f000 f8c4 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8005198:	e005      	b.n	80051a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f8b6 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f000 f8c7 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0308 	and.w	r3, r3, #8
 80051b6:	2b08      	cmp	r3, #8
 80051b8:	d122      	bne.n	8005200 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0308 	and.w	r3, r3, #8
 80051c4:	2b08      	cmp	r3, #8
 80051c6:	d11b      	bne.n	8005200 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0208 	mvn.w	r2, #8
 80051d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2204      	movs	r2, #4
 80051d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	f003 0303 	and.w	r3, r3, #3
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d003      	beq.n	80051ee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f89a 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 80051ec:	e005      	b.n	80051fa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f000 f88c 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f000 f89d 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	691b      	ldr	r3, [r3, #16]
 8005206:	f003 0310 	and.w	r3, r3, #16
 800520a:	2b10      	cmp	r3, #16
 800520c:	d122      	bne.n	8005254 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b10      	cmp	r3, #16
 800521a:	d11b      	bne.n	8005254 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	f06f 0210 	mvn.w	r2, #16
 8005224:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2208      	movs	r2, #8
 800522a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005236:	2b00      	cmp	r3, #0
 8005238:	d003      	beq.n	8005242 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f000 f870 	bl	8005320 <HAL_TIM_IC_CaptureCallback>
 8005240:	e005      	b.n	800524e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f862 	bl	800530c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f000 f873 	bl	8005334 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b01      	cmp	r3, #1
 8005260:	d10e      	bne.n	8005280 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b01      	cmp	r3, #1
 800526e:	d107      	bne.n	8005280 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0201 	mvn.w	r2, #1
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fb fe16 	bl	8000eac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	691b      	ldr	r3, [r3, #16]
 8005286:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800528a:	2b80      	cmp	r3, #128	; 0x80
 800528c:	d10e      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005298:	2b80      	cmp	r3, #128	; 0x80
 800529a:	d107      	bne.n	80052ac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80052a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f902 	bl	80054b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b6:	2b40      	cmp	r3, #64	; 0x40
 80052b8:	d10e      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d107      	bne.n	80052d8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 f838 	bl	8005348 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	f003 0320 	and.w	r3, r3, #32
 80052e2:	2b20      	cmp	r3, #32
 80052e4:	d10e      	bne.n	8005304 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d107      	bne.n	8005304 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f06f 0220 	mvn.w	r2, #32
 80052fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f8cc 	bl	800549c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005304:	bf00      	nop
 8005306:	3708      	adds	r7, #8
 8005308:	46bd      	mov	sp, r7
 800530a:	bd80      	pop	{r7, pc}

0800530c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005350:	bf00      	nop
 8005352:	370c      	adds	r7, #12
 8005354:	46bd      	mov	sp, r7
 8005356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800535a:	4770      	bx	lr

0800535c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800535c:	b480      	push	{r7}
 800535e:	b085      	sub	sp, #20
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
 8005364:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	4a40      	ldr	r2, [pc, #256]	; (8005470 <TIM_Base_SetConfig+0x114>)
 8005370:	4293      	cmp	r3, r2
 8005372:	d013      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800537a:	d00f      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	4a3d      	ldr	r2, [pc, #244]	; (8005474 <TIM_Base_SetConfig+0x118>)
 8005380:	4293      	cmp	r3, r2
 8005382:	d00b      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a3c      	ldr	r2, [pc, #240]	; (8005478 <TIM_Base_SetConfig+0x11c>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d007      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a3b      	ldr	r2, [pc, #236]	; (800547c <TIM_Base_SetConfig+0x120>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d003      	beq.n	800539c <TIM_Base_SetConfig+0x40>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a3a      	ldr	r2, [pc, #232]	; (8005480 <TIM_Base_SetConfig+0x124>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d108      	bne.n	80053ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	685b      	ldr	r3, [r3, #4]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a2f      	ldr	r2, [pc, #188]	; (8005470 <TIM_Base_SetConfig+0x114>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d02b      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053bc:	d027      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a2c      	ldr	r2, [pc, #176]	; (8005474 <TIM_Base_SetConfig+0x118>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d023      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	; (8005478 <TIM_Base_SetConfig+0x11c>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d01f      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4a2a      	ldr	r2, [pc, #168]	; (800547c <TIM_Base_SetConfig+0x120>)
 80053d2:	4293      	cmp	r3, r2
 80053d4:	d01b      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4a29      	ldr	r2, [pc, #164]	; (8005480 <TIM_Base_SetConfig+0x124>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d017      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	4a28      	ldr	r2, [pc, #160]	; (8005484 <TIM_Base_SetConfig+0x128>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d013      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	4a27      	ldr	r2, [pc, #156]	; (8005488 <TIM_Base_SetConfig+0x12c>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d00f      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a26      	ldr	r2, [pc, #152]	; (800548c <TIM_Base_SetConfig+0x130>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d00b      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a25      	ldr	r2, [pc, #148]	; (8005490 <TIM_Base_SetConfig+0x134>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d007      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a24      	ldr	r2, [pc, #144]	; (8005494 <TIM_Base_SetConfig+0x138>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d003      	beq.n	800540e <TIM_Base_SetConfig+0xb2>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	4a23      	ldr	r2, [pc, #140]	; (8005498 <TIM_Base_SetConfig+0x13c>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d108      	bne.n	8005420 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005414:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
 800541a:	68fa      	ldr	r2, [r7, #12]
 800541c:	4313      	orrs	r3, r2
 800541e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	4313      	orrs	r3, r2
 800542c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689a      	ldr	r2, [r3, #8]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	4a0a      	ldr	r2, [pc, #40]	; (8005470 <TIM_Base_SetConfig+0x114>)
 8005448:	4293      	cmp	r3, r2
 800544a:	d003      	beq.n	8005454 <TIM_Base_SetConfig+0xf8>
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	4a0c      	ldr	r2, [pc, #48]	; (8005480 <TIM_Base_SetConfig+0x124>)
 8005450:	4293      	cmp	r3, r2
 8005452:	d103      	bne.n	800545c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2201      	movs	r2, #1
 8005460:	615a      	str	r2, [r3, #20]
}
 8005462:	bf00      	nop
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	40010000 	.word	0x40010000
 8005474:	40000400 	.word	0x40000400
 8005478:	40000800 	.word	0x40000800
 800547c:	40000c00 	.word	0x40000c00
 8005480:	40010400 	.word	0x40010400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800
 8005490:	40001800 	.word	0x40001800
 8005494:	40001c00 	.word	0x40001c00
 8005498:	40002000 	.word	0x40002000

0800549c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800549c:	b480      	push	{r7}
 800549e:	b083      	sub	sp, #12
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80054a4:	bf00      	nop
 80054a6:	370c      	adds	r7, #12
 80054a8:	46bd      	mov	sp, r7
 80054aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ae:	4770      	bx	lr

080054b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80054b0:	b480      	push	{r7}
 80054b2:	b083      	sub	sp, #12
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80054b8:	bf00      	nop
 80054ba:	370c      	adds	r7, #12
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b082      	sub	sp, #8
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d101      	bne.n	80054d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	e03f      	b.n	8005556 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d106      	bne.n	80054f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2200      	movs	r2, #0
 80054e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054ea:	6878      	ldr	r0, [r7, #4]
 80054ec:	f7fb ff22 	bl	8001334 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2224      	movs	r2, #36	; 0x24
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005506:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f829 	bl	8005560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800551c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	695a      	ldr	r2, [r3, #20]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800552c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68da      	ldr	r2, [r3, #12]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800553c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2200      	movs	r2, #0
 8005542:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2220      	movs	r2, #32
 8005548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2220      	movs	r2, #32
 8005550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005554:	2300      	movs	r3, #0
}
 8005556:	4618      	mov	r0, r3
 8005558:	3708      	adds	r7, #8
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}
	...

08005560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005564:	b0c0      	sub	sp, #256	; 0x100
 8005566:	af00      	add	r7, sp, #0
 8005568:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800557c:	68d9      	ldr	r1, [r3, #12]
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	ea40 0301 	orr.w	r3, r0, r1
 8005588:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800558a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800558e:	689a      	ldr	r2, [r3, #8]
 8005590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	431a      	orrs	r2, r3
 8005598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800559c:	695b      	ldr	r3, [r3, #20]
 800559e:	431a      	orrs	r2, r3
 80055a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055a4:	69db      	ldr	r3, [r3, #28]
 80055a6:	4313      	orrs	r3, r2
 80055a8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80055ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80055b8:	f021 010c 	bic.w	r1, r1, #12
 80055bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c0:	681a      	ldr	r2, [r3, #0]
 80055c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80055c6:	430b      	orrs	r3, r1
 80055c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80055ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695b      	ldr	r3, [r3, #20]
 80055d2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80055d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055da:	6999      	ldr	r1, [r3, #24]
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	681a      	ldr	r2, [r3, #0]
 80055e2:	ea40 0301 	orr.w	r3, r0, r1
 80055e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80055e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	4b8f      	ldr	r3, [pc, #572]	; (800582c <UART_SetConfig+0x2cc>)
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d005      	beq.n	8005600 <UART_SetConfig+0xa0>
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	4b8d      	ldr	r3, [pc, #564]	; (8005830 <UART_SetConfig+0x2d0>)
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d104      	bne.n	800560a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005600:	f7ff fb68 	bl	8004cd4 <HAL_RCC_GetPCLK2Freq>
 8005604:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005608:	e003      	b.n	8005612 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800560a:	f7ff fb4f 	bl	8004cac <HAL_RCC_GetPCLK1Freq>
 800560e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005612:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005616:	69db      	ldr	r3, [r3, #28]
 8005618:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800561c:	f040 810c 	bne.w	8005838 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005620:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005624:	2200      	movs	r2, #0
 8005626:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800562a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800562e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005632:	4622      	mov	r2, r4
 8005634:	462b      	mov	r3, r5
 8005636:	1891      	adds	r1, r2, r2
 8005638:	65b9      	str	r1, [r7, #88]	; 0x58
 800563a:	415b      	adcs	r3, r3
 800563c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800563e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005642:	4621      	mov	r1, r4
 8005644:	eb12 0801 	adds.w	r8, r2, r1
 8005648:	4629      	mov	r1, r5
 800564a:	eb43 0901 	adc.w	r9, r3, r1
 800564e:	f04f 0200 	mov.w	r2, #0
 8005652:	f04f 0300 	mov.w	r3, #0
 8005656:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800565a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800565e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005662:	4690      	mov	r8, r2
 8005664:	4699      	mov	r9, r3
 8005666:	4623      	mov	r3, r4
 8005668:	eb18 0303 	adds.w	r3, r8, r3
 800566c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005670:	462b      	mov	r3, r5
 8005672:	eb49 0303 	adc.w	r3, r9, r3
 8005676:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800567a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	2200      	movs	r2, #0
 8005682:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005686:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800568a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800568e:	460b      	mov	r3, r1
 8005690:	18db      	adds	r3, r3, r3
 8005692:	653b      	str	r3, [r7, #80]	; 0x50
 8005694:	4613      	mov	r3, r2
 8005696:	eb42 0303 	adc.w	r3, r2, r3
 800569a:	657b      	str	r3, [r7, #84]	; 0x54
 800569c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80056a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80056a4:	f7fa fd90 	bl	80001c8 <__aeabi_uldivmod>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4b61      	ldr	r3, [pc, #388]	; (8005834 <UART_SetConfig+0x2d4>)
 80056ae:	fba3 2302 	umull	r2, r3, r3, r2
 80056b2:	095b      	lsrs	r3, r3, #5
 80056b4:	011c      	lsls	r4, r3, #4
 80056b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056ba:	2200      	movs	r2, #0
 80056bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80056c0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80056c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	1891      	adds	r1, r2, r2
 80056ce:	64b9      	str	r1, [r7, #72]	; 0x48
 80056d0:	415b      	adcs	r3, r3
 80056d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80056d8:	4641      	mov	r1, r8
 80056da:	eb12 0a01 	adds.w	sl, r2, r1
 80056de:	4649      	mov	r1, r9
 80056e0:	eb43 0b01 	adc.w	fp, r3, r1
 80056e4:	f04f 0200 	mov.w	r2, #0
 80056e8:	f04f 0300 	mov.w	r3, #0
 80056ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80056f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80056f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80056f8:	4692      	mov	sl, r2
 80056fa:	469b      	mov	fp, r3
 80056fc:	4643      	mov	r3, r8
 80056fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005702:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005706:	464b      	mov	r3, r9
 8005708:	eb4b 0303 	adc.w	r3, fp, r3
 800570c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2200      	movs	r2, #0
 8005718:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800571c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005720:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005724:	460b      	mov	r3, r1
 8005726:	18db      	adds	r3, r3, r3
 8005728:	643b      	str	r3, [r7, #64]	; 0x40
 800572a:	4613      	mov	r3, r2
 800572c:	eb42 0303 	adc.w	r3, r2, r3
 8005730:	647b      	str	r3, [r7, #68]	; 0x44
 8005732:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005736:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800573a:	f7fa fd45 	bl	80001c8 <__aeabi_uldivmod>
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	4611      	mov	r1, r2
 8005744:	4b3b      	ldr	r3, [pc, #236]	; (8005834 <UART_SetConfig+0x2d4>)
 8005746:	fba3 2301 	umull	r2, r3, r3, r1
 800574a:	095b      	lsrs	r3, r3, #5
 800574c:	2264      	movs	r2, #100	; 0x64
 800574e:	fb02 f303 	mul.w	r3, r2, r3
 8005752:	1acb      	subs	r3, r1, r3
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800575a:	4b36      	ldr	r3, [pc, #216]	; (8005834 <UART_SetConfig+0x2d4>)
 800575c:	fba3 2302 	umull	r2, r3, r3, r2
 8005760:	095b      	lsrs	r3, r3, #5
 8005762:	005b      	lsls	r3, r3, #1
 8005764:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005768:	441c      	add	r4, r3
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005774:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005778:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	1891      	adds	r1, r2, r2
 8005782:	63b9      	str	r1, [r7, #56]	; 0x38
 8005784:	415b      	adcs	r3, r3
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005788:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800578c:	4641      	mov	r1, r8
 800578e:	1851      	adds	r1, r2, r1
 8005790:	6339      	str	r1, [r7, #48]	; 0x30
 8005792:	4649      	mov	r1, r9
 8005794:	414b      	adcs	r3, r1
 8005796:	637b      	str	r3, [r7, #52]	; 0x34
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80057a4:	4659      	mov	r1, fp
 80057a6:	00cb      	lsls	r3, r1, #3
 80057a8:	4651      	mov	r1, sl
 80057aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057ae:	4651      	mov	r1, sl
 80057b0:	00ca      	lsls	r2, r1, #3
 80057b2:	4610      	mov	r0, r2
 80057b4:	4619      	mov	r1, r3
 80057b6:	4603      	mov	r3, r0
 80057b8:	4642      	mov	r2, r8
 80057ba:	189b      	adds	r3, r3, r2
 80057bc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80057c0:	464b      	mov	r3, r9
 80057c2:	460a      	mov	r2, r1
 80057c4:	eb42 0303 	adc.w	r3, r2, r3
 80057c8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80057cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80057d8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80057dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80057e0:	460b      	mov	r3, r1
 80057e2:	18db      	adds	r3, r3, r3
 80057e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80057e6:	4613      	mov	r3, r2
 80057e8:	eb42 0303 	adc.w	r3, r2, r3
 80057ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80057ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80057f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80057f6:	f7fa fce7 	bl	80001c8 <__aeabi_uldivmod>
 80057fa:	4602      	mov	r2, r0
 80057fc:	460b      	mov	r3, r1
 80057fe:	4b0d      	ldr	r3, [pc, #52]	; (8005834 <UART_SetConfig+0x2d4>)
 8005800:	fba3 1302 	umull	r1, r3, r3, r2
 8005804:	095b      	lsrs	r3, r3, #5
 8005806:	2164      	movs	r1, #100	; 0x64
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	00db      	lsls	r3, r3, #3
 8005810:	3332      	adds	r3, #50	; 0x32
 8005812:	4a08      	ldr	r2, [pc, #32]	; (8005834 <UART_SetConfig+0x2d4>)
 8005814:	fba2 2303 	umull	r2, r3, r2, r3
 8005818:	095b      	lsrs	r3, r3, #5
 800581a:	f003 0207 	and.w	r2, r3, #7
 800581e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4422      	add	r2, r4
 8005826:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005828:	e106      	b.n	8005a38 <UART_SetConfig+0x4d8>
 800582a:	bf00      	nop
 800582c:	40011000 	.word	0x40011000
 8005830:	40011400 	.word	0x40011400
 8005834:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005838:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800583c:	2200      	movs	r2, #0
 800583e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005842:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005846:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800584a:	4642      	mov	r2, r8
 800584c:	464b      	mov	r3, r9
 800584e:	1891      	adds	r1, r2, r2
 8005850:	6239      	str	r1, [r7, #32]
 8005852:	415b      	adcs	r3, r3
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
 8005856:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800585a:	4641      	mov	r1, r8
 800585c:	1854      	adds	r4, r2, r1
 800585e:	4649      	mov	r1, r9
 8005860:	eb43 0501 	adc.w	r5, r3, r1
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	00eb      	lsls	r3, r5, #3
 800586e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005872:	00e2      	lsls	r2, r4, #3
 8005874:	4614      	mov	r4, r2
 8005876:	461d      	mov	r5, r3
 8005878:	4643      	mov	r3, r8
 800587a:	18e3      	adds	r3, r4, r3
 800587c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005880:	464b      	mov	r3, r9
 8005882:	eb45 0303 	adc.w	r3, r5, r3
 8005886:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800588a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005896:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800589a:	f04f 0200 	mov.w	r2, #0
 800589e:	f04f 0300 	mov.w	r3, #0
 80058a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80058a6:	4629      	mov	r1, r5
 80058a8:	008b      	lsls	r3, r1, #2
 80058aa:	4621      	mov	r1, r4
 80058ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058b0:	4621      	mov	r1, r4
 80058b2:	008a      	lsls	r2, r1, #2
 80058b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80058b8:	f7fa fc86 	bl	80001c8 <__aeabi_uldivmod>
 80058bc:	4602      	mov	r2, r0
 80058be:	460b      	mov	r3, r1
 80058c0:	4b60      	ldr	r3, [pc, #384]	; (8005a44 <UART_SetConfig+0x4e4>)
 80058c2:	fba3 2302 	umull	r2, r3, r3, r2
 80058c6:	095b      	lsrs	r3, r3, #5
 80058c8:	011c      	lsls	r4, r3, #4
 80058ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058ce:	2200      	movs	r2, #0
 80058d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80058d4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80058d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80058dc:	4642      	mov	r2, r8
 80058de:	464b      	mov	r3, r9
 80058e0:	1891      	adds	r1, r2, r2
 80058e2:	61b9      	str	r1, [r7, #24]
 80058e4:	415b      	adcs	r3, r3
 80058e6:	61fb      	str	r3, [r7, #28]
 80058e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ec:	4641      	mov	r1, r8
 80058ee:	1851      	adds	r1, r2, r1
 80058f0:	6139      	str	r1, [r7, #16]
 80058f2:	4649      	mov	r1, r9
 80058f4:	414b      	adcs	r3, r1
 80058f6:	617b      	str	r3, [r7, #20]
 80058f8:	f04f 0200 	mov.w	r2, #0
 80058fc:	f04f 0300 	mov.w	r3, #0
 8005900:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005904:	4659      	mov	r1, fp
 8005906:	00cb      	lsls	r3, r1, #3
 8005908:	4651      	mov	r1, sl
 800590a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800590e:	4651      	mov	r1, sl
 8005910:	00ca      	lsls	r2, r1, #3
 8005912:	4610      	mov	r0, r2
 8005914:	4619      	mov	r1, r3
 8005916:	4603      	mov	r3, r0
 8005918:	4642      	mov	r2, r8
 800591a:	189b      	adds	r3, r3, r2
 800591c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005920:	464b      	mov	r3, r9
 8005922:	460a      	mov	r2, r1
 8005924:	eb42 0303 	adc.w	r3, r2, r3
 8005928:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800592c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	67bb      	str	r3, [r7, #120]	; 0x78
 8005936:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005938:	f04f 0200 	mov.w	r2, #0
 800593c:	f04f 0300 	mov.w	r3, #0
 8005940:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005944:	4649      	mov	r1, r9
 8005946:	008b      	lsls	r3, r1, #2
 8005948:	4641      	mov	r1, r8
 800594a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800594e:	4641      	mov	r1, r8
 8005950:	008a      	lsls	r2, r1, #2
 8005952:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005956:	f7fa fc37 	bl	80001c8 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4611      	mov	r1, r2
 8005960:	4b38      	ldr	r3, [pc, #224]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005962:	fba3 2301 	umull	r2, r3, r3, r1
 8005966:	095b      	lsrs	r3, r3, #5
 8005968:	2264      	movs	r2, #100	; 0x64
 800596a:	fb02 f303 	mul.w	r3, r2, r3
 800596e:	1acb      	subs	r3, r1, r3
 8005970:	011b      	lsls	r3, r3, #4
 8005972:	3332      	adds	r3, #50	; 0x32
 8005974:	4a33      	ldr	r2, [pc, #204]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005976:	fba2 2303 	umull	r2, r3, r2, r3
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005980:	441c      	add	r4, r3
 8005982:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005986:	2200      	movs	r2, #0
 8005988:	673b      	str	r3, [r7, #112]	; 0x70
 800598a:	677a      	str	r2, [r7, #116]	; 0x74
 800598c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	60b9      	str	r1, [r7, #8]
 8005998:	415b      	adcs	r3, r3
 800599a:	60fb      	str	r3, [r7, #12]
 800599c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80059a0:	4641      	mov	r1, r8
 80059a2:	1851      	adds	r1, r2, r1
 80059a4:	6039      	str	r1, [r7, #0]
 80059a6:	4649      	mov	r1, r9
 80059a8:	414b      	adcs	r3, r1
 80059aa:	607b      	str	r3, [r7, #4]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80059b8:	4659      	mov	r1, fp
 80059ba:	00cb      	lsls	r3, r1, #3
 80059bc:	4651      	mov	r1, sl
 80059be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c2:	4651      	mov	r1, sl
 80059c4:	00ca      	lsls	r2, r1, #3
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	4642      	mov	r2, r8
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	66bb      	str	r3, [r7, #104]	; 0x68
 80059d2:	464b      	mov	r3, r9
 80059d4:	460a      	mov	r2, r1
 80059d6:	eb42 0303 	adc.w	r3, r2, r3
 80059da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	663b      	str	r3, [r7, #96]	; 0x60
 80059e6:	667a      	str	r2, [r7, #100]	; 0x64
 80059e8:	f04f 0200 	mov.w	r2, #0
 80059ec:	f04f 0300 	mov.w	r3, #0
 80059f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80059f4:	4649      	mov	r1, r9
 80059f6:	008b      	lsls	r3, r1, #2
 80059f8:	4641      	mov	r1, r8
 80059fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059fe:	4641      	mov	r1, r8
 8005a00:	008a      	lsls	r2, r1, #2
 8005a02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a06:	f7fa fbdf 	bl	80001c8 <__aeabi_uldivmod>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	460b      	mov	r3, r1
 8005a0e:	4b0d      	ldr	r3, [pc, #52]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005a10:	fba3 1302 	umull	r1, r3, r3, r2
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	2164      	movs	r1, #100	; 0x64
 8005a18:	fb01 f303 	mul.w	r3, r1, r3
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	011b      	lsls	r3, r3, #4
 8005a20:	3332      	adds	r3, #50	; 0x32
 8005a22:	4a08      	ldr	r2, [pc, #32]	; (8005a44 <UART_SetConfig+0x4e4>)
 8005a24:	fba2 2303 	umull	r2, r3, r2, r3
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	f003 020f 	and.w	r2, r3, #15
 8005a2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4422      	add	r2, r4
 8005a36:	609a      	str	r2, [r3, #8]
}
 8005a38:	bf00      	nop
 8005a3a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a44:	51eb851f 	.word	0x51eb851f

08005a48 <memset>:
 8005a48:	4402      	add	r2, r0
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	4293      	cmp	r3, r2
 8005a4e:	d100      	bne.n	8005a52 <memset+0xa>
 8005a50:	4770      	bx	lr
 8005a52:	f803 1b01 	strb.w	r1, [r3], #1
 8005a56:	e7f9      	b.n	8005a4c <memset+0x4>

08005a58 <__libc_init_array>:
 8005a58:	b570      	push	{r4, r5, r6, lr}
 8005a5a:	4d0d      	ldr	r5, [pc, #52]	; (8005a90 <__libc_init_array+0x38>)
 8005a5c:	4c0d      	ldr	r4, [pc, #52]	; (8005a94 <__libc_init_array+0x3c>)
 8005a5e:	1b64      	subs	r4, r4, r5
 8005a60:	10a4      	asrs	r4, r4, #2
 8005a62:	2600      	movs	r6, #0
 8005a64:	42a6      	cmp	r6, r4
 8005a66:	d109      	bne.n	8005a7c <__libc_init_array+0x24>
 8005a68:	4d0b      	ldr	r5, [pc, #44]	; (8005a98 <__libc_init_array+0x40>)
 8005a6a:	4c0c      	ldr	r4, [pc, #48]	; (8005a9c <__libc_init_array+0x44>)
 8005a6c:	f000 f818 	bl	8005aa0 <_init>
 8005a70:	1b64      	subs	r4, r4, r5
 8005a72:	10a4      	asrs	r4, r4, #2
 8005a74:	2600      	movs	r6, #0
 8005a76:	42a6      	cmp	r6, r4
 8005a78:	d105      	bne.n	8005a86 <__libc_init_array+0x2e>
 8005a7a:	bd70      	pop	{r4, r5, r6, pc}
 8005a7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a80:	4798      	blx	r3
 8005a82:	3601      	adds	r6, #1
 8005a84:	e7ee      	b.n	8005a64 <__libc_init_array+0xc>
 8005a86:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a8a:	4798      	blx	r3
 8005a8c:	3601      	adds	r6, #1
 8005a8e:	e7f2      	b.n	8005a76 <__libc_init_array+0x1e>
 8005a90:	08005ae0 	.word	0x08005ae0
 8005a94:	08005ae0 	.word	0x08005ae0
 8005a98:	08005ae0 	.word	0x08005ae0
 8005a9c:	08005ae4 	.word	0x08005ae4

08005aa0 <_init>:
 8005aa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aa2:	bf00      	nop
 8005aa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aa6:	bc08      	pop	{r3}
 8005aa8:	469e      	mov	lr, r3
 8005aaa:	4770      	bx	lr

08005aac <_fini>:
 8005aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aae:	bf00      	nop
 8005ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005ab2:	bc08      	pop	{r3}
 8005ab4:	469e      	mov	lr, r3
 8005ab6:	4770      	bx	lr
