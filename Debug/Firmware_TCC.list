
Firmware_TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005a0c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005b94  08005b94  00015b94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005bb4  08005bb4  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08005bb4  08005bb4  00015bb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005bbc  08005bbc  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005bbc  08005bbc  00015bbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005bc0  08005bc0  00015bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005bc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020010  2**0
                  CONTENTS
 10 .bss          00000390  20000010  20000010  00020010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a0  200003a0  00020010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013623  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000029c3  00000000  00000000  000336a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001218  00000000  00000000  00036070  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e52  00000000  00000000  00037288  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000219cc  00000000  00000000  000380da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017632  00000000  00000000  00059aa6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d17a4  00000000  00000000  000710d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004d88  00000000  00000000  0014287c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007c  00000000  00000000  00147604  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b7c 	.word	0x08005b7c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	08005b7c 	.word	0x08005b7c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <codec_set_reg>:
 */

#include "codec.h"

HAL_StatusTypeDef codec_set_reg(I2C_HandleTypeDef *i2c_instance, unsigned char MemAddress, uint8_t *pdata, unsigned int size)
{
 80004c4:	b5b0      	push	{r4, r5, r7, lr}
 80004c6:	b08a      	sub	sp, #40	; 0x28
 80004c8:	af04      	add	r7, sp, #16
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	607a      	str	r2, [r7, #4]
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	460b      	mov	r3, r1
 80004d2:	72fb      	strb	r3, [r7, #11]
	uint64_t delayTosco = 0;
 80004d4:	f04f 0200 	mov.w	r2, #0
 80004d8:	f04f 0300 	mov.w	r3, #0
 80004dc:	e9c7 2304 	strd	r2, r3, [r7, #16]

	while(delayTosco++ < 500000)
 80004e0:	bf00      	nop
 80004e2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80004e6:	1c54      	adds	r4, r2, #1
 80004e8:	f143 0500 	adc.w	r5, r3, #0
 80004ec:	e9c7 4504 	strd	r4, r5, [r7, #16]
 80004f0:	490c      	ldr	r1, [pc, #48]	; (8000524 <codec_set_reg+0x60>)
 80004f2:	428a      	cmp	r2, r1
 80004f4:	f173 0300 	sbcs.w	r3, r3, #0
 80004f8:	d3f3      	bcc.n	80004e2 <codec_set_reg+0x1e>
	{

	}

	return HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 80004fa:	7afb      	ldrb	r3, [r7, #11]
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	683b      	ldr	r3, [r7, #0]
 8000500:	b29b      	uxth	r3, r3
 8000502:	f04f 31ff 	mov.w	r1, #4294967295
 8000506:	9102      	str	r1, [sp, #8]
 8000508:	9301      	str	r3, [sp, #4]
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	9300      	str	r3, [sp, #0]
 800050e:	2301      	movs	r3, #1
 8000510:	2136      	movs	r1, #54	; 0x36
 8000512:	68f8      	ldr	r0, [r7, #12]
 8000514:	f002 fab2 	bl	8002a7c <HAL_I2C_Mem_Write>
 8000518:	4603      	mov	r3, r0
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bdb0      	pop	{r4, r5, r7, pc}
 8000522:	bf00      	nop
 8000524:	0007a120 	.word	0x0007a120

08000528 <codec_read_reg>:
uint8_t *pData,
uint16_t Size,
uint32_t Timeout)*/

HAL_StatusTypeDef codec_read_reg(I2C_HandleTypeDef *i2c_instance, uint16_t MemAddress, uint8_t * pdata, uint16_t size)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b088      	sub	sp, #32
 800052c:	af04      	add	r7, sp, #16
 800052e:	60f8      	str	r0, [r7, #12]
 8000530:	607a      	str	r2, [r7, #4]
 8000532:	461a      	mov	r2, r3
 8000534:	460b      	mov	r3, r1
 8000536:	817b      	strh	r3, [r7, #10]
 8000538:	4613      	mov	r3, r2
 800053a:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, 2, dCODEC_HAL_MAX_DELAY);
 800053c:	897a      	ldrh	r2, [r7, #10]
 800053e:	f04f 33ff 	mov.w	r3, #4294967295
 8000542:	9302      	str	r3, [sp, #8]
 8000544:	2302      	movs	r3, #2
 8000546:	9301      	str	r3, [sp, #4]
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	9300      	str	r3, [sp, #0]
 800054c:	2301      	movs	r3, #1
 800054e:	2136      	movs	r1, #54	; 0x36
 8000550:	68f8      	ldr	r0, [r7, #12]
 8000552:	f002 fb8d 	bl	8002c70 <HAL_I2C_Mem_Read>
 8000556:	4603      	mov	r3, r0
}
 8000558:	4618      	mov	r0, r3
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}

08000560 <codec_init>:
	uint32_t Timeout)
*/


void codec_init(I2C_HandleTypeDef *i2c_instance)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
	aux[1] = ; // low byte data
	aux[0] = ; // high byte data
	result = codec_set_reg(i2c_instance, dREG_BLABLA, &aux[0], 2);
	*/

	aux[1] = 0x20;
 8000568:	2320      	movs	r3, #32
 800056a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 800056c:	2300      	movs	r3, #0
 800056e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_SW_RESET, &aux[0], 2);
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	2302      	movs	r3, #2
 8000576:	2100      	movs	r1, #0
 8000578:	6878      	ldr	r0, [r7, #4]
 800057a:	f7ff ffa3 	bl	80004c4 <codec_set_reg>
 800057e:	4603      	mov	r3, r0
 8000580:	73fb      	strb	r3, [r7, #15]


	aux[1] = 0b00001000;//0xC8;
 8000582:	2308      	movs	r3, #8
 8000584:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;//0xC8;
 8000586:	2308      	movs	r3, #8
 8000588:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOUT, &aux[0], 2);
 800058a:	f107 020c 	add.w	r2, r7, #12
 800058e:	2302      	movs	r3, #2
 8000590:	2102      	movs	r1, #2
 8000592:	6878      	ldr	r0, [r7, #4]
 8000594:	f7ff ff96 	bl	80004c4 <codec_set_reg>
 8000598:	4603      	mov	r3, r0
 800059a:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_HPOUT,databuffer, 2);
 800059c:	f107 0208 	add.w	r2, r7, #8
 80005a0:	2302      	movs	r3, #2
 80005a2:	2102      	movs	r1, #2
 80005a4:	6878      	ldr	r0, [r7, #4]
 80005a6:	f7ff ffbf 	bl	8000528 <codec_read_reg>
 80005aa:	4603      	mov	r3, r0
 80005ac:	73fb      	strb	r3, [r7, #15]
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_SW_RESET, I2C_MEMADD_SIZE_8BIT, &aux[0], 2, dCODEC_HAL_MAX_DELAY);
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_HPOUT, I2C_MEMADD_SIZE_8BIT, &aux[0], 2, dCODEC_HAL_MAX_DELAY);

	aux[1] = 0x00;       // low byte data
 80005ae:	2300      	movs	r3, #0
 80005b0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b01000000;//0b01000000; // high byte data
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HPOMIX_CTRL, &aux[0], 2);
 80005b6:	f107 020c 	add.w	r2, r7, #12
 80005ba:	2302      	movs	r3, #2
 80005bc:	2145      	movs	r1, #69	; 0x45
 80005be:	6878      	ldr	r0, [r7, #4]
 80005c0:	f7ff ff80 	bl	80004c4 <codec_set_reg>
 80005c4:	4603      	mov	r3, r0
 80005c6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;//00001000;
 80005c8:	2308      	movs	r3, #8
 80005ca:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;//00001000;
 80005cc:	2308      	movs	r3, #8
 80005ce:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT1, &aux[0], 2);
 80005d0:	f107 020c 	add.w	r2, r7, #12
 80005d4:	2302      	movs	r3, #2
 80005d6:	2103      	movs	r1, #3
 80005d8:	6878      	ldr	r0, [r7, #4]
 80005da:	f7ff ff73 	bl	80004c4 <codec_set_reg>
 80005de:	4603      	mov	r3, r0
 80005e0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80005e2:	2300      	movs	r3, #0
 80005e4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80005e6:	2300      	movs	r3, #0
 80005e8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT2, &aux[0], 2);
 80005ea:	f107 020c 	add.w	r2, r7, #12
 80005ee:	2302      	movs	r3, #2
 80005f0:	2105      	movs	r1, #5
 80005f2:	6878      	ldr	r0, [r7, #4]
 80005f4:	f7ff ff66 	bl	80004c4 <codec_set_reg>
 80005f8:	4603      	mov	r3, r0
 80005fa:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80005fc:	2300      	movs	r3, #0
 80005fe:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000600:	2300      	movs	r3, #0
 8000602:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_MIC_INPUT_MODE_GAIN, &aux[0], 2);
 8000604:	f107 020c 	add.w	r2, r7, #12
 8000608:	2302      	movs	r3, #2
 800060a:	210d      	movs	r1, #13
 800060c:	6878      	ldr	r0, [r7, #4]
 800060e:	f7ff ff59 	bl	80004c4 <codec_set_reg>
 8000612:	4603      	mov	r3, r0
 8000614:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00001000;
 8000616:	2308      	movs	r3, #8
 8000618:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00001000;
 800061a:	2308      	movs	r3, #8
 800061c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LINE_INPUT_MODE, &aux[0], 2);
 800061e:	f107 020c 	add.w	r2, r7, #12
 8000622:	2302      	movs	r3, #2
 8000624:	210f      	movs	r1, #15
 8000626:	6878      	ldr	r0, [r7, #4]
 8000628:	f7ff ff4c 	bl	80004c4 <codec_set_reg>
 800062c:	4603      	mov	r3, r0
 800062e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00100000;
 8000630:	2320      	movs	r3, #32
 8000632:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111000;
 8000634:	2338      	movs	r3, #56	; 0x38
 8000636:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_MIX_CONTROL, &aux[0], 2);
 8000638:	f107 020c 	add.w	r2, r7, #12
 800063c:	2302      	movs	r3, #2
 800063e:	2127      	movs	r1, #39	; 0x27
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	f7ff ff3f 	bl	80004c4 <codec_set_reg>
 8000646:	4603      	mov	r3, r0
 8000648:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_ADC_MIX_CONTROL,databuffer, 2);
 800064a:	f107 0208 	add.w	r2, r7, #8
 800064e:	2302      	movs	r3, #2
 8000650:	2127      	movs	r1, #39	; 0x27
 8000652:	6878      	ldr	r0, [r7, #4]
 8000654:	f7ff ff68 	bl	8000528 <codec_read_reg>
 8000658:	4603      	mov	r3, r0
 800065a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 800065c:	2300      	movs	r3, #0
 800065e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000660:	2300      	movs	r3, #0
 8000662:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL1, &aux[0], 2);
 8000664:	f107 020c 	add.w	r2, r7, #12
 8000668:	2302      	movs	r3, #2
 800066a:	213b      	movs	r1, #59	; 0x3b
 800066c:	6878      	ldr	r0, [r7, #4]
 800066e:	f7ff ff29 	bl	80004c4 <codec_set_reg>
 8000672:	4603      	mov	r3, r0
 8000674:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001111; 
 8000676:	234f      	movs	r3, #79	; 0x4f
 8000678:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 800067a:	2300      	movs	r3, #0
 800067c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXL_CTRL2, &aux[0], 2);
 800067e:	f107 020c 	add.w	r2, r7, #12
 8000682:	2302      	movs	r3, #2
 8000684:	213c      	movs	r1, #60	; 0x3c
 8000686:	6878      	ldr	r0, [r7, #4]
 8000688:	f7ff ff1c 	bl	80004c4 <codec_set_reg>
 800068c:	4603      	mov	r3, r0
 800068e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01001111; 
 8000690:	234f      	movs	r3, #79	; 0x4f
 8000692:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 8000694:	2300      	movs	r3, #0
 8000696:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL2, &aux[0], 2);
 8000698:	f107 020c 	add.w	r2, r7, #12
 800069c:	2302      	movs	r3, #2
 800069e:	213e      	movs	r1, #62	; 0x3e
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f7ff ff0f 	bl	80004c4 <codec_set_reg>
 80006a6:	4603      	mov	r3, r0
 80006a8:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80006aa:	2300      	movs	r3, #0
 80006ac:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80006ae:	2300      	movs	r3, #0
 80006b0:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_RECMIXR_CTRL1, &aux[0], 2);
 80006b2:	f107 020c 	add.w	r2, r7, #12
 80006b6:	2302      	movs	r3, #2
 80006b8:	213d      	movs	r1, #61	; 0x3d
 80006ba:	6878      	ldr	r0, [r7, #4]
 80006bc:	f7ff ff02 	bl	80004c4 <codec_set_reg>
 80006c0:	4603      	mov	r3, r0
 80006c2:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80006c4:	2300      	movs	r3, #0
 80006c6:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80006c8:	2300      	movs	r3, #0
 80006ca:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL1, &aux[0], 2);
 80006cc:	f107 020c 	add.w	r2, r7, #12
 80006d0:	2302      	movs	r3, #2
 80006d2:	214d      	movs	r1, #77	; 0x4d
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fef5 	bl	80004c4 <codec_set_reg>
 80006da:	4603      	mov	r3, r0
 80006dc:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 80006de:	2300      	movs	r3, #0
 80006e0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 80006e2:	2300      	movs	r3, #0
 80006e4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL2, &aux[0], 2);
 80006e6:	f107 020c 	add.w	r2, r7, #12
 80006ea:	2302      	movs	r3, #2
 80006ec:	214e      	movs	r1, #78	; 0x4e
 80006ee:	6878      	ldr	r0, [r7, #4]
 80006f0:	f7ff fee8 	bl	80004c4 <codec_set_reg>
 80006f4:	4603      	mov	r3, r0
 80006f6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111000;
 80006f8:	2378      	movs	r3, #120	; 0x78
 80006fa:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 80006fc:	2302      	movs	r3, #2
 80006fe:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXL_CTRL3, &aux[0], 2);
 8000700:	f107 020c 	add.w	r2, r7, #12
 8000704:	2302      	movs	r3, #2
 8000706:	214f      	movs	r1, #79	; 0x4f
 8000708:	6878      	ldr	r0, [r7, #4]
 800070a:	f7ff fedb 	bl	80004c4 <codec_set_reg>
 800070e:	4603      	mov	r3, r0
 8000710:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b01111000;
 8000712:	2378      	movs	r3, #120	; 0x78
 8000714:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000010;
 8000716:	2302      	movs	r3, #2
 8000718:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_OUTMIXR_CTRL3, &aux[0], 2);
 800071a:	f107 020c 	add.w	r2, r7, #12
 800071e:	2302      	movs	r3, #2
 8000720:	2152      	movs	r1, #82	; 0x52
 8000722:	6878      	ldr	r0, [r7, #4]
 8000724:	f7ff fece 	bl	80004c4 <codec_set_reg>
 8000728:	4603      	mov	r3, r0
 800072a:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;//00000000;
 800072c:	2300      	movs	r3, #0
 800072e:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11000000;//11000000;//00110000;
 8000730:	23c0      	movs	r3, #192	; 0xc0
 8000732:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_LOUTMIX_CTRL, &aux[0], 2);
 8000734:	f107 020c 	add.w	r2, r7, #12
 8000738:	2302      	movs	r3, #2
 800073a:	2153      	movs	r1, #83	; 0x53
 800073c:	6878      	ldr	r0, [r7, #4]
 800073e:	f7ff fec1 	bl	80004c4 <codec_set_reg>
 8000742:	4603      	mov	r3, r0
 8000744:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00111111; // um certo ganho
 8000746:	233f      	movs	r3, #63	; 0x3f
 8000748:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111111; // um certo ganho
 800074a:	233f      	movs	r3, #63	; 0x3f
 800074c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_VOL_CTRL, &aux[0], 2);
 800074e:	f107 020c 	add.w	r2, r7, #12
 8000752:	2302      	movs	r3, #2
 8000754:	211c      	movs	r1, #28
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f7ff feb4 	bl	80004c4 <codec_set_reg>
 800075c:	4603      	mov	r3, r0
 800075e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 8000760:	2300      	movs	r3, #0
 8000762:	737b      	strb	r3, [r7, #13]
	aux[0] = 0x00;
 8000764:	2300      	movs	r3, #0
 8000766:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DIG_BOOST_CTRL, &aux[0], 2);
 8000768:	f107 020c 	add.w	r2, r7, #12
 800076c:	2302      	movs	r3, #2
 800076e:	211e      	movs	r1, #30
 8000770:	6878      	ldr	r0, [r7, #4]
 8000772:	f7ff fea7 	bl	80004c4 <codec_set_reg>
 8000776:	4603      	mov	r3, r0
 8000778:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b10000000; 
 800077a:	2380      	movs	r3, #128	; 0x80
 800077c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000; 
 800077e:	2380      	movs	r3, #128	; 0x80
 8000780:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC2DAC_DIG_MIX_CTRL, &aux[0], 2);
 8000782:	f107 020c 	add.w	r2, r7, #12
 8000786:	2302      	movs	r3, #2
 8000788:	2129      	movs	r1, #41	; 0x29
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff fe9a 	bl	80004c4 <codec_set_reg>
 8000790:	4603      	mov	r3, r0
 8000792:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0xAF;
 8000794:	23af      	movs	r3, #175	; 0xaf
 8000796:	737b      	strb	r3, [r7, #13]
	aux[0] = 0xAF;
 8000798:	23af      	movs	r3, #175	; 0xaf
 800079a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DACL1_R1_DIG_VOL, &aux[0], 2);
 800079c:	f107 020c 	add.w	r2, r7, #12
 80007a0:	2302      	movs	r3, #2
 80007a2:	2119      	movs	r1, #25
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f7ff fe8d 	bl	80004c4 <codec_set_reg>
 80007aa:	4603      	mov	r3, r0
 80007ac:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00010010;
 80007ae:	2312      	movs	r3, #18
 80007b0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00010010;
 80007b2:	2312      	movs	r3, #18
 80007b4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DAC_DIG_MIX_CTRL, &aux[0], 2);
 80007b6:	f107 020c 	add.w	r2, r7, #12
 80007ba:	2302      	movs	r3, #2
 80007bc:	212a      	movs	r1, #42	; 0x2a
 80007be:	6878      	ldr	r0, [r7, #4]
 80007c0:	f7ff fe80 	bl	80004c4 <codec_set_reg>
 80007c4:	4603      	mov	r3, r0
 80007c6:	73fb      	strb	r3, [r7, #15]
	

	aux[1] = 0b00010001;
 80007c8:	2311      	movs	r3, #17
 80007ca:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80007cc:	2300      	movs	r3, #0
 80007ce:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GENERAL_CTRL1, &aux[0], 2);
 80007d0:	f107 020c 	add.w	r2, r7, #12
 80007d4:	2302      	movs	r3, #2
 80007d6:	21fa      	movs	r1, #250	; 0xfa
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff fe73 	bl	80004c4 <codec_set_reg>
 80007de:	4603      	mov	r3, r0
 80007e0:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000110;
 80007e2:	2306      	movs	r3, #6
 80007e4:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10011000;
 80007e6:	2398      	movs	r3, #152	; 0x98
 80007e8:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL1, &aux[0], 2);
 80007ea:	f107 020c 	add.w	r2, r7, #12
 80007ee:	2302      	movs	r3, #2
 80007f0:	2161      	movs	r1, #97	; 0x61
 80007f2:	6878      	ldr	r0, [r7, #4]
 80007f4:	f7ff fe66 	bl	80004c4 <codec_set_reg>
 80007f8:	4603      	mov	r3, r0
 80007fa:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80007fc:	2300      	movs	r3, #0
 80007fe:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10001000;
 8000800:	2388      	movs	r3, #136	; 0x88
 8000802:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL2, &aux[0], 2);
 8000804:	f107 020c 	add.w	r2, r7, #12
 8000808:	2302      	movs	r3, #2
 800080a:	2162      	movs	r1, #98	; 0x62
 800080c:	6878      	ldr	r0, [r7, #4]
 800080e:	f7ff fe59 	bl	80004c4 <codec_set_reg>
 8000812:	4603      	mov	r3, r0
 8000814:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b11111001;
 8000816:	23f9      	movs	r3, #249	; 0xf9
 8000818:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11111000;
 800081a:	23f8      	movs	r3, #248	; 0xf8
 800081c:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL3, &aux[0], 2);
 800081e:	f107 020c 	add.w	r2, r7, #12
 8000822:	2302      	movs	r3, #2
 8000824:	2163      	movs	r1, #99	; 0x63
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fe4c 	bl	80004c4 <codec_set_reg>
 800082c:	4603      	mov	r3, r0
 800082e:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00110110;//00110110;
 8000830:	2336      	movs	r3, #54	; 0x36
 8000832:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11001010;
 8000834:	23ca      	movs	r3, #202	; 0xca
 8000836:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL4, &aux[0], 2);
 8000838:	f107 020c 	add.w	r2, r7, #12
 800083c:	2302      	movs	r3, #2
 800083e:	2164      	movs	r1, #100	; 0x64
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff fe3f 	bl	80004c4 <codec_set_reg>
 8000846:	4603      	mov	r3, r0
 8000848:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 800084a:	2300      	movs	r3, #0
 800084c:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b11001100;
 800084e:	23cc      	movs	r3, #204	; 0xcc
 8000850:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL5, &aux[0], 2);
 8000852:	f107 020c 	add.w	r2, r7, #12
 8000856:	2302      	movs	r3, #2
 8000858:	2165      	movs	r1, #101	; 0x65
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f7ff fe32 	bl	80004c4 <codec_set_reg>
 8000860:	4603      	mov	r3, r0
 8000862:	73fb      	strb	r3, [r7, #15]
	
	aux[1] = 0x00;
 8000864:	2300      	movs	r3, #0
 8000866:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00111111;
 8000868:	233f      	movs	r3, #63	; 0x3f
 800086a:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_POWER_MANAGE_CTRL6, &aux[0], 2);
 800086c:	f107 020c 	add.w	r2, r7, #12
 8000870:	2302      	movs	r3, #2
 8000872:	2166      	movs	r1, #102	; 0x66
 8000874:	6878      	ldr	r0, [r7, #4]
 8000876:	f7ff fe25 	bl	80004c4 <codec_set_reg>
 800087a:	4603      	mov	r3, r0
 800087c:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;//00000000;//00000110;
 800087e:	2300      	movs	r3, #0
 8000880:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000;//10011000; // config device as slave
 8000882:	2380      	movs	r3, #128	; 0x80
 8000884:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_DIG_INTERFACE_CONTROL, &aux[0], 2);
 8000886:	f107 020c 	add.w	r2, r7, #12
 800088a:	2302      	movs	r3, #2
 800088c:	2170      	movs	r1, #112	; 0x70
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f7ff fe18 	bl	80004c4 <codec_set_reg>
 8000894:	4603      	mov	r3, r0
 8000896:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000101;//00001010;//00000101;
 8000898:	2305      	movs	r3, #5
 800089a:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000001;//00010000;
 800089c:	2301      	movs	r3, #1
 800089e:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DAC_CLK_CTRL1, &aux[0], 2);
 80008a0:	f107 020c 	add.w	r2, r7, #12
 80008a4:	2302      	movs	r3, #2
 80008a6:	2173      	movs	r1, #115	; 0x73
 80008a8:	6878      	ldr	r0, [r7, #4]
 80008aa:	f7ff fe0b 	bl	80004c4 <codec_set_reg>
 80008ae:	4603      	mov	r3, r0
 80008b0:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_ADC_DAC_CLK_CTRL1,databuffer, 2);
 80008b2:	f107 0208 	add.w	r2, r7, #8
 80008b6:	2302      	movs	r3, #2
 80008b8:	2173      	movs	r1, #115	; 0x73
 80008ba:	6878      	ldr	r0, [r7, #4]
 80008bc:	f7ff fe34 	bl	8000528 <codec_read_reg>
 80008c0:	4603      	mov	r3, r0
 80008c2:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x00;
 80008c4:	2300      	movs	r3, #0
 80008c6:	737b      	strb	r3, [r7, #13]
	aux[0] = 00001100;
 80008c8:	2340      	movs	r3, #64	; 0x40
 80008ca:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_ADC_DAC_CLK_CTRL2, &aux[0], 2);
 80008cc:	f107 020c 	add.w	r2, r7, #12
 80008d0:	2302      	movs	r3, #2
 80008d2:	2174      	movs	r1, #116	; 0x74
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fdf5 	bl	80004c4 <codec_set_reg>
 80008da:	4603      	mov	r3, r0
 80008dc:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00000000;
 80008de:	2300      	movs	r3, #0
 80008e0:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00000000;
 80008e2:	2300      	movs	r3, #0
 80008e4:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_GLOBAL_CLK_CTRL, &aux[0], 2);
 80008e6:	f107 020c 	add.w	r2, r7, #12
 80008ea:	2302      	movs	r3, #2
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	6878      	ldr	r0, [r7, #4]
 80008f0:	f7ff fde8 	bl	80004c4 <codec_set_reg>
 80008f4:	4603      	mov	r3, r0
 80008f6:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0b00011101;
 80008f8:	231d      	movs	r3, #29
 80008fa:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b10000000;
 80008fc:	2380      	movs	r3, #128	; 0x80
 80008fe:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_HP_AMP_CTRL1, &aux[0], 2);
 8000900:	f107 020c 	add.w	r2, r7, #12
 8000904:	2302      	movs	r3, #2
 8000906:	218e      	movs	r1, #142	; 0x8e
 8000908:	6878      	ldr	r0, [r7, #4]
 800090a:	f7ff fddb 	bl	80004c4 <codec_set_reg>
 800090e:	4603      	mov	r3, r0
 8000910:	73fb      	strb	r3, [r7, #15]

	aux[1] = 0x20;
 8000912:	2320      	movs	r3, #32
 8000914:	737b      	strb	r3, [r7, #13]
	aux[0] = 0b00100010;
 8000916:	2322      	movs	r3, #34	; 0x22
 8000918:	733b      	strb	r3, [r7, #12]
	result = codec_set_reg(i2c_instance, dREG_WIND_FILTER_CTRL2, &aux[0], 2);
 800091a:	f107 020c 	add.w	r2, r7, #12
 800091e:	2302      	movs	r3, #2
 8000920:	21d3      	movs	r1, #211	; 0xd3
 8000922:	6878      	ldr	r0, [r7, #4]
 8000924:	f7ff fdce 	bl	80004c4 <codec_set_reg>
 8000928:	4603      	mov	r3, r0
 800092a:	73fb      	strb	r3, [r7, #15]
}
 800092c:	bf00      	nop
 800092e:	3710      	adds	r7, #16
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}

08000934 <HAL_I2SEx_TxRxHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_I2SEx_TxRxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[0];
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <HAL_I2SEx_TxRxHalfCpltCallback+0x28>)
 800093e:	4a08      	ldr	r2, [pc, #32]	; (8000960 <HAL_I2SEx_TxRxHalfCpltCallback+0x2c>)
 8000940:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[0];
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <HAL_I2SEx_TxRxHalfCpltCallback+0x30>)
 8000944:	4a08      	ldr	r2, [pc, #32]	; (8000968 <HAL_I2SEx_TxRxHalfCpltCallback+0x34>)
 8000946:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_I2SEx_TxRxHalfCpltCallback+0x38>)
 800094a:	2201      	movs	r2, #1
 800094c:	701a      	strb	r2, [r3, #0]
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	20000370 	.word	0x20000370
 8000960:	20000270 	.word	0x20000270
 8000964:	20000000 	.word	0x20000000
 8000968:	200002f0 	.word	0x200002f0
 800096c:	20000374 	.word	0x20000374

08000970 <HAL_I2SEx_TxRxCpltCallback>:

void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
  inBufferPtr = &adcData[dBUFFER_SIZE / 2];
 8000978:	4b07      	ldr	r3, [pc, #28]	; (8000998 <HAL_I2SEx_TxRxCpltCallback+0x28>)
 800097a:	4a08      	ldr	r2, [pc, #32]	; (800099c <HAL_I2SEx_TxRxCpltCallback+0x2c>)
 800097c:	601a      	str	r2, [r3, #0]
  outBufferPtr = &dacData[dBUFFER_SIZE / 2];
 800097e:	4b08      	ldr	r3, [pc, #32]	; (80009a0 <HAL_I2SEx_TxRxCpltCallback+0x30>)
 8000980:	4a08      	ldr	r2, [pc, #32]	; (80009a4 <HAL_I2SEx_TxRxCpltCallback+0x34>)
 8000982:	601a      	str	r2, [r3, #0]
  flagDataReady = 1;
 8000984:	4b08      	ldr	r3, [pc, #32]	; (80009a8 <HAL_I2SEx_TxRxCpltCallback+0x38>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
}
 800098a:	bf00      	nop
 800098c:	370c      	adds	r7, #12
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	20000370 	.word	0x20000370
 800099c:	200002b0 	.word	0x200002b0
 80009a0:	20000000 	.word	0x20000000
 80009a4:	20000330 	.word	0x20000330
 80009a8:	20000374 	.word	0x20000374

080009ac <processData>:
        buffer[i] = amplitude * sin(2 * M_PI * FREQUENCY * t);
    }
}

void processData()
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
  static float leftIn, leftOut;
  static float rightIn, rightOut;
  static uint32_t time = 0;

  if(time++ > 100000)
 80009b2:	4b4c      	ldr	r3, [pc, #304]	; (8000ae4 <processData+0x138>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	1c5a      	adds	r2, r3, #1
 80009b8:	494a      	ldr	r1, [pc, #296]	; (8000ae4 <processData+0x138>)
 80009ba:	600a      	str	r2, [r1, #0]
 80009bc:	4a4a      	ldr	r2, [pc, #296]	; (8000ae8 <processData+0x13c>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d902      	bls.n	80009c8 <processData+0x1c>
  {
	  time = 0;
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <processData+0x138>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	601a      	str	r2, [r3, #0]
  }

  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 80009c8:	2300      	movs	r3, #0
 80009ca:	80fb      	strh	r3, [r7, #6]
 80009cc:	e07c      	b.n	8000ac8 <processData+0x11c>
  {

    //================ LEFT CHANNEL ================
    // Get ADC input and convert it to float
    leftIn = INT16_TO_FLOAT * inBufferPtr[n];
 80009ce:	4b47      	ldr	r3, [pc, #284]	; (8000aec <processData+0x140>)
 80009d0:	681a      	ldr	r2, [r3, #0]
 80009d2:	88fb      	ldrh	r3, [r7, #6]
 80009d4:	005b      	lsls	r3, r3, #1
 80009d6:	4413      	add	r3, r2
 80009d8:	881b      	ldrh	r3, [r3, #0]
 80009da:	b21b      	sxth	r3, r3
 80009dc:	ee07 3a90 	vmov	s15, r3
 80009e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80009e4:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000af0 <processData+0x144>
 80009e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009ec:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <processData+0x148>)
 80009ee:	edc3 7a00 	vstr	s15, [r3]
    if (leftIn > 1.0f)
 80009f2:	4b40      	ldr	r3, [pc, #256]	; (8000af4 <processData+0x148>)
 80009f4:	edd3 7a00 	vldr	s15, [r3]
 80009f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80009fc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a04:	dd09      	ble.n	8000a1a <processData+0x6e>
    {
      leftIn -= 2.0f;
 8000a06:	4b3b      	ldr	r3, [pc, #236]	; (8000af4 <processData+0x148>)
 8000a08:	edd3 7a00 	vldr	s15, [r3]
 8000a0c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000a10:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a14:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <processData+0x148>)
 8000a16:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    leftOut = leftIn;
 8000a1a:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <processData+0x148>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a36      	ldr	r2, [pc, #216]	; (8000af8 <processData+0x14c>)
 8000a20:	6013      	str	r3, [r2, #0]
    //leftOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);

    // Convert back to signed int  and set DAC output
    outBufferPtr[n] = (int16_t)(FLOAT_TO_INT16 * leftOut);
 8000a22:	4b35      	ldr	r3, [pc, #212]	; (8000af8 <processData+0x14c>)
 8000a24:	edd3 7a00 	vldr	s15, [r3]
 8000a28:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8000afc <processData+0x150>
 8000a2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a30:	4b33      	ldr	r3, [pc, #204]	; (8000b00 <processData+0x154>)
 8000a32:	681a      	ldr	r2, [r3, #0]
 8000a34:	88fb      	ldrh	r3, [r7, #6]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	4413      	add	r3, r2
 8000a3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a3e:	ee17 2a90 	vmov	r2, s15
 8000a42:	b212      	sxth	r2, r2
 8000a44:	801a      	strh	r2, [r3, #0]
    //outBufferPtr[n] = 0;

    //================ RIGHT CHANNEL ================
    // Get ADC input and convert it to float
    rightIn = INT16_TO_FLOAT * inBufferPtr[n+1];
 8000a46:	4b29      	ldr	r3, [pc, #164]	; (8000aec <processData+0x140>)
 8000a48:	681a      	ldr	r2, [r3, #0]
 8000a4a:	88fb      	ldrh	r3, [r7, #6]
 8000a4c:	3301      	adds	r3, #1
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	4413      	add	r3, r2
 8000a52:	881b      	ldrh	r3, [r3, #0]
 8000a54:	b21b      	sxth	r3, r3
 8000a56:	ee07 3a90 	vmov	s15, r3
 8000a5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a5e:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8000af0 <processData+0x144>
 8000a62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <processData+0x158>)
 8000a68:	edc3 7a00 	vstr	s15, [r3]
    if (rightIn > 1.0f)
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <processData+0x158>)
 8000a6e:	edd3 7a00 	vldr	s15, [r3]
 8000a72:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000a76:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7e:	dd09      	ble.n	8000a94 <processData+0xe8>
    {
      rightIn -= 2.0f;
 8000a80:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <processData+0x158>)
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000a8a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000a8e:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <processData+0x158>)
 8000a90:	edc3 7a00 	vstr	s15, [r3]
    }

    // Compute new sample
    rightOut = rightIn;
 8000a94:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <processData+0x158>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a1b      	ldr	r2, [pc, #108]	; (8000b08 <processData+0x15c>)
 8000a9a:	6013      	str	r3, [r2, #0]
    //rightOut = 1000000000 * sin(2 * M_PI * FREQUENCY * time);

    // Convert back to signed int  and set DAC output
    outBufferPtr[n+1] = (int16_t)(FLOAT_TO_INT16 * rightOut);
 8000a9c:	4b1a      	ldr	r3, [pc, #104]	; (8000b08 <processData+0x15c>)
 8000a9e:	edd3 7a00 	vldr	s15, [r3]
 8000aa2:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8000afc <processData+0x150>
 8000aa6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000aaa:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <processData+0x154>)
 8000aac:	681a      	ldr	r2, [r3, #0]
 8000aae:	88fb      	ldrh	r3, [r7, #6]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	005b      	lsls	r3, r3, #1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000aba:	ee17 2a90 	vmov	r2, s15
 8000abe:	b212      	sxth	r2, r2
 8000ac0:	801a      	strh	r2, [r3, #0]
  for (uint16_t n = 0 ; n < (dBUFFER_SIZE / 2 - 1) ; n += 2)
 8000ac2:	88fb      	ldrh	r3, [r7, #6]
 8000ac4:	3302      	adds	r3, #2
 8000ac6:	80fb      	strh	r3, [r7, #6]
 8000ac8:	88fb      	ldrh	r3, [r7, #6]
 8000aca:	2b1e      	cmp	r3, #30
 8000acc:	f67f af7f 	bls.w	80009ce <processData+0x22>
    //outBufferPtr[n+1] = 0;

  }
  flagDataReady = 0;
 8000ad0:	4b0e      	ldr	r3, [pc, #56]	; (8000b0c <processData+0x160>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	20000378 	.word	0x20000378
 8000ae8:	000186a0 	.word	0x000186a0
 8000aec:	20000370 	.word	0x20000370
 8000af0:	38000000 	.word	0x38000000
 8000af4:	2000037c 	.word	0x2000037c
 8000af8:	20000380 	.word	0x20000380
 8000afc:	47000000 	.word	0x47000000
 8000b00:	20000000 	.word	0x20000000
 8000b04:	20000384 	.word	0x20000384
 8000b08:	20000388 	.word	0x20000388
 8000b0c:	20000374 	.word	0x20000374

08000b10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b16:	f000 fd47 	bl	80015a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b1a:	f000 f839 	bl	8000b90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b1e:	f000 f9c5 	bl	8000eac <MX_GPIO_Init>
  MX_DMA_Init();
 8000b22:	f000 f99b 	bl	8000e5c <MX_DMA_Init>
  MX_I2C2_Init();
 8000b26:	f000 f8ef 	bl	8000d08 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000b2a:	f000 f91b 	bl	8000d64 <MX_I2S2_Init>
  MX_ADC1_Init();
 8000b2e:	f000 f899 	bl	8000c64 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000b32:	f000 f969 	bl	8000e08 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000b36:	f000 f943 	bl	8000dc0 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  codec_init(&hi2c2);
 8000b3a:	480e      	ldr	r0, [pc, #56]	; (8000b74 <main+0x64>)
 8000b3c:	f7ff fd10 	bl	8000560 <codec_init>
  //codec_init_teste(&hi2c2);
  HAL_TIM_Base_Start_IT(&htim14);
 8000b40:	480d      	ldr	r0, [pc, #52]	; (8000b78 <main+0x68>)
 8000b42:	f004 fad9 	bl	80050f8 <HAL_TIM_Base_Start_IT>

  HAL_StatusTypeDef status = HAL_I2SEx_TransmitReceive_DMA(&hi2s2, (uint16_t *)dacData, (uint16_t *)adcData, dBUFFER_SIZE);
 8000b46:	2340      	movs	r3, #64	; 0x40
 8000b48:	4a0c      	ldr	r2, [pc, #48]	; (8000b7c <main+0x6c>)
 8000b4a:	490d      	ldr	r1, [pc, #52]	; (8000b80 <main+0x70>)
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <main+0x74>)
 8000b4e:	f003 f857 	bl	8003c00 <HAL_I2SEx_TransmitReceive_DMA>
 8000b52:	4603      	mov	r3, r0
 8000b54:	71fb      	strb	r3, [r7, #7]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if (flagDataReady)
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <main+0x78>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d001      	beq.n	8000b62 <main+0x52>
    {
		processData();
 8000b5e:	f7ff ff25 	bl	80009ac <processData>
    }

    if (GL_timer_100ms)
 8000b62:	4b0a      	ldr	r3, [pc, #40]	; (8000b8c <main+0x7c>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d0f5      	beq.n	8000b56 <main+0x46>
    {
      GL_timer_100ms = 0;
 8000b6a:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <main+0x7c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
    if (flagDataReady)
 8000b70:	e7f1      	b.n	8000b56 <main+0x46>
 8000b72:	bf00      	nop
 8000b74:	20000088 	.word	0x20000088
 8000b78:	200001e4 	.word	0x200001e4
 8000b7c:	20000270 	.word	0x20000270
 8000b80:	200002f0 	.word	0x200002f0
 8000b84:	200000dc 	.word	0x200000dc
 8000b88:	20000374 	.word	0x20000374
 8000b8c:	20000038 	.word	0x20000038

08000b90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b094      	sub	sp, #80	; 0x50
 8000b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	2230      	movs	r2, #48	; 0x30
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	f004 ffc0 	bl	8005b24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ba4:	f107 030c 	add.w	r3, r7, #12
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]
 8000bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
 8000bb8:	4b28      	ldr	r3, [pc, #160]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbc:	4a27      	ldr	r2, [pc, #156]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc4:	4b25      	ldr	r3, [pc, #148]	; (8000c5c <SystemClock_Config+0xcc>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bcc:	60bb      	str	r3, [r7, #8]
 8000bce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b22      	ldr	r3, [pc, #136]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <SystemClock_Config+0xd0>)
 8000bda:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bde:	6013      	str	r3, [r2, #0]
 8000be0:	4b1f      	ldr	r3, [pc, #124]	; (8000c60 <SystemClock_Config+0xd0>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bec:	2301      	movs	r3, #1
 8000bee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bf4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8000c00:	230d      	movs	r3, #13
 8000c02:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000c04:	23a8      	movs	r3, #168	; 0xa8
 8000c06:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c08:	2302      	movs	r3, #2
 8000c0a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c0c:	2304      	movs	r3, #4
 8000c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c10:	f107 0320 	add.w	r3, r7, #32
 8000c14:	4618      	mov	r0, r3
 8000c16:	f003 fc87 	bl	8004528 <HAL_RCC_OscConfig>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000c20:	f000 fa18 	bl	8001054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c24:	230f      	movs	r3, #15
 8000c26:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000c30:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000c34:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c3a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000c3c:	f107 030c 	add.w	r3, r7, #12
 8000c40:	2105      	movs	r1, #5
 8000c42:	4618      	mov	r0, r3
 8000c44:	f003 fee8 	bl	8004a18 <HAL_RCC_ClockConfig>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000c4e:	f000 fa01 	bl	8001054 <Error_Handler>
  }
}
 8000c52:	bf00      	nop
 8000c54:	3750      	adds	r7, #80	; 0x50
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40023800 	.word	0x40023800
 8000c60:	40007000 	.word	0x40007000

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_ADC1_Init+0x9c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_ADC1_Init+0xa0>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc6:	f000 fce1 	bl	800168c <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f000 f9c0 	bl	8001054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ce6:	f000 fd15 	bl	8001714 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f000 f9b0 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	20000040 	.word	0x20000040
 8000d00:	40012000 	.word	0x40012000
 8000d04:	0f000001 	.word	0x0f000001

08000d08 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d0c:	4b13      	ldr	r3, [pc, #76]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d0e:	4a14      	ldr	r2, [pc, #80]	; (8000d60 <MX_I2C2_Init+0x58>)
 8000d10:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 10000;
 8000d12:	4b12      	ldr	r3, [pc, #72]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d14:	f242 7210 	movw	r2, #10000	; 0x2710
 8000d18:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8000d20:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d26:	4b0d      	ldr	r3, [pc, #52]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d28:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000d2c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_I2C2_Init+0x54>)
 8000d48:	f001 fd54 	bl	80027f4 <HAL_I2C_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_I2C2_Init+0x4e>
  {
    Error_Handler();
 8000d52:	f000 f97f 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000088 	.word	0x20000088
 8000d60:	40005800 	.word	0x40005800

08000d64 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000d68:	4b13      	ldr	r3, [pc, #76]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d6a:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <MX_I2S2_Init+0x58>)
 8000d6c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000d6e:	4b12      	ldr	r3, [pc, #72]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d74:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000d76:	4b10      	ldr	r3, [pc, #64]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000d7c:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000d82:	4b0d      	ldr	r3, [pc, #52]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d88:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8000d8a:	4b0b      	ldr	r3, [pc, #44]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d8c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000d90:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000d92:	4b09      	ldr	r3, [pc, #36]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000d98:	4b07      	ldr	r3, [pc, #28]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000d9e:	4b06      	ldr	r3, [pc, #24]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000da4:	4804      	ldr	r0, [pc, #16]	; (8000db8 <MX_I2S2_Init+0x54>)
 8000da6:	f002 fce5 	bl	8003774 <HAL_I2S_Init>
 8000daa:	4603      	mov	r3, r0
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d001      	beq.n	8000db4 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000db0:	f000 f950 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000db4:	bf00      	nop
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	200000dc 	.word	0x200000dc
 8000dbc:	40003800 	.word	0x40003800

08000dc0 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000dc4:	4b0e      	ldr	r3, [pc, #56]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000dc6:	4a0f      	ldr	r2, [pc, #60]	; (8000e04 <MX_TIM14_Init+0x44>)
 8000dc8:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd0:	4b0b      	ldr	r3, [pc, #44]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000dd8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8000ddc:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dde:	4b08      	ldr	r3, [pc, #32]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000dea:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_TIM14_Init+0x40>)
 8000dec:	f004 f934 	bl	8005058 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 8000df6:	f000 f92d 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	200001e4 	.word	0x200001e4
 8000e04:	40002000 	.word	0x40002000

08000e08 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e0e:	4a12      	ldr	r2, [pc, #72]	; (8000e58 <MX_USART1_UART_Init+0x50>)
 8000e10:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e18:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e1a:	4b0e      	ldr	r3, [pc, #56]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e26:	4b0b      	ldr	r3, [pc, #44]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e2c:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e2e:	220c      	movs	r2, #12
 8000e30:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e32:	4b08      	ldr	r3, [pc, #32]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e38:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e3e:	4805      	ldr	r0, [pc, #20]	; (8000e54 <MX_USART1_UART_Init+0x4c>)
 8000e40:	f004 fbae 	bl	80055a0 <HAL_UART_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e4a:	f000 f903 	bl	8001054 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000022c 	.word	0x2000022c
 8000e58:	40011000 	.word	0x40011000

08000e5c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <MX_DMA_Init+0x4c>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ea8 <MX_DMA_Init+0x4c>)
 8000e6c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <MX_DMA_Init+0x4c>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	607b      	str	r3, [r7, #4]
 8000e7c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	200e      	movs	r0, #14
 8000e84:	f000 ff3f 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000e88:	200e      	movs	r0, #14
 8000e8a:	f000 ff58 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	200f      	movs	r0, #15
 8000e94:	f000 ff37 	bl	8001d06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000e98:	200f      	movs	r0, #15
 8000e9a:	f000 ff50 	bl	8001d3e <HAL_NVIC_EnableIRQ>

}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800

08000eac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08a      	sub	sp, #40	; 0x28
 8000eb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb2:	f107 0314 	add.w	r3, r7, #20
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	601a      	str	r2, [r3, #0]
 8000eba:	605a      	str	r2, [r3, #4]
 8000ebc:	609a      	str	r2, [r3, #8]
 8000ebe:	60da      	str	r2, [r3, #12]
 8000ec0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
 8000ec6:	4b2e      	ldr	r3, [pc, #184]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a2d      	ldr	r2, [pc, #180]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b2b      	ldr	r3, [pc, #172]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ede:	2300      	movs	r3, #0
 8000ee0:	60fb      	str	r3, [r7, #12]
 8000ee2:	4b27      	ldr	r3, [pc, #156]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	4a26      	ldr	r2, [pc, #152]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ee8:	f043 0301 	orr.w	r3, r3, #1
 8000eec:	6313      	str	r3, [r2, #48]	; 0x30
 8000eee:	4b24      	ldr	r3, [pc, #144]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	60fb      	str	r3, [r7, #12]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	4b20      	ldr	r3, [pc, #128]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	4a1f      	ldr	r2, [pc, #124]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f04:	f043 0302 	orr.w	r3, r3, #2
 8000f08:	6313      	str	r3, [r2, #48]	; 0x30
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0e:	f003 0302 	and.w	r3, r3, #2
 8000f12:	60bb      	str	r3, [r7, #8]
 8000f14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f16:	2300      	movs	r3, #0
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	4b19      	ldr	r3, [pc, #100]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a18      	ldr	r2, [pc, #96]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f20:	f043 0304 	orr.w	r3, r3, #4
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b16      	ldr	r3, [pc, #88]	; (8000f80 <MX_GPIO_Init+0xd4>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0304 	and.w	r3, r3, #4
 8000f2e:	607b      	str	r3, [r7, #4]
 8000f30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 8000f32:	2200      	movs	r2, #0
 8000f34:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000f38:	4812      	ldr	r0, [pc, #72]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f3a:	f001 fc27 	bl	800278c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 8000f3e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000f42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	480b      	ldr	r0, [pc, #44]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f58:	f001 fa7c 	bl	8002454 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000f5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f62:	2300      	movs	r3, #0
 8000f64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000f6a:	f107 0314 	add.w	r3, r7, #20
 8000f6e:	4619      	mov	r1, r3
 8000f70:	4804      	ldr	r0, [pc, #16]	; (8000f84 <MX_GPIO_Init+0xd8>)
 8000f72:	f001 fa6f 	bl	8002454 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f76:	bf00      	nop
 8000f78:	3728      	adds	r7, #40	; 0x28
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	bf00      	nop
 8000f80:	40023800 	.word	0x40023800
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  //static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a24      	ldr	r2, [pc, #144]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d142      	bne.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x98>
  {
    

    GL_timer_100us = 1;
 8000f9a:	4b24      	ldr	r3, [pc, #144]	; (800102c <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	601a      	str	r2, [r3, #0]
    count_100us++;
 8000fa0:	4b23      	ldr	r3, [pc, #140]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a22      	ldr	r2, [pc, #136]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fa8:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 8000faa:	4b21      	ldr	r3, [pc, #132]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2b09      	cmp	r3, #9
 8000fb0:	dd0a      	ble.n	8000fc8 <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8000fb2:	4b1f      	ldr	r3, [pc, #124]	; (8001030 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8000fb8:	4b1e      	ldr	r3, [pc, #120]	; (8001034 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000fba:	2201      	movs	r2, #1
 8000fbc:	601a      	str	r2, [r3, #0]
      count_1ms++;
 8000fbe:	4b1e      	ldr	r3, [pc, #120]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	3301      	adds	r3, #1
 8000fc4:	4a1c      	ldr	r2, [pc, #112]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fc6:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b09      	cmp	r3, #9
 8000fce:	dd0a      	ble.n	8000fe6 <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8000fd0:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8000fd6:	4b19      	ldr	r3, [pc, #100]	; (800103c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
      count_10ms++;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	4a17      	ldr	r2, [pc, #92]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fe4:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 8000fe6:	4b16      	ldr	r3, [pc, #88]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b09      	cmp	r3, #9
 8000fec:	dd0e      	ble.n	800100c <HAL_TIM_PeriodElapsedCallback+0x84>
    {
      count_10ms = 0;
 8000fee:	4b14      	ldr	r3, [pc, #80]	; (8001040 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 8000ff4:	4b13      	ldr	r3, [pc, #76]	; (8001044 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	601a      	str	r2, [r3, #0]
      count_100ms++;
 8000ffa:	4b13      	ldr	r3, [pc, #76]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	3301      	adds	r3, #1
 8001000:	4a11      	ldr	r2, [pc, #68]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001002:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 8001004:	2180      	movs	r1, #128	; 0x80
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001008:	f001 fbd9 	bl	80027be <HAL_GPIO_TogglePin>
    }

    if(count_100ms >= 10)
 800100c:	4b0e      	ldr	r3, [pc, #56]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b09      	cmp	r3, #9
 8001012:	dd05      	ble.n	8001020 <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      count_100ms = 0;
 8001014:	4b0c      	ldr	r3, [pc, #48]	; (8001048 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001016:	2200      	movs	r2, #0
 8001018:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 800101a:	4b0d      	ldr	r3, [pc, #52]	; (8001050 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 800101c:	2201      	movs	r2, #1
 800101e:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	40002000 	.word	0x40002000
 800102c:	2000002c 	.word	0x2000002c
 8001030:	2000038c 	.word	0x2000038c
 8001034:	20000030 	.word	0x20000030
 8001038:	20000390 	.word	0x20000390
 800103c:	20000034 	.word	0x20000034
 8001040:	20000394 	.word	0x20000394
 8001044:	20000038 	.word	0x20000038
 8001048:	20000398 	.word	0x20000398
 800104c:	40020400 	.word	0x40020400
 8001050:	2000003c 	.word	0x2000003c

08001054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001054:	b480      	push	{r7}
 8001056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001058:	b672      	cpsid	i
}
 800105a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800105c:	e7fe      	b.n	800105c <Error_Handler+0x8>
	...

08001060 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001060:	b480      	push	{r7}
 8001062:	b083      	sub	sp, #12
 8001064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001066:	2300      	movs	r3, #0
 8001068:	607b      	str	r3, [r7, #4]
 800106a:	4b10      	ldr	r3, [pc, #64]	; (80010ac <HAL_MspInit+0x4c>)
 800106c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106e:	4a0f      	ldr	r2, [pc, #60]	; (80010ac <HAL_MspInit+0x4c>)
 8001070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001074:	6453      	str	r3, [r2, #68]	; 0x44
 8001076:	4b0d      	ldr	r3, [pc, #52]	; (80010ac <HAL_MspInit+0x4c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800107e:	607b      	str	r3, [r7, #4]
 8001080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001082:	2300      	movs	r3, #0
 8001084:	603b      	str	r3, [r7, #0]
 8001086:	4b09      	ldr	r3, [pc, #36]	; (80010ac <HAL_MspInit+0x4c>)
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	4a08      	ldr	r2, [pc, #32]	; (80010ac <HAL_MspInit+0x4c>)
 800108c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001090:	6413      	str	r3, [r2, #64]	; 0x40
 8001092:	4b06      	ldr	r3, [pc, #24]	; (80010ac <HAL_MspInit+0x4c>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109a:	603b      	str	r3, [r7, #0]
 800109c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40023800 	.word	0x40023800

080010b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b08a      	sub	sp, #40	; 0x28
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b8:	f107 0314 	add.w	r3, r7, #20
 80010bc:	2200      	movs	r2, #0
 80010be:	601a      	str	r2, [r3, #0]
 80010c0:	605a      	str	r2, [r3, #4]
 80010c2:	609a      	str	r2, [r3, #8]
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a17      	ldr	r2, [pc, #92]	; (800112c <HAL_ADC_MspInit+0x7c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d127      	bne.n	8001122 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010d2:	2300      	movs	r3, #0
 80010d4:	613b      	str	r3, [r7, #16]
 80010d6:	4b16      	ldr	r3, [pc, #88]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010da:	4a15      	ldr	r2, [pc, #84]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010e0:	6453      	str	r3, [r2, #68]	; 0x44
 80010e2:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ea:	613b      	str	r3, [r7, #16]
 80010ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ee:	2300      	movs	r3, #0
 80010f0:	60fb      	str	r3, [r7, #12]
 80010f2:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_ADC_MspInit+0x80>)
 80010f8:	f043 0301 	orr.w	r3, r3, #1
 80010fc:	6313      	str	r3, [r2, #48]	; 0x30
 80010fe:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <HAL_ADC_MspInit+0x80>)
 8001100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
 8001108:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin|POT4_Pin
 800110a:	231f      	movs	r3, #31
 800110c:	617b      	str	r3, [r7, #20]
                          |AD_PWR_SUPPLY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001116:	f107 0314 	add.w	r3, r7, #20
 800111a:	4619      	mov	r1, r3
 800111c:	4805      	ldr	r0, [pc, #20]	; (8001134 <HAL_ADC_MspInit+0x84>)
 800111e:	f001 f999 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001122:	bf00      	nop
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	40012000 	.word	0x40012000
 8001130:	40023800 	.word	0x40023800
 8001134:	40020000 	.word	0x40020000

08001138 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b08a      	sub	sp, #40	; 0x28
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 0314 	add.w	r3, r7, #20
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a19      	ldr	r2, [pc, #100]	; (80011bc <HAL_I2C_MspInit+0x84>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d12c      	bne.n	80011b4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	613b      	str	r3, [r7, #16]
 800115e:	4b18      	ldr	r3, [pc, #96]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a17      	ldr	r2, [pc, #92]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 8001164:	f043 0302 	orr.w	r3, r3, #2
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b15      	ldr	r3, [pc, #84]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0302 	and.w	r3, r3, #2
 8001172:	613b      	str	r3, [r7, #16]
 8001174:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001176:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800117a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800117c:	2312      	movs	r3, #18
 800117e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001180:	2300      	movs	r3, #0
 8001182:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001184:	2303      	movs	r3, #3
 8001186:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001188:	2304      	movs	r3, #4
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800118c:	f107 0314 	add.w	r3, r7, #20
 8001190:	4619      	mov	r1, r3
 8001192:	480c      	ldr	r0, [pc, #48]	; (80011c4 <HAL_I2C_MspInit+0x8c>)
 8001194:	f001 f95e 	bl	8002454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	4b08      	ldr	r3, [pc, #32]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a07      	ldr	r2, [pc, #28]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 80011a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b05      	ldr	r3, [pc, #20]	; (80011c0 <HAL_I2C_MspInit+0x88>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b0:	60fb      	str	r3, [r7, #12]
 80011b2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	3728      	adds	r7, #40	; 0x28
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40005800 	.word	0x40005800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020400 	.word	0x40020400

080011c8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08e      	sub	sp, #56	; 0x38
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d4:	2200      	movs	r2, #0
 80011d6:	601a      	str	r2, [r3, #0]
 80011d8:	605a      	str	r2, [r3, #4]
 80011da:	609a      	str	r2, [r3, #8]
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a6b      	ldr	r2, [pc, #428]	; (80013a0 <HAL_I2S_MspInit+0x1d8>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	f040 80cf 	bne.w	8001398 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80011fa:	2301      	movs	r3, #1
 80011fc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 80011fe:	2332      	movs	r3, #50	; 0x32
 8001200:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001202:	2302      	movs	r3, #2
 8001204:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001206:	f107 0314 	add.w	r3, r7, #20
 800120a:	4618      	mov	r0, r3
 800120c:	f003 fde4 	bl	8004dd8 <HAL_RCCEx_PeriphCLKConfig>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001216:	f7ff ff1d 	bl	8001054 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	613b      	str	r3, [r7, #16]
 800121e:	4b61      	ldr	r3, [pc, #388]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	4a60      	ldr	r2, [pc, #384]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 8001224:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
 800122a:	4b5e      	ldr	r3, [pc, #376]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	60fb      	str	r3, [r7, #12]
 800123a:	4b5a      	ldr	r3, [pc, #360]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	4a59      	ldr	r2, [pc, #356]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 8001240:	f043 0302 	orr.w	r3, r3, #2
 8001244:	6313      	str	r3, [r2, #48]	; 0x30
 8001246:	4b57      	ldr	r3, [pc, #348]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	f003 0302 	and.w	r3, r3, #2
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60bb      	str	r3, [r7, #8]
 8001256:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	4a52      	ldr	r2, [pc, #328]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	; 0x30
 8001262:	4b50      	ldr	r3, [pc, #320]	; (80013a4 <HAL_I2S_MspInit+0x1dc>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800126e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8001272:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001280:	2305      	movs	r3, #5
 8001282:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	4619      	mov	r1, r3
 800128a:	4847      	ldr	r0, [pc, #284]	; (80013a8 <HAL_I2S_MspInit+0x1e0>)
 800128c:	f001 f8e2 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001290:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001296:	2302      	movs	r3, #2
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129e:	2300      	movs	r3, #0
 80012a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 80012a2:	2306      	movs	r3, #6
 80012a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012aa:	4619      	mov	r1, r3
 80012ac:	483e      	ldr	r0, [pc, #248]	; (80013a8 <HAL_I2S_MspInit+0x1e0>)
 80012ae:	f001 f8d1 	bl	8002454 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012b2:	2340      	movs	r3, #64	; 0x40
 80012b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012c2:	2305      	movs	r3, #5
 80012c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012ca:	4619      	mov	r1, r3
 80012cc:	4837      	ldr	r0, [pc, #220]	; (80013ac <HAL_I2S_MspInit+0x1e4>)
 80012ce:	f001 f8c1 	bl	8002454 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80012d2:	4b37      	ldr	r3, [pc, #220]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012d4:	4a37      	ldr	r2, [pc, #220]	; (80013b4 <HAL_I2S_MspInit+0x1ec>)
 80012d6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80012d8:	4b35      	ldr	r3, [pc, #212]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012da:	2200      	movs	r2, #0
 80012dc:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80012de:	4b34      	ldr	r3, [pc, #208]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012e0:	2240      	movs	r2, #64	; 0x40
 80012e2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80012e4:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80012ea:	4b31      	ldr	r3, [pc, #196]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80012f0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012f2:	4b2f      	ldr	r3, [pc, #188]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012f8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012fa:	4b2d      	ldr	r3, [pc, #180]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 80012fc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001300:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8001302:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 8001304:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001308:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 800130c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001310:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001312:	4b27      	ldr	r3, [pc, #156]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001318:	4825      	ldr	r0, [pc, #148]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 800131a:	f000 fd2b 	bl	8001d74 <HAL_DMA_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8001324:	f7ff fe96 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a21      	ldr	r2, [pc, #132]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 800132c:	639a      	str	r2, [r3, #56]	; 0x38
 800132e:	4a20      	ldr	r2, [pc, #128]	; (80013b0 <HAL_I2S_MspInit+0x1e8>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <HAL_I2S_MspInit+0x1f4>)
 8001338:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 800133c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001340:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001348:	4b1b      	ldr	r3, [pc, #108]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 800134a:	2200      	movs	r2, #0
 800134c:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001350:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001354:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001356:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001358:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800135c:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800135e:	4b16      	ldr	r3, [pc, #88]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001360:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001364:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8001366:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001368:	f44f 7280 	mov.w	r2, #256	; 0x100
 800136c:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800136e:	4b12      	ldr	r3, [pc, #72]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001370:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001374:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001376:	4b10      	ldr	r3, [pc, #64]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 800137c:	480e      	ldr	r0, [pc, #56]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 800137e:	f000 fcf9 	bl	8001d74 <HAL_DMA_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8001388:	f7ff fe64 	bl	8001054 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001390:	63da      	str	r2, [r3, #60]	; 0x3c
 8001392:	4a09      	ldr	r2, [pc, #36]	; (80013b8 <HAL_I2S_MspInit+0x1f0>)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001398:	bf00      	nop
 800139a:	3738      	adds	r7, #56	; 0x38
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	40003800 	.word	0x40003800
 80013a4:	40023800 	.word	0x40023800
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40020800 	.word	0x40020800
 80013b0:	20000124 	.word	0x20000124
 80013b4:	40026070 	.word	0x40026070
 80013b8:	20000184 	.word	0x20000184
 80013bc:	40026058 	.word	0x40026058

080013c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0e      	ldr	r2, [pc, #56]	; (8001408 <HAL_TIM_Base_MspInit+0x48>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d115      	bne.n	80013fe <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80013d2:	2300      	movs	r3, #0
 80013d4:	60fb      	str	r3, [r7, #12]
 80013d6:	4b0d      	ldr	r3, [pc, #52]	; (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013da:	4a0c      	ldr	r2, [pc, #48]	; (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013e0:	6413      	str	r3, [r2, #64]	; 0x40
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <HAL_TIM_Base_MspInit+0x4c>)
 80013e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013ea:	60fb      	str	r3, [r7, #12]
 80013ec:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 80013ee:	2200      	movs	r2, #0
 80013f0:	2100      	movs	r1, #0
 80013f2:	202d      	movs	r0, #45	; 0x2d
 80013f4:	f000 fc87 	bl	8001d06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 80013f8:	202d      	movs	r0, #45	; 0x2d
 80013fa:	f000 fca0 	bl	8001d3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80013fe:	bf00      	nop
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40002000 	.word	0x40002000
 800140c:	40023800 	.word	0x40023800

08001410 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b08a      	sub	sp, #40	; 0x28
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001418:	f107 0314 	add.w	r3, r7, #20
 800141c:	2200      	movs	r2, #0
 800141e:	601a      	str	r2, [r3, #0]
 8001420:	605a      	str	r2, [r3, #4]
 8001422:	609a      	str	r2, [r3, #8]
 8001424:	60da      	str	r2, [r3, #12]
 8001426:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a19      	ldr	r2, [pc, #100]	; (8001494 <HAL_UART_MspInit+0x84>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d12c      	bne.n	800148c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
 8001436:	4b18      	ldr	r3, [pc, #96]	; (8001498 <HAL_UART_MspInit+0x88>)
 8001438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143a:	4a17      	ldr	r2, [pc, #92]	; (8001498 <HAL_UART_MspInit+0x88>)
 800143c:	f043 0310 	orr.w	r3, r3, #16
 8001440:	6453      	str	r3, [r2, #68]	; 0x44
 8001442:	4b15      	ldr	r3, [pc, #84]	; (8001498 <HAL_UART_MspInit+0x88>)
 8001444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001446:	f003 0310 	and.w	r3, r3, #16
 800144a:	613b      	str	r3, [r7, #16]
 800144c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800144e:	2300      	movs	r3, #0
 8001450:	60fb      	str	r3, [r7, #12]
 8001452:	4b11      	ldr	r3, [pc, #68]	; (8001498 <HAL_UART_MspInit+0x88>)
 8001454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001456:	4a10      	ldr	r2, [pc, #64]	; (8001498 <HAL_UART_MspInit+0x88>)
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	6313      	str	r3, [r2, #48]	; 0x30
 800145e:	4b0e      	ldr	r3, [pc, #56]	; (8001498 <HAL_UART_MspInit+0x88>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	f003 0301 	and.w	r3, r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800146a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800146e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001470:	2302      	movs	r3, #2
 8001472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001474:	2300      	movs	r3, #0
 8001476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001478:	2303      	movs	r3, #3
 800147a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800147c:	2307      	movs	r3, #7
 800147e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001480:	f107 0314 	add.w	r3, r7, #20
 8001484:	4619      	mov	r1, r3
 8001486:	4805      	ldr	r0, [pc, #20]	; (800149c <HAL_UART_MspInit+0x8c>)
 8001488:	f000 ffe4 	bl	8002454 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800148c:	bf00      	nop
 800148e:	3728      	adds	r7, #40	; 0x28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	40011000 	.word	0x40011000
 8001498:	40023800 	.word	0x40023800
 800149c:	40020000 	.word	0x40020000

080014a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80014a4:	e7fe      	b.n	80014a4 <NMI_Handler+0x4>

080014a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014a6:	b480      	push	{r7}
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80014aa:	e7fe      	b.n	80014aa <HardFault_Handler+0x4>

080014ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80014b0:	e7fe      	b.n	80014b0 <MemManage_Handler+0x4>

080014b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014b2:	b480      	push	{r7}
 80014b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <BusFault_Handler+0x4>

080014b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80014bc:	e7fe      	b.n	80014bc <UsageFault_Handler+0x4>

080014be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80014be:	b480      	push	{r7}
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80014c2:	bf00      	nop
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014d0:	bf00      	nop
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014de:	bf00      	nop
 80014e0:	46bd      	mov	sp, r7
 80014e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e6:	4770      	bx	lr

080014e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014ec:	f000 f8ae 	bl	800164c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014f0:	bf00      	nop
 80014f2:	bd80      	pop	{r7, pc}

080014f4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 80014f8:	4802      	ldr	r0, [pc, #8]	; (8001504 <DMA1_Stream3_IRQHandler+0x10>)
 80014fa:	f000 fd41 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	20000184 	.word	0x20000184

08001508 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800150c:	4802      	ldr	r0, [pc, #8]	; (8001518 <DMA1_Stream4_IRQHandler+0x10>)
 800150e:	f000 fd37 	bl	8001f80 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001512:	bf00      	nop
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	20000124 	.word	0x20000124

0800151c <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8001520:	4802      	ldr	r0, [pc, #8]	; (800152c <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8001522:	f003 fe59 	bl	80051d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8001526:	bf00      	nop
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200001e4 	.word	0x200001e4

08001530 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001534:	4b06      	ldr	r3, [pc, #24]	; (8001550 <SystemInit+0x20>)
 8001536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800153a:	4a05      	ldr	r2, [pc, #20]	; (8001550 <SystemInit+0x20>)
 800153c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001540:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001554:	f8df d034 	ldr.w	sp, [pc, #52]	; 800158c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001558:	480d      	ldr	r0, [pc, #52]	; (8001590 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800155a:	490e      	ldr	r1, [pc, #56]	; (8001594 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800155c:	4a0e      	ldr	r2, [pc, #56]	; (8001598 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800155e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001560:	e002      	b.n	8001568 <LoopCopyDataInit>

08001562 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001562:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001564:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001566:	3304      	adds	r3, #4

08001568 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001568:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800156a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800156c:	d3f9      	bcc.n	8001562 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001570:	4c0b      	ldr	r4, [pc, #44]	; (80015a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001572:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001574:	e001      	b.n	800157a <LoopFillZerobss>

08001576 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001576:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001578:	3204      	adds	r2, #4

0800157a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800157a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800157c:	d3fb      	bcc.n	8001576 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800157e:	f7ff ffd7 	bl	8001530 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001582:	f004 fad7 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001586:	f7ff fac3 	bl	8000b10 <main>
  bx  lr    
 800158a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800158c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001590:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001594:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001598:	08005bc4 	.word	0x08005bc4
  ldr r2, =_sbss
 800159c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80015a0:	200003a0 	.word	0x200003a0

080015a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015a4:	e7fe      	b.n	80015a4 <ADC_IRQHandler>
	...

080015a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015ac:	4b0e      	ldr	r3, [pc, #56]	; (80015e8 <HAL_Init+0x40>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a0d      	ldr	r2, [pc, #52]	; (80015e8 <HAL_Init+0x40>)
 80015b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015b8:	4b0b      	ldr	r3, [pc, #44]	; (80015e8 <HAL_Init+0x40>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a0a      	ldr	r2, [pc, #40]	; (80015e8 <HAL_Init+0x40>)
 80015be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015c4:	4b08      	ldr	r3, [pc, #32]	; (80015e8 <HAL_Init+0x40>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a07      	ldr	r2, [pc, #28]	; (80015e8 <HAL_Init+0x40>)
 80015ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015d0:	2003      	movs	r0, #3
 80015d2:	f000 fb8d 	bl	8001cf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 f808 	bl	80015ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015dc:	f7ff fd40 	bl	8001060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015e0:	2300      	movs	r3, #0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	40023c00 	.word	0x40023c00

080015ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b082      	sub	sp, #8
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_InitTick+0x54>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4b12      	ldr	r3, [pc, #72]	; (8001644 <HAL_InitTick+0x58>)
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001602:	fbb3 f3f1 	udiv	r3, r3, r1
 8001606:	fbb2 f3f3 	udiv	r3, r2, r3
 800160a:	4618      	mov	r0, r3
 800160c:	f000 fba5 	bl	8001d5a <HAL_SYSTICK_Config>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001616:	2301      	movs	r3, #1
 8001618:	e00e      	b.n	8001638 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2b0f      	cmp	r3, #15
 800161e:	d80a      	bhi.n	8001636 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001620:	2200      	movs	r2, #0
 8001622:	6879      	ldr	r1, [r7, #4]
 8001624:	f04f 30ff 	mov.w	r0, #4294967295
 8001628:	f000 fb6d 	bl	8001d06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800162c:	4a06      	ldr	r2, [pc, #24]	; (8001648 <HAL_InitTick+0x5c>)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	e000      	b.n	8001638 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
}
 8001638:	4618      	mov	r0, r3
 800163a:	3708      	adds	r7, #8
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	20000004 	.word	0x20000004
 8001644:	2000000c 	.word	0x2000000c
 8001648:	20000008 	.word	0x20000008

0800164c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <HAL_IncTick+0x20>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	461a      	mov	r2, r3
 8001656:	4b06      	ldr	r3, [pc, #24]	; (8001670 <HAL_IncTick+0x24>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4413      	add	r3, r2
 800165c:	4a04      	ldr	r2, [pc, #16]	; (8001670 <HAL_IncTick+0x24>)
 800165e:	6013      	str	r3, [r2, #0]
}
 8001660:	bf00      	nop
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	2000000c 	.word	0x2000000c
 8001670:	2000039c 	.word	0x2000039c

08001674 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001674:	b480      	push	{r7}
 8001676:	af00      	add	r7, sp, #0
  return uwTick;
 8001678:	4b03      	ldr	r3, [pc, #12]	; (8001688 <HAL_GetTick+0x14>)
 800167a:	681b      	ldr	r3, [r3, #0]
}
 800167c:	4618      	mov	r0, r3
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	2000039c 	.word	0x2000039c

0800168c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001694:	2300      	movs	r3, #0
 8001696:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d101      	bne.n	80016a2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e033      	b.n	800170a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d109      	bne.n	80016be <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fd00 	bl	80010b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2200      	movs	r2, #0
 80016b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c2:	f003 0310 	and.w	r3, r3, #16
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d118      	bne.n	80016fc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ce:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d2:	f023 0302 	bic.w	r3, r3, #2
 80016d6:	f043 0202 	orr.w	r2, r3, #2
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016de:	6878      	ldr	r0, [r7, #4]
 80016e0:	f000 f93a 	bl	8001958 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	2200      	movs	r2, #0
 80016e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f023 0303 	bic.w	r3, r3, #3
 80016f2:	f043 0201 	orr.w	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	; 0x40
 80016fa:	e001      	b.n	8001700 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2200      	movs	r2, #0
 8001704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001708:	7bfb      	ldrb	r3, [r7, #15]
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
	...

08001714 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001714:	b480      	push	{r7}
 8001716:	b085      	sub	sp, #20
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800171e:	2300      	movs	r3, #0
 8001720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001728:	2b01      	cmp	r3, #1
 800172a:	d101      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1c>
 800172c:	2302      	movs	r3, #2
 800172e:	e105      	b.n	800193c <HAL_ADC_ConfigChannel+0x228>
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2201      	movs	r2, #1
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2b09      	cmp	r3, #9
 800173e:	d925      	bls.n	800178c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	68d9      	ldr	r1, [r3, #12]
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	b29b      	uxth	r3, r3
 800174c:	461a      	mov	r2, r3
 800174e:	4613      	mov	r3, r2
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	3b1e      	subs	r3, #30
 8001756:	2207      	movs	r2, #7
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	43da      	mvns	r2, r3
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	400a      	ands	r2, r1
 8001764:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	68d9      	ldr	r1, [r3, #12]
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	683b      	ldr	r3, [r7, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	b29b      	uxth	r3, r3
 8001776:	4618      	mov	r0, r3
 8001778:	4603      	mov	r3, r0
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4403      	add	r3, r0
 800177e:	3b1e      	subs	r3, #30
 8001780:	409a      	lsls	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	60da      	str	r2, [r3, #12]
 800178a:	e022      	b.n	80017d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	6919      	ldr	r1, [r3, #16]
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	b29b      	uxth	r3, r3
 8001798:	461a      	mov	r2, r3
 800179a:	4613      	mov	r3, r2
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	4413      	add	r3, r2
 80017a0:	2207      	movs	r2, #7
 80017a2:	fa02 f303 	lsl.w	r3, r2, r3
 80017a6:	43da      	mvns	r2, r3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	400a      	ands	r2, r1
 80017ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6919      	ldr	r1, [r3, #16]
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	689a      	ldr	r2, [r3, #8]
 80017ba:	683b      	ldr	r3, [r7, #0]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	b29b      	uxth	r3, r3
 80017c0:	4618      	mov	r0, r3
 80017c2:	4603      	mov	r3, r0
 80017c4:	005b      	lsls	r3, r3, #1
 80017c6:	4403      	add	r3, r0
 80017c8:	409a      	lsls	r2, r3
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b06      	cmp	r3, #6
 80017d8:	d824      	bhi.n	8001824 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	685a      	ldr	r2, [r3, #4]
 80017e4:	4613      	mov	r3, r2
 80017e6:	009b      	lsls	r3, r3, #2
 80017e8:	4413      	add	r3, r2
 80017ea:	3b05      	subs	r3, #5
 80017ec:	221f      	movs	r2, #31
 80017ee:	fa02 f303 	lsl.w	r3, r2, r3
 80017f2:	43da      	mvns	r2, r3
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	400a      	ands	r2, r1
 80017fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	b29b      	uxth	r3, r3
 8001808:	4618      	mov	r0, r3
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685a      	ldr	r2, [r3, #4]
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	3b05      	subs	r3, #5
 8001816:	fa00 f203 	lsl.w	r2, r0, r3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	635a      	str	r2, [r3, #52]	; 0x34
 8001822:	e04c      	b.n	80018be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	2b0c      	cmp	r3, #12
 800182a:	d824      	bhi.n	8001876 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	685a      	ldr	r2, [r3, #4]
 8001836:	4613      	mov	r3, r2
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	4413      	add	r3, r2
 800183c:	3b23      	subs	r3, #35	; 0x23
 800183e:	221f      	movs	r2, #31
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	43da      	mvns	r2, r3
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	400a      	ands	r2, r1
 800184c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	b29b      	uxth	r3, r3
 800185a:	4618      	mov	r0, r3
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685a      	ldr	r2, [r3, #4]
 8001860:	4613      	mov	r3, r2
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	4413      	add	r3, r2
 8001866:	3b23      	subs	r3, #35	; 0x23
 8001868:	fa00 f203 	lsl.w	r2, r0, r3
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	430a      	orrs	r2, r1
 8001872:	631a      	str	r2, [r3, #48]	; 0x30
 8001874:	e023      	b.n	80018be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	3b41      	subs	r3, #65	; 0x41
 8001888:	221f      	movs	r2, #31
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	400a      	ands	r2, r1
 8001896:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	4618      	mov	r0, r3
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	685a      	ldr	r2, [r3, #4]
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	3b41      	subs	r3, #65	; 0x41
 80018b2:	fa00 f203 	lsl.w	r2, r0, r3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	430a      	orrs	r2, r1
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018be:	4b22      	ldr	r3, [pc, #136]	; (8001948 <HAL_ADC_ConfigChannel+0x234>)
 80018c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a21      	ldr	r2, [pc, #132]	; (800194c <HAL_ADC_ConfigChannel+0x238>)
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d109      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1cc>
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2b12      	cmp	r3, #18
 80018d2:	d105      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a19      	ldr	r2, [pc, #100]	; (800194c <HAL_ADC_ConfigChannel+0x238>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d123      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x21e>
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	2b10      	cmp	r3, #16
 80018f0:	d003      	beq.n	80018fa <HAL_ADC_ConfigChannel+0x1e6>
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2b11      	cmp	r3, #17
 80018f8:	d11b      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	2b10      	cmp	r3, #16
 800190c:	d111      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800190e:	4b10      	ldr	r3, [pc, #64]	; (8001950 <HAL_ADC_ConfigChannel+0x23c>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a10      	ldr	r2, [pc, #64]	; (8001954 <HAL_ADC_ConfigChannel+0x240>)
 8001914:	fba2 2303 	umull	r2, r3, r2, r3
 8001918:	0c9a      	lsrs	r2, r3, #18
 800191a:	4613      	mov	r3, r2
 800191c:	009b      	lsls	r3, r3, #2
 800191e:	4413      	add	r3, r2
 8001920:	005b      	lsls	r3, r3, #1
 8001922:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001924:	e002      	b.n	800192c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	3b01      	subs	r3, #1
 800192a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	2b00      	cmp	r3, #0
 8001930:	d1f9      	bne.n	8001926 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	4618      	mov	r0, r3
 800193e:	3714      	adds	r7, #20
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40012300 	.word	0x40012300
 800194c:	40012000 	.word	0x40012000
 8001950:	20000004 	.word	0x20000004
 8001954:	431bde83 	.word	0x431bde83

08001958 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001960:	4b79      	ldr	r3, [pc, #484]	; (8001b48 <ADC_Init+0x1f0>)
 8001962:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	685a      	ldr	r2, [r3, #4]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	431a      	orrs	r2, r3
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	685a      	ldr	r2, [r3, #4]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800198c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6859      	ldr	r1, [r3, #4]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	021a      	lsls	r2, r3, #8
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	430a      	orrs	r2, r1
 80019a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80019b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6859      	ldr	r1, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	689a      	ldr	r2, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	689a      	ldr	r2, [r3, #8]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	6899      	ldr	r1, [r3, #8]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	68da      	ldr	r2, [r3, #12]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	430a      	orrs	r2, r1
 80019e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ea:	4a58      	ldr	r2, [pc, #352]	; (8001b4c <ADC_Init+0x1f4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d022      	beq.n	8001a36 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	689a      	ldr	r2, [r3, #8]
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6899      	ldr	r1, [r3, #8]
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	430a      	orrs	r2, r1
 8001a10:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689a      	ldr	r2, [r3, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a20:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	6899      	ldr	r1, [r3, #8]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	609a      	str	r2, [r3, #8]
 8001a34:	e00f      	b.n	8001a56 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a44:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689a      	ldr	r2, [r3, #8]
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a54:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	f022 0202 	bic.w	r2, r2, #2
 8001a64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6899      	ldr	r1, [r3, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	7e1b      	ldrb	r3, [r3, #24]
 8001a70:	005a      	lsls	r2, r3, #1
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d01b      	beq.n	8001abc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685a      	ldr	r2, [r3, #4]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a92:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001aa2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	6859      	ldr	r1, [r3, #4]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aae:	3b01      	subs	r3, #1
 8001ab0:	035a      	lsls	r2, r3, #13
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	430a      	orrs	r2, r1
 8001ab8:	605a      	str	r2, [r3, #4]
 8001aba:	e007      	b.n	8001acc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	685a      	ldr	r2, [r3, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001ada:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	69db      	ldr	r3, [r3, #28]
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	051a      	lsls	r2, r3, #20
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	430a      	orrs	r2, r1
 8001af0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	689a      	ldr	r2, [r3, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001b00:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	6899      	ldr	r1, [r3, #8]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001b0e:	025a      	lsls	r2, r3, #9
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	430a      	orrs	r2, r1
 8001b16:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001b26:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	6899      	ldr	r1, [r3, #8]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	695b      	ldr	r3, [r3, #20]
 8001b32:	029a      	lsls	r2, r3, #10
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	609a      	str	r2, [r3, #8]
}
 8001b3c:	bf00      	nop
 8001b3e:	3714      	adds	r7, #20
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr
 8001b48:	40012300 	.word	0x40012300
 8001b4c:	0f000001 	.word	0x0f000001

08001b50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f003 0307 	and.w	r3, r3, #7
 8001b5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b62:	68db      	ldr	r3, [r3, #12]
 8001b64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b66:	68ba      	ldr	r2, [r7, #8]
 8001b68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b82:	4a04      	ldr	r2, [pc, #16]	; (8001b94 <__NVIC_SetPriorityGrouping+0x44>)
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	60d3      	str	r3, [r2, #12]
}
 8001b88:	bf00      	nop
 8001b8a:	3714      	adds	r7, #20
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b92:	4770      	bx	lr
 8001b94:	e000ed00 	.word	0xe000ed00

08001b98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b9c:	4b04      	ldr	r3, [pc, #16]	; (8001bb0 <__NVIC_GetPriorityGrouping+0x18>)
 8001b9e:	68db      	ldr	r3, [r3, #12]
 8001ba0:	0a1b      	lsrs	r3, r3, #8
 8001ba2:	f003 0307 	and.w	r3, r3, #7
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bae:	4770      	bx	lr
 8001bb0:	e000ed00 	.word	0xe000ed00

08001bb4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	db0b      	blt.n	8001bde <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 021f 	and.w	r2, r3, #31
 8001bcc:	4907      	ldr	r1, [pc, #28]	; (8001bec <__NVIC_EnableIRQ+0x38>)
 8001bce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd2:	095b      	lsrs	r3, r3, #5
 8001bd4:	2001      	movs	r0, #1
 8001bd6:	fa00 f202 	lsl.w	r2, r0, r2
 8001bda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001bde:	bf00      	nop
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	e000e100 	.word	0xe000e100

08001bf0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001bfc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	db0a      	blt.n	8001c1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	490c      	ldr	r1, [pc, #48]	; (8001c3c <__NVIC_SetPriority+0x4c>)
 8001c0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c0e:	0112      	lsls	r2, r2, #4
 8001c10:	b2d2      	uxtb	r2, r2
 8001c12:	440b      	add	r3, r1
 8001c14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c18:	e00a      	b.n	8001c30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	b2da      	uxtb	r2, r3
 8001c1e:	4908      	ldr	r1, [pc, #32]	; (8001c40 <__NVIC_SetPriority+0x50>)
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	3b04      	subs	r3, #4
 8001c28:	0112      	lsls	r2, r2, #4
 8001c2a:	b2d2      	uxtb	r2, r2
 8001c2c:	440b      	add	r3, r1
 8001c2e:	761a      	strb	r2, [r3, #24]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr
 8001c3c:	e000e100 	.word	0xe000e100
 8001c40:	e000ed00 	.word	0xe000ed00

08001c44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b089      	sub	sp, #36	; 0x24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	f003 0307 	and.w	r3, r3, #7
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	f1c3 0307 	rsb	r3, r3, #7
 8001c5e:	2b04      	cmp	r3, #4
 8001c60:	bf28      	it	cs
 8001c62:	2304      	movcs	r3, #4
 8001c64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	3304      	adds	r3, #4
 8001c6a:	2b06      	cmp	r3, #6
 8001c6c:	d902      	bls.n	8001c74 <NVIC_EncodePriority+0x30>
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	3b03      	subs	r3, #3
 8001c72:	e000      	b.n	8001c76 <NVIC_EncodePriority+0x32>
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c78:	f04f 32ff 	mov.w	r2, #4294967295
 8001c7c:	69bb      	ldr	r3, [r7, #24]
 8001c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c82:	43da      	mvns	r2, r3
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	401a      	ands	r2, r3
 8001c88:	697b      	ldr	r3, [r7, #20]
 8001c8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	43d9      	mvns	r1, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c9c:	4313      	orrs	r3, r2
         );
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3724      	adds	r7, #36	; 0x24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca8:	4770      	bx	lr
	...

08001cac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	3b01      	subs	r3, #1
 8001cb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cbc:	d301      	bcc.n	8001cc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e00f      	b.n	8001ce2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cc2:	4a0a      	ldr	r2, [pc, #40]	; (8001cec <SysTick_Config+0x40>)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cca:	210f      	movs	r1, #15
 8001ccc:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd0:	f7ff ff8e 	bl	8001bf0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001cd4:	4b05      	ldr	r3, [pc, #20]	; (8001cec <SysTick_Config+0x40>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001cda:	4b04      	ldr	r3, [pc, #16]	; (8001cec <SysTick_Config+0x40>)
 8001cdc:	2207      	movs	r2, #7
 8001cde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ce0:	2300      	movs	r3, #0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
 8001cea:	bf00      	nop
 8001cec:	e000e010 	.word	0xe000e010

08001cf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001cf8:	6878      	ldr	r0, [r7, #4]
 8001cfa:	f7ff ff29 	bl	8001b50 <__NVIC_SetPriorityGrouping>
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d06:	b580      	push	{r7, lr}
 8001d08:	b086      	sub	sp, #24
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	60b9      	str	r1, [r7, #8]
 8001d10:	607a      	str	r2, [r7, #4]
 8001d12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d18:	f7ff ff3e 	bl	8001b98 <__NVIC_GetPriorityGrouping>
 8001d1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	68b9      	ldr	r1, [r7, #8]
 8001d22:	6978      	ldr	r0, [r7, #20]
 8001d24:	f7ff ff8e 	bl	8001c44 <NVIC_EncodePriority>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d2e:	4611      	mov	r1, r2
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff ff5d 	bl	8001bf0 <__NVIC_SetPriority>
}
 8001d36:	bf00      	nop
 8001d38:	3718      	adds	r7, #24
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d3e:	b580      	push	{r7, lr}
 8001d40:	b082      	sub	sp, #8
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	4603      	mov	r3, r0
 8001d46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff31 	bl	8001bb4 <__NVIC_EnableIRQ>
}
 8001d52:	bf00      	nop
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b082      	sub	sp, #8
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f7ff ffa2 	bl	8001cac <SysTick_Config>
 8001d68:	4603      	mov	r3, r0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	b086      	sub	sp, #24
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fc78 	bl	8001674 <HAL_GetTick>
 8001d84:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d101      	bne.n	8001d90 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	e099      	b.n	8001ec4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2202      	movs	r2, #2
 8001d94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f022 0201 	bic.w	r2, r2, #1
 8001dae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001db0:	e00f      	b.n	8001dd2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001db2:	f7ff fc5f 	bl	8001674 <HAL_GetTick>
 8001db6:	4602      	mov	r2, r0
 8001db8:	693b      	ldr	r3, [r7, #16]
 8001dba:	1ad3      	subs	r3, r2, r3
 8001dbc:	2b05      	cmp	r3, #5
 8001dbe:	d908      	bls.n	8001dd2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	2220      	movs	r2, #32
 8001dc4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2203      	movs	r2, #3
 8001dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e078      	b.n	8001ec4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0301 	and.w	r3, r3, #1
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1e8      	bne.n	8001db2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4b38      	ldr	r3, [pc, #224]	; (8001ecc <HAL_DMA_Init+0x158>)
 8001dec:	4013      	ands	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685a      	ldr	r2, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001dfe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e1e:	697a      	ldr	r2, [r7, #20]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e28:	2b04      	cmp	r3, #4
 8001e2a:	d107      	bne.n	8001e3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e34:	4313      	orrs	r3, r2
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	4313      	orrs	r3, r2
 8001e3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f023 0307 	bic.w	r3, r3, #7
 8001e52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e58:	697a      	ldr	r2, [r7, #20]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e62:	2b04      	cmp	r3, #4
 8001e64:	d117      	bne.n	8001e96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00e      	beq.n	8001e96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e78:	6878      	ldr	r0, [r7, #4]
 8001e7a:	f000 fa6f 	bl	800235c <DMA_CheckFifoParam>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2240      	movs	r2, #64	; 0x40
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e92:	2301      	movs	r3, #1
 8001e94:	e016      	b.n	8001ec4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	697a      	ldr	r2, [r7, #20]
 8001e9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 fa26 	bl	80022f0 <DMA_CalcBaseAndBitshift>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	223f      	movs	r2, #63	; 0x3f
 8001eae:	409a      	lsls	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	3718      	adds	r7, #24
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	f010803f 	.word	0xf010803f

08001ed0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
 8001edc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ede:	2300      	movs	r3, #0
 8001ee0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_DMA_Start_IT+0x26>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e040      	b.n	8001f78 <HAL_DMA_Start_IT+0xa8>
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f04:	b2db      	uxtb	r3, r3
 8001f06:	2b01      	cmp	r3, #1
 8001f08:	d12f      	bne.n	8001f6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	2200      	movs	r2, #0
 8001f16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	68b9      	ldr	r1, [r7, #8]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f9b8 	bl	8002294 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	223f      	movs	r2, #63	; 0x3f
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f042 0216 	orr.w	r2, r2, #22
 8001f3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d007      	beq.n	8001f58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681a      	ldr	r2, [r3, #0]
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f042 0208 	orr.w	r2, r2, #8
 8001f56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f042 0201 	orr.w	r2, r2, #1
 8001f66:	601a      	str	r2, [r3, #0]
 8001f68:	e005      	b.n	8001f76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001f72:	2302      	movs	r3, #2
 8001f74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001f76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3718      	adds	r7, #24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b086      	sub	sp, #24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001f8c:	4b8e      	ldr	r3, [pc, #568]	; (80021c8 <HAL_DMA_IRQHandler+0x248>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a8e      	ldr	r2, [pc, #568]	; (80021cc <HAL_DMA_IRQHandler+0x24c>)
 8001f92:	fba2 2303 	umull	r2, r3, r2, r3
 8001f96:	0a9b      	lsrs	r3, r3, #10
 8001f98:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001fa0:	693b      	ldr	r3, [r7, #16]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001faa:	2208      	movs	r2, #8
 8001fac:	409a      	lsls	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d01a      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d013      	beq.n	8001fec <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0204 	bic.w	r2, r2, #4
 8001fd2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd8:	2208      	movs	r2, #8
 8001fda:	409a      	lsls	r2, r3
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fe4:	f043 0201 	orr.w	r2, r3, #1
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	409a      	lsls	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	4013      	ands	r3, r2
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d012      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	695b      	ldr	r3, [r3, #20]
 8002002:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00b      	beq.n	8002022 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800200e:	2201      	movs	r2, #1
 8002010:	409a      	lsls	r2, r3
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800201a:	f043 0202 	orr.w	r2, r3, #2
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002026:	2204      	movs	r2, #4
 8002028:	409a      	lsls	r2, r3
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	4013      	ands	r3, r2
 800202e:	2b00      	cmp	r3, #0
 8002030:	d012      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00b      	beq.n	8002058 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2204      	movs	r2, #4
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0204 	orr.w	r2, r3, #4
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2210      	movs	r2, #16
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d043      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0308 	and.w	r3, r3, #8
 8002072:	2b00      	cmp	r3, #0
 8002074:	d03c      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2210      	movs	r2, #16
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d018      	beq.n	80020c2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800209a:	2b00      	cmp	r3, #0
 800209c:	d108      	bne.n	80020b0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d024      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	4798      	blx	r3
 80020ae:	e01f      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	4798      	blx	r3
 80020c0:	e016      	b.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d107      	bne.n	80020e0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681a      	ldr	r2, [r3, #0]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f022 0208 	bic.w	r2, r2, #8
 80020de:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d003      	beq.n	80020f0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020f4:	2220      	movs	r2, #32
 80020f6:	409a      	lsls	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	4013      	ands	r3, r2
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 808f 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f003 0310 	and.w	r3, r3, #16
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 8087 	beq.w	8002220 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002116:	2220      	movs	r2, #32
 8002118:	409a      	lsls	r2, r3
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002124:	b2db      	uxtb	r3, r3
 8002126:	2b05      	cmp	r3, #5
 8002128:	d136      	bne.n	8002198 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f022 0216 	bic.w	r2, r2, #22
 8002138:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	695a      	ldr	r2, [r3, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002148:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	2b00      	cmp	r3, #0
 8002150:	d103      	bne.n	800215a <HAL_DMA_IRQHandler+0x1da>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002156:	2b00      	cmp	r3, #0
 8002158:	d007      	beq.n	800216a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	681a      	ldr	r2, [r3, #0]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f022 0208 	bic.w	r2, r2, #8
 8002168:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800216e:	223f      	movs	r2, #63	; 0x3f
 8002170:	409a      	lsls	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2201      	movs	r2, #1
 800217a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	2200      	movs	r2, #0
 8002182:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800218a:	2b00      	cmp	r3, #0
 800218c:	d07e      	beq.n	800228c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	4798      	blx	r3
        }
        return;
 8002196:	e079      	b.n	800228c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d01d      	beq.n	80021e2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d10d      	bne.n	80021d0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d031      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	4798      	blx	r3
 80021c4:	e02c      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
 80021c6:	bf00      	nop
 80021c8:	20000004 	.word	0x20000004
 80021cc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d023      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021dc:	6878      	ldr	r0, [r7, #4]
 80021de:	4798      	blx	r3
 80021e0:	e01e      	b.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d10f      	bne.n	8002210 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f022 0210 	bic.w	r2, r2, #16
 80021fe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2201      	movs	r2, #1
 8002204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2200      	movs	r2, #0
 800220c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002214:	2b00      	cmp	r3, #0
 8002216:	d003      	beq.n	8002220 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800221c:	6878      	ldr	r0, [r7, #4]
 800221e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002224:	2b00      	cmp	r3, #0
 8002226:	d032      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222c:	f003 0301 	and.w	r3, r3, #1
 8002230:	2b00      	cmp	r3, #0
 8002232:	d022      	beq.n	800227a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2205      	movs	r2, #5
 8002238:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0201 	bic.w	r2, r2, #1
 800224a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	3301      	adds	r3, #1
 8002250:	60bb      	str	r3, [r7, #8]
 8002252:	697a      	ldr	r2, [r7, #20]
 8002254:	429a      	cmp	r2, r3
 8002256:	d307      	bcc.n	8002268 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f2      	bne.n	800224c <HAL_DMA_IRQHandler+0x2cc>
 8002266:	e000      	b.n	800226a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002268:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2201      	movs	r2, #1
 800226e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2200      	movs	r2, #0
 8002276:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227e:	2b00      	cmp	r3, #0
 8002280:	d005      	beq.n	800228e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	4798      	blx	r3
 800228a:	e000      	b.n	800228e <HAL_DMA_IRQHandler+0x30e>
        return;
 800228c:	bf00      	nop
    }
  }
}
 800228e:	3718      	adds	r7, #24
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
 80022a0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681a      	ldr	r2, [r3, #0]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022b0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	683a      	ldr	r2, [r7, #0]
 80022b8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	2b40      	cmp	r3, #64	; 0x40
 80022c0:	d108      	bne.n	80022d4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	687a      	ldr	r2, [r7, #4]
 80022c8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	68ba      	ldr	r2, [r7, #8]
 80022d0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80022d2:	e007      	b.n	80022e4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	60da      	str	r2, [r3, #12]
}
 80022e4:	bf00      	nop
 80022e6:	3714      	adds	r7, #20
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr

080022f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022f0:	b480      	push	{r7}
 80022f2:	b085      	sub	sp, #20
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	3b10      	subs	r3, #16
 8002300:	4a14      	ldr	r2, [pc, #80]	; (8002354 <DMA_CalcBaseAndBitshift+0x64>)
 8002302:	fba2 2303 	umull	r2, r3, r2, r3
 8002306:	091b      	lsrs	r3, r3, #4
 8002308:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <DMA_CalcBaseAndBitshift+0x68>)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	4413      	add	r3, r2
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	461a      	mov	r2, r3
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2b03      	cmp	r3, #3
 800231c:	d909      	bls.n	8002332 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002326:	f023 0303 	bic.w	r3, r3, #3
 800232a:	1d1a      	adds	r2, r3, #4
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	659a      	str	r2, [r3, #88]	; 0x58
 8002330:	e007      	b.n	8002342 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800233a:	f023 0303 	bic.w	r3, r3, #3
 800233e:	687a      	ldr	r2, [r7, #4]
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002346:	4618      	mov	r0, r3
 8002348:	3714      	adds	r7, #20
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	aaaaaaab 	.word	0xaaaaaaab
 8002358:	08005bac 	.word	0x08005bac

0800235c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002364:	2300      	movs	r3, #0
 8002366:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	699b      	ldr	r3, [r3, #24]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d11f      	bne.n	80023b6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d856      	bhi.n	800242a <DMA_CheckFifoParam+0xce>
 800237c:	a201      	add	r2, pc, #4	; (adr r2, 8002384 <DMA_CheckFifoParam+0x28>)
 800237e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002382:	bf00      	nop
 8002384:	08002395 	.word	0x08002395
 8002388:	080023a7 	.word	0x080023a7
 800238c:	08002395 	.word	0x08002395
 8002390:	0800242b 	.word	0x0800242b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002398:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d046      	beq.n	800242e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023a4:	e043      	b.n	800242e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023aa:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023ae:	d140      	bne.n	8002432 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e03d      	b.n	8002432 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	699b      	ldr	r3, [r3, #24]
 80023ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023be:	d121      	bne.n	8002404 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2b03      	cmp	r3, #3
 80023c4:	d837      	bhi.n	8002436 <DMA_CheckFifoParam+0xda>
 80023c6:	a201      	add	r2, pc, #4	; (adr r2, 80023cc <DMA_CheckFifoParam+0x70>)
 80023c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023e3 	.word	0x080023e3
 80023d4:	080023dd 	.word	0x080023dd
 80023d8:	080023f5 	.word	0x080023f5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023dc:	2301      	movs	r3, #1
 80023de:	73fb      	strb	r3, [r7, #15]
      break;
 80023e0:	e030      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d025      	beq.n	800243a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f2:	e022      	b.n	800243a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023fc:	d11f      	bne.n	800243e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002402:	e01c      	b.n	800243e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	2b02      	cmp	r3, #2
 8002408:	d903      	bls.n	8002412 <DMA_CheckFifoParam+0xb6>
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	2b03      	cmp	r3, #3
 800240e:	d003      	beq.n	8002418 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002410:	e018      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
      break;
 8002416:	e015      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800241c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
      break;
 8002428:	e00b      	b.n	8002442 <DMA_CheckFifoParam+0xe6>
      break;
 800242a:	bf00      	nop
 800242c:	e00a      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 800242e:	bf00      	nop
 8002430:	e008      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002432:	bf00      	nop
 8002434:	e006      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002436:	bf00      	nop
 8002438:	e004      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;   
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
    }
  } 
  
  return status; 
 8002444:	7bfb      	ldrb	r3, [r7, #15]
}
 8002446:	4618      	mov	r0, r3
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop

08002454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002462:	2300      	movs	r3, #0
 8002464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002466:	2300      	movs	r3, #0
 8002468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800246a:	2300      	movs	r3, #0
 800246c:	61fb      	str	r3, [r7, #28]
 800246e:	e16b      	b.n	8002748 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002470:	2201      	movs	r2, #1
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	697a      	ldr	r2, [r7, #20]
 8002480:	4013      	ands	r3, r2
 8002482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002484:	693a      	ldr	r2, [r7, #16]
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	f040 815a 	bne.w	8002742 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f003 0303 	and.w	r3, r3, #3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d005      	beq.n	80024a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024a2:	2b02      	cmp	r3, #2
 80024a4:	d130      	bne.n	8002508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	2203      	movs	r2, #3
 80024b2:	fa02 f303 	lsl.w	r3, r2, r3
 80024b6:	43db      	mvns	r3, r3
 80024b8:	69ba      	ldr	r2, [r7, #24]
 80024ba:	4013      	ands	r3, r2
 80024bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	69fb      	ldr	r3, [r7, #28]
 80024c4:	005b      	lsls	r3, r3, #1
 80024c6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ca:	69ba      	ldr	r2, [r7, #24]
 80024cc:	4313      	orrs	r3, r2
 80024ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	69ba      	ldr	r2, [r7, #24]
 80024e8:	4013      	ands	r3, r2
 80024ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	091b      	lsrs	r3, r3, #4
 80024f2:	f003 0201 	and.w	r2, r3, #1
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	fa02 f303 	lsl.w	r3, r2, r3
 80024fc:	69ba      	ldr	r2, [r7, #24]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	69ba      	ldr	r2, [r7, #24]
 8002506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	f003 0303 	and.w	r3, r3, #3
 8002510:	2b03      	cmp	r3, #3
 8002512:	d017      	beq.n	8002544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800251a:	69fb      	ldr	r3, [r7, #28]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	2203      	movs	r2, #3
 8002520:	fa02 f303 	lsl.w	r3, r2, r3
 8002524:	43db      	mvns	r3, r3
 8002526:	69ba      	ldr	r2, [r7, #24]
 8002528:	4013      	ands	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	005b      	lsls	r3, r3, #1
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f003 0303 	and.w	r3, r3, #3
 800254c:	2b02      	cmp	r3, #2
 800254e:	d123      	bne.n	8002598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	08da      	lsrs	r2, r3, #3
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	3208      	adds	r2, #8
 8002558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	220f      	movs	r2, #15
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	691a      	ldr	r2, [r3, #16]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	fa02 f303 	lsl.w	r3, r2, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4313      	orrs	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	08da      	lsrs	r2, r3, #3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	3208      	adds	r2, #8
 8002592:	69b9      	ldr	r1, [r7, #24]
 8002594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800259e:	69fb      	ldr	r3, [r7, #28]
 80025a0:	005b      	lsls	r3, r3, #1
 80025a2:	2203      	movs	r2, #3
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0203 	and.w	r2, r3, #3
 80025b8:	69fb      	ldr	r3, [r7, #28]
 80025ba:	005b      	lsls	r3, r3, #1
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 80b4 	beq.w	8002742 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	4b60      	ldr	r3, [pc, #384]	; (8002760 <HAL_GPIO_Init+0x30c>)
 80025e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025e2:	4a5f      	ldr	r2, [pc, #380]	; (8002760 <HAL_GPIO_Init+0x30c>)
 80025e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025e8:	6453      	str	r3, [r2, #68]	; 0x44
 80025ea:	4b5d      	ldr	r3, [pc, #372]	; (8002760 <HAL_GPIO_Init+0x30c>)
 80025ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025f2:	60fb      	str	r3, [r7, #12]
 80025f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025f6:	4a5b      	ldr	r2, [pc, #364]	; (8002764 <HAL_GPIO_Init+0x310>)
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	089b      	lsrs	r3, r3, #2
 80025fc:	3302      	adds	r3, #2
 80025fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	f003 0303 	and.w	r3, r3, #3
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	220f      	movs	r2, #15
 800260e:	fa02 f303 	lsl.w	r3, r2, r3
 8002612:	43db      	mvns	r3, r3
 8002614:	69ba      	ldr	r2, [r7, #24]
 8002616:	4013      	ands	r3, r2
 8002618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_GPIO_Init+0x314>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d02b      	beq.n	800267a <HAL_GPIO_Init+0x226>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	4a51      	ldr	r2, [pc, #324]	; (800276c <HAL_GPIO_Init+0x318>)
 8002626:	4293      	cmp	r3, r2
 8002628:	d025      	beq.n	8002676 <HAL_GPIO_Init+0x222>
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a50      	ldr	r2, [pc, #320]	; (8002770 <HAL_GPIO_Init+0x31c>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d01f      	beq.n	8002672 <HAL_GPIO_Init+0x21e>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a4f      	ldr	r2, [pc, #316]	; (8002774 <HAL_GPIO_Init+0x320>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d019      	beq.n	800266e <HAL_GPIO_Init+0x21a>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a4e      	ldr	r2, [pc, #312]	; (8002778 <HAL_GPIO_Init+0x324>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d013      	beq.n	800266a <HAL_GPIO_Init+0x216>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a4d      	ldr	r2, [pc, #308]	; (800277c <HAL_GPIO_Init+0x328>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d00d      	beq.n	8002666 <HAL_GPIO_Init+0x212>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a4c      	ldr	r2, [pc, #304]	; (8002780 <HAL_GPIO_Init+0x32c>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d007      	beq.n	8002662 <HAL_GPIO_Init+0x20e>
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a4b      	ldr	r2, [pc, #300]	; (8002784 <HAL_GPIO_Init+0x330>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d101      	bne.n	800265e <HAL_GPIO_Init+0x20a>
 800265a:	2307      	movs	r3, #7
 800265c:	e00e      	b.n	800267c <HAL_GPIO_Init+0x228>
 800265e:	2308      	movs	r3, #8
 8002660:	e00c      	b.n	800267c <HAL_GPIO_Init+0x228>
 8002662:	2306      	movs	r3, #6
 8002664:	e00a      	b.n	800267c <HAL_GPIO_Init+0x228>
 8002666:	2305      	movs	r3, #5
 8002668:	e008      	b.n	800267c <HAL_GPIO_Init+0x228>
 800266a:	2304      	movs	r3, #4
 800266c:	e006      	b.n	800267c <HAL_GPIO_Init+0x228>
 800266e:	2303      	movs	r3, #3
 8002670:	e004      	b.n	800267c <HAL_GPIO_Init+0x228>
 8002672:	2302      	movs	r3, #2
 8002674:	e002      	b.n	800267c <HAL_GPIO_Init+0x228>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_GPIO_Init+0x228>
 800267a:	2300      	movs	r3, #0
 800267c:	69fa      	ldr	r2, [r7, #28]
 800267e:	f002 0203 	and.w	r2, r2, #3
 8002682:	0092      	lsls	r2, r2, #2
 8002684:	4093      	lsls	r3, r2
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4313      	orrs	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800268c:	4935      	ldr	r1, [pc, #212]	; (8002764 <HAL_GPIO_Init+0x310>)
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	089b      	lsrs	r3, r3, #2
 8002692:	3302      	adds	r3, #2
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_GPIO_Init+0x334>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	43db      	mvns	r3, r3
 80026a4:	69ba      	ldr	r2, [r7, #24]
 80026a6:	4013      	ands	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d003      	beq.n	80026be <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80026b6:	69ba      	ldr	r2, [r7, #24]
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026be:	4a32      	ldr	r2, [pc, #200]	; (8002788 <HAL_GPIO_Init+0x334>)
 80026c0:	69bb      	ldr	r3, [r7, #24]
 80026c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026c4:	4b30      	ldr	r3, [pc, #192]	; (8002788 <HAL_GPIO_Init+0x334>)
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	43db      	mvns	r3, r3
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4013      	ands	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d003      	beq.n	80026e8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	693b      	ldr	r3, [r7, #16]
 80026e4:	4313      	orrs	r3, r2
 80026e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026e8:	4a27      	ldr	r2, [pc, #156]	; (8002788 <HAL_GPIO_Init+0x334>)
 80026ea:	69bb      	ldr	r3, [r7, #24]
 80026ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026ee:	4b26      	ldr	r3, [pc, #152]	; (8002788 <HAL_GPIO_Init+0x334>)
 80026f0:	685b      	ldr	r3, [r3, #4]
 80026f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	43db      	mvns	r3, r3
 80026f8:	69ba      	ldr	r2, [r7, #24]
 80026fa:	4013      	ands	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d003      	beq.n	8002712 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	4313      	orrs	r3, r2
 8002710:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <HAL_GPIO_Init+0x334>)
 8002714:	69bb      	ldr	r3, [r7, #24]
 8002716:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002718:	4b1b      	ldr	r3, [pc, #108]	; (8002788 <HAL_GPIO_Init+0x334>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	4313      	orrs	r3, r2
 800273a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800273c:	4a12      	ldr	r2, [pc, #72]	; (8002788 <HAL_GPIO_Init+0x334>)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	3301      	adds	r3, #1
 8002746:	61fb      	str	r3, [r7, #28]
 8002748:	69fb      	ldr	r3, [r7, #28]
 800274a:	2b0f      	cmp	r3, #15
 800274c:	f67f ae90 	bls.w	8002470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002750:	bf00      	nop
 8002752:	bf00      	nop
 8002754:	3724      	adds	r7, #36	; 0x24
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40023800 	.word	0x40023800
 8002764:	40013800 	.word	0x40013800
 8002768:	40020000 	.word	0x40020000
 800276c:	40020400 	.word	0x40020400
 8002770:	40020800 	.word	0x40020800
 8002774:	40020c00 	.word	0x40020c00
 8002778:	40021000 	.word	0x40021000
 800277c:	40021400 	.word	0x40021400
 8002780:	40021800 	.word	0x40021800
 8002784:	40021c00 	.word	0x40021c00
 8002788:	40013c00 	.word	0x40013c00

0800278c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800278c:	b480      	push	{r7}
 800278e:	b083      	sub	sp, #12
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	460b      	mov	r3, r1
 8002796:	807b      	strh	r3, [r7, #2]
 8002798:	4613      	mov	r3, r2
 800279a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800279c:	787b      	ldrb	r3, [r7, #1]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d003      	beq.n	80027aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027a8:	e003      	b.n	80027b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	041a      	lsls	r2, r3, #16
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	619a      	str	r2, [r3, #24]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr

080027be <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027be:	b480      	push	{r7}
 80027c0:	b085      	sub	sp, #20
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
 80027c6:	460b      	mov	r3, r1
 80027c8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	695b      	ldr	r3, [r3, #20]
 80027ce:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80027d0:	887a      	ldrh	r2, [r7, #2]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4013      	ands	r3, r2
 80027d6:	041a      	lsls	r2, r3, #16
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	43d9      	mvns	r1, r3
 80027dc:	887b      	ldrh	r3, [r7, #2]
 80027de:	400b      	ands	r3, r1
 80027e0:	431a      	orrs	r2, r3
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	619a      	str	r2, [r3, #24]
}
 80027e6:	bf00      	nop
 80027e8:	3714      	adds	r7, #20
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
	...

080027f4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e12b      	b.n	8002a5e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800280c:	b2db      	uxtb	r3, r3
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800281a:	6878      	ldr	r0, [r7, #4]
 800281c:	f7fe fc8c 	bl	8001138 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2224      	movs	r2, #36	; 0x24
 8002824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0201 	bic.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002846:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002856:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002858:	f002 fa96 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 800285c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	4a81      	ldr	r2, [pc, #516]	; (8002a68 <HAL_I2C_Init+0x274>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d807      	bhi.n	8002878 <HAL_I2C_Init+0x84>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	4a80      	ldr	r2, [pc, #512]	; (8002a6c <HAL_I2C_Init+0x278>)
 800286c:	4293      	cmp	r3, r2
 800286e:	bf94      	ite	ls
 8002870:	2301      	movls	r3, #1
 8002872:	2300      	movhi	r3, #0
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e006      	b.n	8002886 <HAL_I2C_Init+0x92>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	4a7d      	ldr	r2, [pc, #500]	; (8002a70 <HAL_I2C_Init+0x27c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	bf94      	ite	ls
 8002880:	2301      	movls	r3, #1
 8002882:	2300      	movhi	r3, #0
 8002884:	b2db      	uxtb	r3, r3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800288a:	2301      	movs	r3, #1
 800288c:	e0e7      	b.n	8002a5e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	4a78      	ldr	r2, [pc, #480]	; (8002a74 <HAL_I2C_Init+0x280>)
 8002892:	fba2 2303 	umull	r2, r3, r2, r3
 8002896:	0c9b      	lsrs	r3, r3, #18
 8002898:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	68ba      	ldr	r2, [r7, #8]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	6a1b      	ldr	r3, [r3, #32]
 80028b4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4a6a      	ldr	r2, [pc, #424]	; (8002a68 <HAL_I2C_Init+0x274>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d802      	bhi.n	80028c8 <HAL_I2C_Init+0xd4>
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	3301      	adds	r3, #1
 80028c6:	e009      	b.n	80028dc <HAL_I2C_Init+0xe8>
 80028c8:	68bb      	ldr	r3, [r7, #8]
 80028ca:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80028ce:	fb02 f303 	mul.w	r3, r2, r3
 80028d2:	4a69      	ldr	r2, [pc, #420]	; (8002a78 <HAL_I2C_Init+0x284>)
 80028d4:	fba2 2303 	umull	r2, r3, r2, r3
 80028d8:	099b      	lsrs	r3, r3, #6
 80028da:	3301      	adds	r3, #1
 80028dc:	687a      	ldr	r2, [r7, #4]
 80028de:	6812      	ldr	r2, [r2, #0]
 80028e0:	430b      	orrs	r3, r1
 80028e2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	69db      	ldr	r3, [r3, #28]
 80028ea:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80028ee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	495c      	ldr	r1, [pc, #368]	; (8002a68 <HAL_I2C_Init+0x274>)
 80028f8:	428b      	cmp	r3, r1
 80028fa:	d819      	bhi.n	8002930 <HAL_I2C_Init+0x13c>
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	1e59      	subs	r1, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	fbb1 f3f3 	udiv	r3, r1, r3
 800290a:	1c59      	adds	r1, r3, #1
 800290c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002910:	400b      	ands	r3, r1
 8002912:	2b00      	cmp	r3, #0
 8002914:	d00a      	beq.n	800292c <HAL_I2C_Init+0x138>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1e59      	subs	r1, r3, #1
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	fbb1 f3f3 	udiv	r3, r1, r3
 8002924:	3301      	adds	r3, #1
 8002926:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800292a:	e051      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 800292c:	2304      	movs	r3, #4
 800292e:	e04f      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d111      	bne.n	800295c <HAL_I2C_Init+0x168>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	1e58      	subs	r0, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6859      	ldr	r1, [r3, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	005b      	lsls	r3, r3, #1
 8002944:	440b      	add	r3, r1
 8002946:	fbb0 f3f3 	udiv	r3, r0, r3
 800294a:	3301      	adds	r3, #1
 800294c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002950:	2b00      	cmp	r3, #0
 8002952:	bf0c      	ite	eq
 8002954:	2301      	moveq	r3, #1
 8002956:	2300      	movne	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e012      	b.n	8002982 <HAL_I2C_Init+0x18e>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	1e58      	subs	r0, r3, #1
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6859      	ldr	r1, [r3, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	440b      	add	r3, r1
 800296a:	0099      	lsls	r1, r3, #2
 800296c:	440b      	add	r3, r1
 800296e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002972:	3301      	adds	r3, #1
 8002974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002978:	2b00      	cmp	r3, #0
 800297a:	bf0c      	ite	eq
 800297c:	2301      	moveq	r3, #1
 800297e:	2300      	movne	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d001      	beq.n	800298a <HAL_I2C_Init+0x196>
 8002986:	2301      	movs	r3, #1
 8002988:	e022      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10e      	bne.n	80029b0 <HAL_I2C_Init+0x1bc>
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1e58      	subs	r0, r3, #1
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6859      	ldr	r1, [r3, #4]
 800299a:	460b      	mov	r3, r1
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	440b      	add	r3, r1
 80029a0:	fbb0 f3f3 	udiv	r3, r0, r3
 80029a4:	3301      	adds	r3, #1
 80029a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80029ae:	e00f      	b.n	80029d0 <HAL_I2C_Init+0x1dc>
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	1e58      	subs	r0, r3, #1
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6859      	ldr	r1, [r3, #4]
 80029b8:	460b      	mov	r3, r1
 80029ba:	009b      	lsls	r3, r3, #2
 80029bc:	440b      	add	r3, r1
 80029be:	0099      	lsls	r1, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80029c6:	3301      	adds	r3, #1
 80029c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80029cc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	6809      	ldr	r1, [r1, #0]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a1b      	ldr	r3, [r3, #32]
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	430a      	orrs	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80029fe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6911      	ldr	r1, [r2, #16]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	68d2      	ldr	r2, [r2, #12]
 8002a0a:	4311      	orrs	r1, r2
 8002a0c:	687a      	ldr	r2, [r7, #4]
 8002a0e:	6812      	ldr	r2, [r2, #0]
 8002a10:	430b      	orrs	r3, r1
 8002a12:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	68db      	ldr	r3, [r3, #12]
 8002a1a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	695a      	ldr	r2, [r3, #20]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	699b      	ldr	r3, [r3, #24]
 8002a26:	431a      	orrs	r2, r3
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f042 0201 	orr.w	r2, r2, #1
 8002a3e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2220      	movs	r2, #32
 8002a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2200      	movs	r2, #0
 8002a52:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002a5c:	2300      	movs	r3, #0
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	000186a0 	.word	0x000186a0
 8002a6c:	001e847f 	.word	0x001e847f
 8002a70:	003d08ff 	.word	0x003d08ff
 8002a74:	431bde83 	.word	0x431bde83
 8002a78:	10624dd3 	.word	0x10624dd3

08002a7c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b088      	sub	sp, #32
 8002a80:	af02      	add	r7, sp, #8
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	4608      	mov	r0, r1
 8002a86:	4611      	mov	r1, r2
 8002a88:	461a      	mov	r2, r3
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	817b      	strh	r3, [r7, #10]
 8002a8e:	460b      	mov	r3, r1
 8002a90:	813b      	strh	r3, [r7, #8]
 8002a92:	4613      	mov	r3, r2
 8002a94:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a96:	f7fe fded 	bl	8001674 <HAL_GetTick>
 8002a9a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	2b20      	cmp	r3, #32
 8002aa6:	f040 80d9 	bne.w	8002c5c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	2319      	movs	r3, #25
 8002ab0:	2201      	movs	r2, #1
 8002ab2:	496d      	ldr	r1, [pc, #436]	; (8002c68 <HAL_I2C_Mem_Write+0x1ec>)
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fc7f 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002ac0:	2302      	movs	r3, #2
 8002ac2:	e0cc      	b.n	8002c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_I2C_Mem_Write+0x56>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0c5      	b.n	8002c5e <HAL_I2C_Mem_Write+0x1e2>
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d007      	beq.n	8002af8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	681a      	ldr	r2, [r3, #0]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b06:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	2221      	movs	r2, #33	; 0x21
 8002b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2240      	movs	r2, #64	; 0x40
 8002b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a3a      	ldr	r2, [r7, #32]
 8002b22:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002b28:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b2e:	b29a      	uxth	r2, r3
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a4d      	ldr	r2, [pc, #308]	; (8002c6c <HAL_I2C_Mem_Write+0x1f0>)
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002b3a:	88f8      	ldrh	r0, [r7, #6]
 8002b3c:	893a      	ldrh	r2, [r7, #8]
 8002b3e:	8979      	ldrh	r1, [r7, #10]
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	9301      	str	r3, [sp, #4]
 8002b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	4603      	mov	r3, r0
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 fab6 	bl	80030bc <I2C_RequestMemoryWrite>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d052      	beq.n	8002bfc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e081      	b.n	8002c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b5a:	697a      	ldr	r2, [r7, #20]
 8002b5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002b5e:	68f8      	ldr	r0, [r7, #12]
 8002b60:	f000 fd00 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00d      	beq.n	8002b86 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	2b04      	cmp	r3, #4
 8002b70:	d107      	bne.n	8002b82 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681a      	ldr	r2, [r3, #0]
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b80:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002b82:	2301      	movs	r3, #1
 8002b84:	e06b      	b.n	8002c5e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8a:	781a      	ldrb	r2, [r3, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	1c5a      	adds	r2, r3, #1
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bac:	b29b      	uxth	r3, r3
 8002bae:	3b01      	subs	r3, #1
 8002bb0:	b29a      	uxth	r2, r3
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	695b      	ldr	r3, [r3, #20]
 8002bbc:	f003 0304 	and.w	r3, r3, #4
 8002bc0:	2b04      	cmp	r3, #4
 8002bc2:	d11b      	bne.n	8002bfc <HAL_I2C_Mem_Write+0x180>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d017      	beq.n	8002bfc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd0:	781a      	ldrb	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002be6:	3b01      	subs	r3, #1
 8002be8:	b29a      	uxth	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bf2:	b29b      	uxth	r3, r3
 8002bf4:	3b01      	subs	r3, #1
 8002bf6:	b29a      	uxth	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d1aa      	bne.n	8002b5a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002c08:	68f8      	ldr	r0, [r7, #12]
 8002c0a:	f000 fcec 	bl	80035e6 <I2C_WaitOnBTFFlagUntilTimeout>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00d      	beq.n	8002c30 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d107      	bne.n	8002c2c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c2a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e016      	b.n	8002c5e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	e000      	b.n	8002c5e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002c5c:	2302      	movs	r3, #2
  }
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	00100002 	.word	0x00100002
 8002c6c:	ffff0000 	.word	0xffff0000

08002c70 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b08c      	sub	sp, #48	; 0x30
 8002c74:	af02      	add	r7, sp, #8
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	4608      	mov	r0, r1
 8002c7a:	4611      	mov	r1, r2
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4603      	mov	r3, r0
 8002c80:	817b      	strh	r3, [r7, #10]
 8002c82:	460b      	mov	r3, r1
 8002c84:	813b      	strh	r3, [r7, #8]
 8002c86:	4613      	mov	r3, r2
 8002c88:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c8a:	f7fe fcf3 	bl	8001674 <HAL_GetTick>
 8002c8e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c96:	b2db      	uxtb	r3, r3
 8002c98:	2b20      	cmp	r3, #32
 8002c9a:	f040 8208 	bne.w	80030ae <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ca0:	9300      	str	r3, [sp, #0]
 8002ca2:	2319      	movs	r3, #25
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	497b      	ldr	r1, [pc, #492]	; (8002e94 <HAL_I2C_Mem_Read+0x224>)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	f000 fb85 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d001      	beq.n	8002cb8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	e1fb      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cbe:	2b01      	cmp	r3, #1
 8002cc0:	d101      	bne.n	8002cc6 <HAL_I2C_Mem_Read+0x56>
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	e1f4      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	2201      	movs	r2, #1
 8002cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d007      	beq.n	8002cec <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f042 0201 	orr.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cfa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2222      	movs	r2, #34	; 0x22
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	2240      	movs	r2, #64	; 0x40
 8002d08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002d16:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8002d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d22:	b29a      	uxth	r2, r3
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	4a5b      	ldr	r2, [pc, #364]	; (8002e98 <HAL_I2C_Mem_Read+0x228>)
 8002d2c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002d2e:	88f8      	ldrh	r0, [r7, #6]
 8002d30:	893a      	ldrh	r2, [r7, #8]
 8002d32:	8979      	ldrh	r1, [r7, #10]
 8002d34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d36:	9301      	str	r3, [sp, #4]
 8002d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 fa52 	bl	80031e8 <I2C_RequestMemoryRead>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d001      	beq.n	8002d4e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	e1b0      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d113      	bne.n	8002d7e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	695b      	ldr	r3, [r3, #20]
 8002d60:	623b      	str	r3, [r7, #32]
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	699b      	ldr	r3, [r3, #24]
 8002d68:	623b      	str	r3, [r7, #32]
 8002d6a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	681a      	ldr	r2, [r3, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d7a:	601a      	str	r2, [r3, #0]
 8002d7c:	e184      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d11b      	bne.n	8002dbe <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d96:	2300      	movs	r3, #0
 8002d98:	61fb      	str	r3, [r7, #28]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	695b      	ldr	r3, [r3, #20]
 8002da0:	61fb      	str	r3, [r7, #28]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	699b      	ldr	r3, [r3, #24]
 8002da8:	61fb      	str	r3, [r7, #28]
 8002daa:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	e164      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d11b      	bne.n	8002dfe <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dd4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002de4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002de6:	2300      	movs	r3, #0
 8002de8:	61bb      	str	r3, [r7, #24]
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	61bb      	str	r3, [r7, #24]
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	699b      	ldr	r3, [r3, #24]
 8002df8:	61bb      	str	r3, [r7, #24]
 8002dfa:	69bb      	ldr	r3, [r7, #24]
 8002dfc:	e144      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	695b      	ldr	r3, [r3, #20]
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	699b      	ldr	r3, [r3, #24]
 8002e10:	617b      	str	r3, [r7, #20]
 8002e12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002e14:	e138      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e1a:	2b03      	cmp	r3, #3
 8002e1c:	f200 80f1 	bhi.w	8003002 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d123      	bne.n	8002e70 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e2a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002e2c:	68f8      	ldr	r0, [r7, #12]
 8002e2e:	f000 fc1b 	bl	8003668 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e32:	4603      	mov	r3, r0
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d001      	beq.n	8002e3c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8002e38:	2301      	movs	r3, #1
 8002e3a:	e139      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e46:	b2d2      	uxtb	r2, r2
 8002e48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e58:	3b01      	subs	r3, #1
 8002e5a:	b29a      	uxth	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	3b01      	subs	r3, #1
 8002e68:	b29a      	uxth	r2, r3
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e6e:	e10b      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e74:	2b02      	cmp	r3, #2
 8002e76:	d14e      	bne.n	8002f16 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e7a:	9300      	str	r3, [sp, #0]
 8002e7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e7e:	2200      	movs	r2, #0
 8002e80:	4906      	ldr	r1, [pc, #24]	; (8002e9c <HAL_I2C_Mem_Read+0x22c>)
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f000 fa98 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e10e      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
 8002e92:	bf00      	nop
 8002e94:	00100002 	.word	0x00100002
 8002e98:	ffff0000 	.word	0xffff0000
 8002e9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002eae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	691a      	ldr	r2, [r3, #16]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eba:	b2d2      	uxtb	r2, r2
 8002ebc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec2:	1c5a      	adds	r2, r3, #1
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	3b01      	subs	r3, #1
 8002ece:	b29a      	uxth	r2, r3
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	3b01      	subs	r3, #1
 8002edc:	b29a      	uxth	r2, r3
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	691a      	ldr	r2, [r3, #16]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eec:	b2d2      	uxtb	r2, r2
 8002eee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef4:	1c5a      	adds	r2, r3, #1
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002efe:	3b01      	subs	r3, #1
 8002f00:	b29a      	uxth	r2, r3
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f0a:	b29b      	uxth	r3, r3
 8002f0c:	3b01      	subs	r3, #1
 8002f0e:	b29a      	uxth	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002f14:	e0b8      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f18:	9300      	str	r3, [sp, #0]
 8002f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	4966      	ldr	r1, [pc, #408]	; (80030b8 <HAL_I2C_Mem_Read+0x448>)
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa49 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d001      	beq.n	8002f30 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	e0bf      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f52:	1c5a      	adds	r2, r3, #1
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	3b01      	subs	r3, #1
 8002f6c:	b29a      	uxth	r2, r3
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f74:	9300      	str	r3, [sp, #0]
 8002f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f78:	2200      	movs	r2, #0
 8002f7a:	494f      	ldr	r1, [pc, #316]	; (80030b8 <HAL_I2C_Mem_Read+0x448>)
 8002f7c:	68f8      	ldr	r0, [r7, #12]
 8002f7e:	f000 fa1b 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e091      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691a      	ldr	r2, [r3, #16]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	b2d2      	uxtb	r2, r2
 8002fa8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fb8:	3b01      	subs	r3, #1
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	b29a      	uxth	r2, r3
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	691a      	ldr	r2, [r3, #16]
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	b2d2      	uxtb	r2, r2
 8002fda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003000:	e042      	b.n	8003088 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003004:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fb2e 	bl	8003668 <I2C_WaitOnRXNEFlagUntilTimeout>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003012:	2301      	movs	r3, #1
 8003014:	e04c      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	691a      	ldr	r2, [r3, #16]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	b2d2      	uxtb	r2, r2
 8003022:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	1c5a      	adds	r2, r3, #1
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003032:	3b01      	subs	r3, #1
 8003034:	b29a      	uxth	r2, r3
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800303e:	b29b      	uxth	r3, r3
 8003040:	3b01      	subs	r3, #1
 8003042:	b29a      	uxth	r2, r3
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	f003 0304 	and.w	r3, r3, #4
 8003052:	2b04      	cmp	r3, #4
 8003054:	d118      	bne.n	8003088 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003060:	b2d2      	uxtb	r2, r2
 8003062:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	1c5a      	adds	r2, r3, #1
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800308c:	2b00      	cmp	r3, #0
 800308e:	f47f aec2 	bne.w	8002e16 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2220      	movs	r2, #32
 8003096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3728      	adds	r7, #40	; 0x28
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}
 80030b8:	00010004 	.word	0x00010004

080030bc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b088      	sub	sp, #32
 80030c0:	af02      	add	r7, sp, #8
 80030c2:	60f8      	str	r0, [r7, #12]
 80030c4:	4608      	mov	r0, r1
 80030c6:	4611      	mov	r1, r2
 80030c8:	461a      	mov	r2, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	817b      	strh	r3, [r7, #10]
 80030ce:	460b      	mov	r3, r1
 80030d0:	813b      	strh	r3, [r7, #8]
 80030d2:	4613      	mov	r3, r2
 80030d4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80030e4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80030e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	6a3b      	ldr	r3, [r7, #32]
 80030ec:	2200      	movs	r2, #0
 80030ee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 f960 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00d      	beq.n	800311a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003108:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800310c:	d103      	bne.n	8003116 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003114:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e05f      	b.n	80031da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800311a:	897b      	ldrh	r3, [r7, #10]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	461a      	mov	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003128:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800312c:	6a3a      	ldr	r2, [r7, #32]
 800312e:	492d      	ldr	r1, [pc, #180]	; (80031e4 <I2C_RequestMemoryWrite+0x128>)
 8003130:	68f8      	ldr	r0, [r7, #12]
 8003132:	f000 f998 	bl	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d001      	beq.n	8003140 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800313c:	2301      	movs	r3, #1
 800313e:	e04c      	b.n	80031da <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	617b      	str	r3, [r7, #20]
 8003154:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003158:	6a39      	ldr	r1, [r7, #32]
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fa02 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00d      	beq.n	8003182 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	2b04      	cmp	r3, #4
 800316c:	d107      	bne.n	800317e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681a      	ldr	r2, [r3, #0]
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800317c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	e02b      	b.n	80031da <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003182:	88fb      	ldrh	r3, [r7, #6]
 8003184:	2b01      	cmp	r3, #1
 8003186:	d105      	bne.n	8003194 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003188:	893b      	ldrh	r3, [r7, #8]
 800318a:	b2da      	uxtb	r2, r3
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	611a      	str	r2, [r3, #16]
 8003192:	e021      	b.n	80031d8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003194:	893b      	ldrh	r3, [r7, #8]
 8003196:	0a1b      	lsrs	r3, r3, #8
 8003198:	b29b      	uxth	r3, r3
 800319a:	b2da      	uxtb	r2, r3
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a4:	6a39      	ldr	r1, [r7, #32]
 80031a6:	68f8      	ldr	r0, [r7, #12]
 80031a8:	f000 f9dc 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d00d      	beq.n	80031ce <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b6:	2b04      	cmp	r3, #4
 80031b8:	d107      	bne.n	80031ca <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681a      	ldr	r2, [r3, #0]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031c8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e005      	b.n	80031da <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031ce:	893b      	ldrh	r3, [r7, #8]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3718      	adds	r7, #24
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	00010002 	.word	0x00010002

080031e8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b088      	sub	sp, #32
 80031ec:	af02      	add	r7, sp, #8
 80031ee:	60f8      	str	r0, [r7, #12]
 80031f0:	4608      	mov	r0, r1
 80031f2:	4611      	mov	r1, r2
 80031f4:	461a      	mov	r2, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	817b      	strh	r3, [r7, #10]
 80031fa:	460b      	mov	r3, r1
 80031fc:	813b      	strh	r3, [r7, #8]
 80031fe:	4613      	mov	r3, r2
 8003200:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003210:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003220:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003224:	9300      	str	r3, [sp, #0]
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	2200      	movs	r2, #0
 800322a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8c2 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d00d      	beq.n	8003256 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003248:	d103      	bne.n	8003252 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003250:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0aa      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003256:	897b      	ldrh	r3, [r7, #10]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	461a      	mov	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003264:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003268:	6a3a      	ldr	r2, [r7, #32]
 800326a:	4952      	ldr	r1, [pc, #328]	; (80033b4 <I2C_RequestMemoryRead+0x1cc>)
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f000 f8fa 	bl	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003272:	4603      	mov	r3, r0
 8003274:	2b00      	cmp	r3, #0
 8003276:	d001      	beq.n	800327c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e097      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	695b      	ldr	r3, [r3, #20]
 8003286:	617b      	str	r3, [r7, #20]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003292:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003294:	6a39      	ldr	r1, [r7, #32]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f964 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00d      	beq.n	80032be <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d107      	bne.n	80032ba <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	681a      	ldr	r2, [r3, #0]
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032b8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e076      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032be:	88fb      	ldrh	r3, [r7, #6]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d105      	bne.n	80032d0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80032c4:	893b      	ldrh	r3, [r7, #8]
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	611a      	str	r2, [r3, #16]
 80032ce:	e021      	b.n	8003314 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80032d0:	893b      	ldrh	r3, [r7, #8]
 80032d2:	0a1b      	lsrs	r3, r3, #8
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	b2da      	uxtb	r2, r3
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e0:	6a39      	ldr	r1, [r7, #32]
 80032e2:	68f8      	ldr	r0, [r7, #12]
 80032e4:	f000 f93e 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e8:	4603      	mov	r3, r0
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d00d      	beq.n	800330a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f2:	2b04      	cmp	r3, #4
 80032f4:	d107      	bne.n	8003306 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003304:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e050      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800330a:	893b      	ldrh	r3, [r7, #8]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003316:	6a39      	ldr	r1, [r7, #32]
 8003318:	68f8      	ldr	r0, [r7, #12]
 800331a:	f000 f923 	bl	8003564 <I2C_WaitOnTXEFlagUntilTimeout>
 800331e:	4603      	mov	r3, r0
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00d      	beq.n	8003340 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003328:	2b04      	cmp	r3, #4
 800332a:	d107      	bne.n	800333c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681a      	ldr	r2, [r3, #0]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800333a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e035      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	9300      	str	r3, [sp, #0]
 8003354:	6a3b      	ldr	r3, [r7, #32]
 8003356:	2200      	movs	r2, #0
 8003358:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f82b 	bl	80033b8 <I2C_WaitOnFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003372:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003376:	d103      	bne.n	8003380 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800337e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003380:	2303      	movs	r3, #3
 8003382:	e013      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003384:	897b      	ldrh	r3, [r7, #10]
 8003386:	b2db      	uxtb	r3, r3
 8003388:	f043 0301 	orr.w	r3, r3, #1
 800338c:	b2da      	uxtb	r2, r3
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	6a3a      	ldr	r2, [r7, #32]
 8003398:	4906      	ldr	r1, [pc, #24]	; (80033b4 <I2C_RequestMemoryRead+0x1cc>)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 f863 	bl	8003466 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e000      	b.n	80033ac <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033aa:	2300      	movs	r3, #0
}
 80033ac:	4618      	mov	r0, r3
 80033ae:	3718      	adds	r7, #24
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	00010002 	.word	0x00010002

080033b8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b084      	sub	sp, #16
 80033bc:	af00      	add	r7, sp, #0
 80033be:	60f8      	str	r0, [r7, #12]
 80033c0:	60b9      	str	r1, [r7, #8]
 80033c2:	603b      	str	r3, [r7, #0]
 80033c4:	4613      	mov	r3, r2
 80033c6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033c8:	e025      	b.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d0:	d021      	beq.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033d2:	f7fe f94f 	bl	8001674 <HAL_GetTick>
 80033d6:	4602      	mov	r2, r0
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d302      	bcc.n	80033e8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d116      	bne.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2200      	movs	r2, #0
 80033ec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2220      	movs	r2, #32
 80033f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003402:	f043 0220 	orr.w	r2, r3, #32
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e023      	b.n	800345e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	0c1b      	lsrs	r3, r3, #16
 800341a:	b2db      	uxtb	r3, r3
 800341c:	2b01      	cmp	r3, #1
 800341e:	d10d      	bne.n	800343c <I2C_WaitOnFlagUntilTimeout+0x84>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	43da      	mvns	r2, r3
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	4013      	ands	r3, r2
 800342c:	b29b      	uxth	r3, r3
 800342e:	2b00      	cmp	r3, #0
 8003430:	bf0c      	ite	eq
 8003432:	2301      	moveq	r3, #1
 8003434:	2300      	movne	r3, #0
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	e00c      	b.n	8003456 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	699b      	ldr	r3, [r3, #24]
 8003442:	43da      	mvns	r2, r3
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	4013      	ands	r3, r2
 8003448:	b29b      	uxth	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	bf0c      	ite	eq
 800344e:	2301      	moveq	r3, #1
 8003450:	2300      	movne	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	461a      	mov	r2, r3
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	429a      	cmp	r2, r3
 800345a:	d0b6      	beq.n	80033ca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3710      	adds	r7, #16
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b084      	sub	sp, #16
 800346a:	af00      	add	r7, sp, #0
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	60b9      	str	r1, [r7, #8]
 8003470:	607a      	str	r2, [r7, #4]
 8003472:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003474:	e051      	b.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	695b      	ldr	r3, [r3, #20]
 800347c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003480:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003484:	d123      	bne.n	80034ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681a      	ldr	r2, [r3, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003494:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800349e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	2200      	movs	r2, #0
 80034a4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	2220      	movs	r2, #32
 80034aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e046      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d4:	d021      	beq.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034d6:	f7fe f8cd 	bl	8001674 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d302      	bcc.n	80034ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d116      	bne.n	800351a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	2200      	movs	r2, #0
 80034fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f043 0220 	orr.w	r2, r3, #32
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003516:	2301      	movs	r3, #1
 8003518:	e020      	b.n	800355c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800351a:	68bb      	ldr	r3, [r7, #8]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d10c      	bne.n	800353e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	695b      	ldr	r3, [r3, #20]
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4013      	ands	r3, r2
 8003530:	b29b      	uxth	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	bf14      	ite	ne
 8003536:	2301      	movne	r3, #1
 8003538:	2300      	moveq	r3, #0
 800353a:	b2db      	uxtb	r3, r3
 800353c:	e00b      	b.n	8003556 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	43da      	mvns	r2, r3
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	4013      	ands	r3, r2
 800354a:	b29b      	uxth	r3, r3
 800354c:	2b00      	cmp	r3, #0
 800354e:	bf14      	ite	ne
 8003550:	2301      	movne	r3, #1
 8003552:	2300      	moveq	r3, #0
 8003554:	b2db      	uxtb	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	d18d      	bne.n	8003476 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003570:	e02d      	b.n	80035ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003572:	68f8      	ldr	r0, [r7, #12]
 8003574:	f000 f8ce 	bl	8003714 <I2C_IsAcknowledgeFailed>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d001      	beq.n	8003582 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e02d      	b.n	80035de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003588:	d021      	beq.n	80035ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800358a:	f7fe f873 	bl	8001674 <HAL_GetTick>
 800358e:	4602      	mov	r2, r0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	68ba      	ldr	r2, [r7, #8]
 8003596:	429a      	cmp	r2, r3
 8003598:	d302      	bcc.n	80035a0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800359a:	68bb      	ldr	r3, [r7, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d116      	bne.n	80035ce <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	2200      	movs	r2, #0
 80035a4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	f043 0220 	orr.w	r2, r3, #32
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e007      	b.n	80035de <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035d8:	2b80      	cmp	r3, #128	; 0x80
 80035da:	d1ca      	bne.n	8003572 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035dc:	2300      	movs	r3, #0
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3710      	adds	r7, #16
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	60f8      	str	r0, [r7, #12]
 80035ee:	60b9      	str	r1, [r7, #8]
 80035f0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035f2:	e02d      	b.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f88d 	bl	8003714 <I2C_IsAcknowledgeFailed>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003600:	2301      	movs	r3, #1
 8003602:	e02d      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800360a:	d021      	beq.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800360c:	f7fe f832 	bl	8001674 <HAL_GetTick>
 8003610:	4602      	mov	r2, r0
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	1ad3      	subs	r3, r2, r3
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	429a      	cmp	r2, r3
 800361a:	d302      	bcc.n	8003622 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d116      	bne.n	8003650 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	2200      	movs	r2, #0
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363c:	f043 0220 	orr.w	r2, r3, #32
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800364c:	2301      	movs	r3, #1
 800364e:	e007      	b.n	8003660 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	695b      	ldr	r3, [r3, #20]
 8003656:	f003 0304 	and.w	r3, r3, #4
 800365a:	2b04      	cmp	r3, #4
 800365c:	d1ca      	bne.n	80035f4 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800365e:	2300      	movs	r3, #0
}
 8003660:	4618      	mov	r0, r3
 8003662:	3710      	adds	r7, #16
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	60f8      	str	r0, [r7, #12]
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003674:	e042      	b.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695b      	ldr	r3, [r3, #20]
 800367c:	f003 0310 	and.w	r3, r3, #16
 8003680:	2b10      	cmp	r3, #16
 8003682:	d119      	bne.n	80036b8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f06f 0210 	mvn.w	r2, #16
 800368c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e029      	b.n	800370c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036b8:	f7fd ffdc 	bl	8001674 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	68ba      	ldr	r2, [r7, #8]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d302      	bcc.n	80036ce <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d116      	bne.n	80036fc <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e007      	b.n	800370c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003706:	2b40      	cmp	r3, #64	; 0x40
 8003708:	d1b5      	bne.n	8003676 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800372a:	d11b      	bne.n	8003764 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003734:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003770:	4770      	bx	lr
	...

08003774 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b088      	sub	sp, #32
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d101      	bne.n	8003786 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e128      	b.n	80039d8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	4a90      	ldr	r2, [pc, #576]	; (80039e0 <HAL_I2S_Init+0x26c>)
 800379e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f7fd fd11 	bl	80011c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2202      	movs	r2, #2
 80037aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	69db      	ldr	r3, [r3, #28]
 80037b4:	687a      	ldr	r2, [r7, #4]
 80037b6:	6812      	ldr	r2, [r2, #0]
 80037b8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037bc:	f023 030f 	bic.w	r3, r3, #15
 80037c0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2202      	movs	r2, #2
 80037c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d060      	beq.n	8003894 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d102      	bne.n	80037e0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80037da:	2310      	movs	r3, #16
 80037dc:	617b      	str	r3, [r7, #20]
 80037de:	e001      	b.n	80037e4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80037e0:	2320      	movs	r3, #32
 80037e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d802      	bhi.n	80037f2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80037f2:	2001      	movs	r0, #1
 80037f4:	f001 fbd2 	bl	8004f9c <HAL_RCCEx_GetPeriphCLKFreq>
 80037f8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003802:	d125      	bne.n	8003850 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d010      	beq.n	800382e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	fbb2 f2f3 	udiv	r2, r2, r3
 8003816:	4613      	mov	r3, r2
 8003818:	009b      	lsls	r3, r3, #2
 800381a:	4413      	add	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	461a      	mov	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	3305      	adds	r3, #5
 800382a:	613b      	str	r3, [r7, #16]
 800382c:	e01f      	b.n	800386e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	00db      	lsls	r3, r3, #3
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	fbb2 f2f3 	udiv	r2, r2, r3
 8003838:	4613      	mov	r3, r2
 800383a:	009b      	lsls	r3, r3, #2
 800383c:	4413      	add	r3, r2
 800383e:	005b      	lsls	r3, r3, #1
 8003840:	461a      	mov	r2, r3
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	695b      	ldr	r3, [r3, #20]
 8003846:	fbb2 f3f3 	udiv	r3, r2, r3
 800384a:	3305      	adds	r3, #5
 800384c:	613b      	str	r3, [r7, #16]
 800384e:	e00e      	b.n	800386e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	fbb2 f2f3 	udiv	r2, r2, r3
 8003858:	4613      	mov	r3, r2
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	4413      	add	r3, r2
 800385e:	005b      	lsls	r3, r3, #1
 8003860:	461a      	mov	r2, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	fbb2 f3f3 	udiv	r3, r2, r3
 800386a:	3305      	adds	r3, #5
 800386c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	4a5c      	ldr	r2, [pc, #368]	; (80039e4 <HAL_I2S_Init+0x270>)
 8003872:	fba2 2303 	umull	r2, r3, r2, r3
 8003876:	08db      	lsrs	r3, r3, #3
 8003878:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	f003 0301 	and.w	r3, r3, #1
 8003880:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003882:	693a      	ldr	r2, [r7, #16]
 8003884:	69bb      	ldr	r3, [r7, #24]
 8003886:	1ad3      	subs	r3, r2, r3
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800388c:	69bb      	ldr	r3, [r7, #24]
 800388e:	021b      	lsls	r3, r3, #8
 8003890:	61bb      	str	r3, [r7, #24]
 8003892:	e003      	b.n	800389c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003894:	2302      	movs	r3, #2
 8003896:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800389c:	69fb      	ldr	r3, [r7, #28]
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d902      	bls.n	80038a8 <HAL_I2S_Init+0x134>
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	2bff      	cmp	r3, #255	; 0xff
 80038a6:	d907      	bls.n	80038b8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ac:	f043 0210 	orr.w	r2, r3, #16
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e08f      	b.n	80039d8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	ea42 0103 	orr.w	r1, r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69fa      	ldr	r2, [r7, #28]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038d6:	f023 030f 	bic.w	r3, r3, #15
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	6851      	ldr	r1, [r2, #4]
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6892      	ldr	r2, [r2, #8]
 80038e2:	4311      	orrs	r1, r2
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	68d2      	ldr	r2, [r2, #12]
 80038e8:	4311      	orrs	r1, r2
 80038ea:	687a      	ldr	r2, [r7, #4]
 80038ec:	6992      	ldr	r2, [r2, #24]
 80038ee:	430a      	orrs	r2, r1
 80038f0:	431a      	orrs	r2, r3
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fa:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6a1b      	ldr	r3, [r3, #32]
 8003900:	2b01      	cmp	r3, #1
 8003902:	d161      	bne.n	80039c8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	4a38      	ldr	r2, [pc, #224]	; (80039e8 <HAL_I2S_Init+0x274>)
 8003908:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a37      	ldr	r2, [pc, #220]	; (80039ec <HAL_I2S_Init+0x278>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d101      	bne.n	8003918 <HAL_I2S_Init+0x1a4>
 8003914:	4b36      	ldr	r3, [pc, #216]	; (80039f0 <HAL_I2S_Init+0x27c>)
 8003916:	e001      	b.n	800391c <HAL_I2S_Init+0x1a8>
 8003918:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800391c:	69db      	ldr	r3, [r3, #28]
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	6812      	ldr	r2, [r2, #0]
 8003922:	4932      	ldr	r1, [pc, #200]	; (80039ec <HAL_I2S_Init+0x278>)
 8003924:	428a      	cmp	r2, r1
 8003926:	d101      	bne.n	800392c <HAL_I2S_Init+0x1b8>
 8003928:	4a31      	ldr	r2, [pc, #196]	; (80039f0 <HAL_I2S_Init+0x27c>)
 800392a:	e001      	b.n	8003930 <HAL_I2S_Init+0x1bc>
 800392c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003930:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003934:	f023 030f 	bic.w	r3, r3, #15
 8003938:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a2b      	ldr	r2, [pc, #172]	; (80039ec <HAL_I2S_Init+0x278>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <HAL_I2S_Init+0x1d4>
 8003944:	4b2a      	ldr	r3, [pc, #168]	; (80039f0 <HAL_I2S_Init+0x27c>)
 8003946:	e001      	b.n	800394c <HAL_I2S_Init+0x1d8>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	2202      	movs	r2, #2
 800394e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a25      	ldr	r2, [pc, #148]	; (80039ec <HAL_I2S_Init+0x278>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d101      	bne.n	800395e <HAL_I2S_Init+0x1ea>
 800395a:	4b25      	ldr	r3, [pc, #148]	; (80039f0 <HAL_I2S_Init+0x27c>)
 800395c:	e001      	b.n	8003962 <HAL_I2S_Init+0x1ee>
 800395e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003962:	69db      	ldr	r3, [r3, #28]
 8003964:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800396e:	d003      	beq.n	8003978 <HAL_I2S_Init+0x204>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d103      	bne.n	8003980 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003978:	f44f 7380 	mov.w	r3, #256	; 0x100
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	e001      	b.n	8003984 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003980:	2300      	movs	r3, #0
 8003982:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800398e:	4313      	orrs	r3, r2
 8003990:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003998:	4313      	orrs	r3, r2
 800399a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80039a2:	4313      	orrs	r3, r2
 80039a4:	b29a      	uxth	r2, r3
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80039b0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a0d      	ldr	r2, [pc, #52]	; (80039ec <HAL_I2S_Init+0x278>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d101      	bne.n	80039c0 <HAL_I2S_Init+0x24c>
 80039bc:	4b0c      	ldr	r3, [pc, #48]	; (80039f0 <HAL_I2S_Init+0x27c>)
 80039be:	e001      	b.n	80039c4 <HAL_I2S_Init+0x250>
 80039c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039c4:	897a      	ldrh	r2, [r7, #10]
 80039c6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80039d6:	2300      	movs	r3, #0
}
 80039d8:	4618      	mov	r0, r3
 80039da:	3720      	adds	r7, #32
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}
 80039e0:	08003aeb 	.word	0x08003aeb
 80039e4:	cccccccd 	.word	0xcccccccd
 80039e8:	08003f15 	.word	0x08003f15
 80039ec:	40003800 	.word	0x40003800
 80039f0:	40003400 	.word	0x40003400

080039f4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	881a      	ldrh	r2, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	1c9a      	adds	r2, r3, #2
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10e      	bne.n	8003a84 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a74:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2201      	movs	r2, #1
 8003a7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f7ff ffb8 	bl	80039f4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003a84:	bf00      	nop
 8003a86:	3708      	adds	r7, #8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	68da      	ldr	r2, [r3, #12]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a9e:	b292      	uxth	r2, r2
 8003aa0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	1c9a      	adds	r2, r3, #2
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d10e      	bne.n	8003ae2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685a      	ldr	r2, [r3, #4]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff93 	bl	8003a08 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003ae2:	bf00      	nop
 8003ae4:	3708      	adds	r7, #8
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}

08003aea <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003aea:	b580      	push	{r7, lr}
 8003aec:	b086      	sub	sp, #24
 8003aee:	af00      	add	r7, sp, #0
 8003af0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b04      	cmp	r3, #4
 8003b04:	d13a      	bne.n	8003b7c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0301 	and.w	r3, r3, #1
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d109      	bne.n	8003b24 <I2S_IRQHandler+0x3a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d102      	bne.n	8003b24 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7ff ffb4 	bl	8003a8c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b2a:	2b40      	cmp	r3, #64	; 0x40
 8003b2c:	d126      	bne.n	8003b7c <I2S_IRQHandler+0x92>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b20      	cmp	r3, #32
 8003b3a:	d11f      	bne.n	8003b7c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	613b      	str	r3, [r7, #16]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	613b      	str	r3, [r7, #16]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	613b      	str	r3, [r7, #16]
 8003b60:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff ff50 	bl	8003a1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b03      	cmp	r3, #3
 8003b86:	d136      	bne.n	8003bf6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0302 	and.w	r3, r3, #2
 8003b8e:	2b02      	cmp	r3, #2
 8003b90:	d109      	bne.n	8003ba6 <I2S_IRQHandler+0xbc>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b9c:	2b80      	cmp	r3, #128	; 0x80
 8003b9e:	d102      	bne.n	8003ba6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f7ff ff45 	bl	8003a30 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f003 0308 	and.w	r3, r3, #8
 8003bac:	2b08      	cmp	r3, #8
 8003bae:	d122      	bne.n	8003bf6 <I2S_IRQHandler+0x10c>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f003 0320 	and.w	r3, r3, #32
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d11b      	bne.n	8003bf6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bcc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bce:	2300      	movs	r3, #0
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	60fb      	str	r3, [r7, #12]
 8003bda:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2201      	movs	r2, #1
 8003be0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be8:	f043 0204 	orr.w	r2, r3, #4
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f7ff ff13 	bl	8003a1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf6:	bf00      	nop
 8003bf8:	3718      	adds	r7, #24
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
	...

08003c00 <HAL_I2SEx_TransmitReceive_DMA>:
  */
HAL_StatusTypeDef HAL_I2SEx_TransmitReceive_DMA(I2S_HandleTypeDef *hi2s,
                                                uint16_t *pTxData,
                                                uint16_t *pRxData,
                                                uint16_t Size)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	807b      	strh	r3, [r7, #2]
  uint32_t *tmp = NULL;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	61bb      	str	r3, [r7, #24]
  uint32_t tmp1 = 0U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003c16:	2300      	movs	r3, #0
 8003c18:	77fb      	strb	r3, [r7, #31]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d002      	beq.n	8003c2c <HAL_I2SEx_TransmitReceive_DMA+0x2c>
  {
    errorcode = HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003c2a:	e160      	b.n	8003eee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d005      	beq.n	8003c3e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <HAL_I2SEx_TransmitReceive_DMA+0x3e>
 8003c38:	887b      	ldrh	r3, [r7, #2]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d101      	bne.n	8003c42 <HAL_I2SEx_TransmitReceive_DMA+0x42>
  {
    return  HAL_ERROR;
 8003c3e:	2301      	movs	r3, #1
 8003c40:	e15a      	b.n	8003ef8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d101      	bne.n	8003c52 <HAL_I2SEx_TransmitReceive_DMA+0x52>
 8003c4e:	2302      	movs	r3, #2
 8003c50:	e152      	b.n	8003ef8 <HAL_I2SEx_TransmitReceive_DMA+0x2f8>
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	2201      	movs	r2, #1
 8003c56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  hi2s->pTxBuffPtr = pTxData;
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->pRxBuffPtr = pRxData;
 8003c60:	687a      	ldr	r2, [r7, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	62da      	str	r2, [r3, #44]	; 0x2c

  tmp1 = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	f003 0307 	and.w	r3, r3, #7
 8003c70:	617b      	str	r3, [r7, #20]
  /* Check the Data format: When a 16-bit data frame or a 16-bit data frame extended
  is selected during the I2S configuration phase, the Size parameter means the number
  of 16-bit data length in the transaction and when a 24-bit data frame or a 32-bit data
  frame is selected the Size parameter means the number of 16-bit data length. */
  if ((tmp1 == I2S_DATAFORMAT_24B) || (tmp1 == I2S_DATAFORMAT_32B))
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	2b03      	cmp	r3, #3
 8003c76:	d002      	beq.n	8003c7e <HAL_I2SEx_TransmitReceive_DMA+0x7e>
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	2b05      	cmp	r3, #5
 8003c7c:	d114      	bne.n	8003ca8 <HAL_I2SEx_TransmitReceive_DMA+0xa8>
  {
    hi2s->TxXferSize  = (Size << 1U);
 8003c7e:	887b      	ldrh	r3, [r7, #2]
 8003c80:	005b      	lsls	r3, r3, #1
 8003c82:	b29a      	uxth	r2, r3
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8003c88:	887b      	ldrh	r3, [r7, #2]
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	b29a      	uxth	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = (Size << 1U);
 8003c92:	887b      	ldrh	r3, [r7, #2]
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = (Size << 1U);
 8003c9c:	887b      	ldrh	r3, [r7, #2]
 8003c9e:	005b      	lsls	r3, r3, #1
 8003ca0:	b29a      	uxth	r2, r3
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	865a      	strh	r2, [r3, #50]	; 0x32
 8003ca6:	e00b      	b.n	8003cc0 <HAL_I2SEx_TransmitReceive_DMA+0xc0>
  }
  else
  {
    hi2s->TxXferSize  = Size;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	887a      	ldrh	r2, [r7, #2]
 8003cac:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	887a      	ldrh	r2, [r7, #2]
 8003cb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->RxXferSize  = Size;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	887a      	ldrh	r2, [r7, #2]
 8003cb8:	861a      	strh	r2, [r3, #48]	; 0x30
    hi2s->RxXferCount = Size;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	887a      	ldrh	r2, [r7, #2]
 8003cbe:	865a      	strh	r2, [r3, #50]	; 0x32
  }

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_BUSY_TX_RX;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2205      	movs	r2, #5
 8003cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2SEx_TxRxDMAHalfCplt;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cd2:	4a8b      	ldr	r2, [pc, #556]	; (8003f00 <HAL_I2SEx_TransmitReceive_DMA+0x300>)
 8003cd4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback  = I2SEx_TxRxDMACplt;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	4a8a      	ldr	r2, [pc, #552]	; (8003f04 <HAL_I2SEx_TransmitReceive_DMA+0x304>)
 8003cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Rx DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce2:	4a89      	ldr	r2, [pc, #548]	; (8003f08 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003ce4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the I2S Tx DMA Half transfer complete callback as NULL */
  hi2s->hdmatx->XferHalfCpltCallback  = NULL;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cea:	2200      	movs	r2, #0
 8003cec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback as NULL */
  hi2s->hdmatx->XferCpltCallback  = NULL;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the I2S Tx DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2SEx_TxRxDMAError;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cfa:	4a83      	ldr	r2, [pc, #524]	; (8003f08 <HAL_I2SEx_TransmitReceive_DMA+0x308>)
 8003cfc:	64da      	str	r2, [r3, #76]	; 0x4c

  tmp1 = hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG;
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d08:	617b      	str	r3, [r7, #20]
  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((tmp1 == I2S_MODE_MASTER_TX) || (tmp1 == I2S_MODE_SLAVE_TX))
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d10:	d002      	beq.n	8003d18 <HAL_I2SEx_TransmitReceive_DMA+0x118>
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d16b      	bne.n	8003df0 <HAL_I2SEx_TransmitReceive_DMA+0x1f0>
  {
    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003d18:	1d3b      	adds	r3, r7, #4
 8003d1a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a79      	ldr	r2, [pc, #484]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d101      	bne.n	8003d2e <HAL_I2SEx_TransmitReceive_DMA+0x12e>
 8003d2a:	4b79      	ldr	r3, [pc, #484]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d2c:	e001      	b.n	8003d32 <HAL_I2SEx_TransmitReceive_DMA+0x132>
 8003d2e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d32:	330c      	adds	r3, #12
 8003d34:	4619      	mov	r1, r3
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	f7fe f8c6 	bl	8001ed0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a70      	ldr	r2, [pc, #448]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d101      	bne.n	8003d52 <HAL_I2SEx_TransmitReceive_DMA+0x152>
 8003d4e:	4b70      	ldr	r3, [pc, #448]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d50:	e001      	b.n	8003d56 <HAL_I2SEx_TransmitReceive_DMA+0x156>
 8003d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	496b      	ldr	r1, [pc, #428]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003d5e:	428b      	cmp	r3, r1
 8003d60:	d101      	bne.n	8003d66 <HAL_I2SEx_TransmitReceive_DMA+0x166>
 8003d62:	4b6b      	ldr	r3, [pc, #428]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003d64:	e001      	b.n	8003d6a <HAL_I2SEx_TransmitReceive_DMA+0x16a>
 8003d66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d6a:	f042 0201 	orr.w	r2, r2, #1
 8003d6e:	605a      	str	r2, [r3, #4]

    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003d70:	f107 0308 	add.w	r3, r7, #8
 8003d74:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&hi2s->Instance->DR, hi2s->TxXferSize);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	6819      	ldr	r1, [r3, #0]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	330c      	adds	r3, #12
 8003d84:	461a      	mov	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d8a:	b29b      	uxth	r3, r3
 8003d8c:	f7fe f8a0 	bl	8001ed0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685a      	ldr	r2, [r3, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f042 0202 	orr.w	r2, r2, #2
 8003d9e:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dae:	f000 809e 	beq.w	8003eee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    {
      /* Enable I2Sext(receiver) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	4a55      	ldr	r2, [pc, #340]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003db8:	4293      	cmp	r3, r2
 8003dba:	d101      	bne.n	8003dc0 <HAL_I2SEx_TransmitReceive_DMA+0x1c0>
 8003dbc:	4b54      	ldr	r3, [pc, #336]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003dbe:	e001      	b.n	8003dc4 <HAL_I2SEx_TransmitReceive_DMA+0x1c4>
 8003dc0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dc4:	69da      	ldr	r2, [r3, #28]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	4950      	ldr	r1, [pc, #320]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003dcc:	428b      	cmp	r3, r1
 8003dce:	d101      	bne.n	8003dd4 <HAL_I2SEx_TransmitReceive_DMA+0x1d4>
 8003dd0:	4b4f      	ldr	r3, [pc, #316]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003dd2:	e001      	b.n	8003dd8 <HAL_I2SEx_TransmitReceive_DMA+0x1d8>
 8003dd4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dd8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ddc:	61da      	str	r2, [r3, #28]

      /* Enable I2S peripheral after the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003dec:	61da      	str	r2, [r3, #28]
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003dee:	e07e      	b.n	8003eee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }
  else
  {
    /* Check if Master Receiver mode is selected */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	69db      	ldr	r3, [r3, #28]
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003dfe:	d10a      	bne.n	8003e16 <HAL_I2SEx_TransmitReceive_DMA+0x216>
    {
      /* Clear the Overrun Flag by a read operation on the SPI_DR register followed by a read
      access to the SPI_SR register. */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e00:	2300      	movs	r3, #0
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	613b      	str	r3, [r7, #16]
 8003e14:	693b      	ldr	r3, [r7, #16]
    }
    /* Enable the Tx DMA Stream */
    tmp = (uint32_t *)&pTxData;
 8003e16:	f107 0308 	add.w	r3, r7, #8
 8003e1a:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmatx, *(uint32_t *)tmp, (uint32_t)&I2SxEXT(hi2s->Instance)->DR, hi2s->TxXferSize);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003e20:	69bb      	ldr	r3, [r7, #24]
 8003e22:	6819      	ldr	r1, [r3, #0]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a38      	ldr	r2, [pc, #224]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d101      	bne.n	8003e32 <HAL_I2SEx_TransmitReceive_DMA+0x232>
 8003e2e:	4b38      	ldr	r3, [pc, #224]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e30:	e001      	b.n	8003e36 <HAL_I2SEx_TransmitReceive_DMA+0x236>
 8003e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e36:	330c      	adds	r3, #12
 8003e38:	461a      	mov	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e3e:	b29b      	uxth	r3, r3
 8003e40:	f7fe f846 	bl	8001ed0 <HAL_DMA_Start_IT>

    /* Enable Tx DMA Request */
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a30      	ldr	r2, [pc, #192]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d101      	bne.n	8003e52 <HAL_I2SEx_TransmitReceive_DMA+0x252>
 8003e4e:	4b30      	ldr	r3, [pc, #192]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e50:	e001      	b.n	8003e56 <HAL_I2SEx_TransmitReceive_DMA+0x256>
 8003e52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e56:	685a      	ldr	r2, [r3, #4]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	492b      	ldr	r1, [pc, #172]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003e5e:	428b      	cmp	r3, r1
 8003e60:	d101      	bne.n	8003e66 <HAL_I2SEx_TransmitReceive_DMA+0x266>
 8003e62:	4b2b      	ldr	r3, [pc, #172]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003e64:	e001      	b.n	8003e6a <HAL_I2SEx_TransmitReceive_DMA+0x26a>
 8003e66:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e6a:	f042 0202 	orr.w	r2, r2, #2
 8003e6e:	605a      	str	r2, [r3, #4]

    /* Enable the Rx DMA Stream */
    tmp = (uint32_t *)&pRxData;
 8003e70:	1d3b      	adds	r3, r7, #4
 8003e72:	61bb      	str	r3, [r7, #24]
    HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, *(uint32_t *)tmp, hi2s->RxXferSize);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	330c      	adds	r3, #12
 8003e7e:	4619      	mov	r1, r3
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	681a      	ldr	r2, [r3, #0]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	f7fe f821 	bl	8001ed0 <HAL_DMA_Start_IT>

    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685a      	ldr	r2, [r3, #4]
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f042 0201 	orr.w	r2, r2, #1
 8003e9c:	605a      	str	r2, [r3, #4]

    /* Check if the I2S is already enabled */
    if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SE) != SPI_I2SCFGR_I2SE)
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eac:	d01e      	beq.n	8003eec <HAL_I2SEx_TransmitReceive_DMA+0x2ec>
    {
      /* Enable I2Sext(transmitter) before enabling I2Sx peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	4a16      	ldr	r2, [pc, #88]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003eb4:	4293      	cmp	r3, r2
 8003eb6:	d101      	bne.n	8003ebc <HAL_I2SEx_TransmitReceive_DMA+0x2bc>
 8003eb8:	4b15      	ldr	r3, [pc, #84]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003eba:	e001      	b.n	8003ec0 <HAL_I2SEx_TransmitReceive_DMA+0x2c0>
 8003ebc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ec0:	69da      	ldr	r2, [r3, #28]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4911      	ldr	r1, [pc, #68]	; (8003f0c <HAL_I2SEx_TransmitReceive_DMA+0x30c>)
 8003ec8:	428b      	cmp	r3, r1
 8003eca:	d101      	bne.n	8003ed0 <HAL_I2SEx_TransmitReceive_DMA+0x2d0>
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <HAL_I2SEx_TransmitReceive_DMA+0x310>)
 8003ece:	e001      	b.n	8003ed4 <HAL_I2SEx_TransmitReceive_DMA+0x2d4>
 8003ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ed4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ed8:	61da      	str	r2, [r3, #28]
      /* Enable I2S peripheral before the I2Sext */
      __HAL_I2S_ENABLE(hi2s);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ee8:	61da      	str	r2, [r3, #28]
 8003eea:	e000      	b.n	8003eee <HAL_I2SEx_TransmitReceive_DMA+0x2ee>
    }
  }

error :
 8003eec:	bf00      	nop
  __HAL_UNLOCK(hi2s);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return errorcode;
 8003ef6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3720      	adds	r7, #32
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	080041bd 	.word	0x080041bd
 8003f04:	080041d9 	.word	0x080041d9
 8003f08:	080042b1 	.word	0x080042b1
 8003f0c:	40003800 	.word	0x40003800
 8003f10:	40003400 	.word	0x40003400

08003f14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	4a92      	ldr	r2, [pc, #584]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d101      	bne.n	8003f32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003f2e:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f30:	e001      	b.n	8003f36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003f32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a8b      	ldr	r2, [pc, #556]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d101      	bne.n	8003f50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003f4c:	4b8a      	ldr	r3, [pc, #552]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f4e:	e001      	b.n	8003f54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003f50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f54:	685b      	ldr	r3, [r3, #4]
 8003f56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	685b      	ldr	r3, [r3, #4]
 8003f5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f60:	d004      	beq.n	8003f6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	f040 8099 	bne.w	800409e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003f6c:	69fb      	ldr	r3, [r7, #28]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d107      	bne.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d002      	beq.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f000 f9d5 	bl	8004330 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003f86:	69bb      	ldr	r3, [r7, #24]
 8003f88:	f003 0301 	and.w	r3, r3, #1
 8003f8c:	2b01      	cmp	r3, #1
 8003f8e:	d107      	bne.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 fa78 	bl	8004490 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003fa0:	69bb      	ldr	r3, [r7, #24]
 8003fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003fa6:	2b40      	cmp	r3, #64	; 0x40
 8003fa8:	d13a      	bne.n	8004020 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	f003 0320 	and.w	r3, r3, #32
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d035      	beq.n	8004020 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a6e      	ldr	r2, [pc, #440]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d101      	bne.n	8003fc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003fbe:	4b6e      	ldr	r3, [pc, #440]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fc0:	e001      	b.n	8003fc6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003fc2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fc6:	685a      	ldr	r2, [r3, #4]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4969      	ldr	r1, [pc, #420]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003fce:	428b      	cmp	r3, r1
 8003fd0:	d101      	bne.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003fd2:	4b69      	ldr	r3, [pc, #420]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003fd4:	e001      	b.n	8003fda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003fd6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fde:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003ff0:	2300      	movs	r3, #0
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68db      	ldr	r3, [r3, #12]
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004012:	f043 0202 	orr.w	r2, r3, #2
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7ff fcfe 	bl	8003a1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	f003 0308 	and.w	r3, r3, #8
 8004026:	2b08      	cmp	r3, #8
 8004028:	f040 80c3 	bne.w	80041b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	f003 0320 	and.w	r3, r3, #32
 8004032:	2b00      	cmp	r3, #0
 8004034:	f000 80bd 	beq.w	80041b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004046:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4a49      	ldr	r2, [pc, #292]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d101      	bne.n	8004056 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004054:	e001      	b.n	800405a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004056:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4944      	ldr	r1, [pc, #272]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004062:	428b      	cmp	r3, r1
 8004064:	d101      	bne.n	800406a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004066:	4b44      	ldr	r3, [pc, #272]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004068:	e001      	b.n	800406e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800406a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800406e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004072:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004074:	2300      	movs	r3, #0
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	60bb      	str	r3, [r7, #8]
 8004080:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	f043 0204 	orr.w	r2, r3, #4
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff fcc0 	bl	8003a1c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800409c:	e089      	b.n	80041b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f003 0302 	and.w	r3, r3, #2
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d107      	bne.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d002      	beq.n	80040b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f96e 	bl	8004394 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80040b8:	69fb      	ldr	r3, [r7, #28]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d107      	bne.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f9ad 	bl	800442c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d12f      	bne.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	f003 0320 	and.w	r3, r3, #32
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d02a      	beq.n	800413c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	685a      	ldr	r2, [r3, #4]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80040f4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a1e      	ldr	r2, [pc, #120]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d101      	bne.n	8004104 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004100:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004102:	e001      	b.n	8004108 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004104:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4919      	ldr	r1, [pc, #100]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004110:	428b      	cmp	r3, r1
 8004112:	d101      	bne.n	8004118 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004114:	4b18      	ldr	r3, [pc, #96]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004116:	e001      	b.n	800411c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004118:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800411c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004120:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800412e:	f043 0202 	orr.w	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f7ff fc70 	bl	8003a1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	f003 0308 	and.w	r3, r3, #8
 8004142:	2b08      	cmp	r3, #8
 8004144:	d136      	bne.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f003 0320 	and.w	r3, r3, #32
 800414c:	2b00      	cmp	r3, #0
 800414e:	d031      	beq.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a07      	ldr	r2, [pc, #28]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d101      	bne.n	800415e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800415a:	4b07      	ldr	r3, [pc, #28]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800415c:	e001      	b.n	8004162 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800415e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4902      	ldr	r1, [pc, #8]	; (8004174 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800416a:	428b      	cmp	r3, r1
 800416c:	d106      	bne.n	800417c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800416e:	4b02      	ldr	r3, [pc, #8]	; (8004178 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004170:	e006      	b.n	8004180 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004172:	bf00      	nop
 8004174:	40003800 	.word	0x40003800
 8004178:	40003400 	.word	0x40003400
 800417c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004180:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004184:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004194:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041a2:	f043 0204 	orr.w	r2, r3, #4
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80041aa:	6878      	ldr	r0, [r7, #4]
 80041ac:	f7ff fc36 	bl	8003a1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041b0:	e000      	b.n	80041b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80041b2:	bf00      	nop
}
 80041b4:	bf00      	nop
 80041b6:	3720      	adds	r7, #32
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <I2SEx_TxRxDMAHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMAHalfCplt(DMA_HandleTypeDef *hdma)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b084      	sub	sp, #16
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041c8:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx Half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxHalfCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxHalfCpltCallback(hi2s);
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7fc fbb2 	bl	8000934 <HAL_I2SEx_TxRxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80041d0:	bf00      	nop
 80041d2:	3710      	adds	r7, #16
 80041d4:	46bd      	mov	sp, r7
 80041d6:	bd80      	pop	{r7, pc}

080041d8 <I2SEx_TxRxDMACplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void I2SEx_TxRxDMACplt(DMA_HandleTypeDef *hdma)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	60fb      	str	r3, [r7, #12]

  /* If DMA is configured in DMA_NORMAL mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d155      	bne.n	800429a <I2SEx_TxRxDMACplt+0xc2>
  {
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	69db      	ldr	r3, [r3, #28]
 80041f4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fc:	d006      	beq.n	800420c <I2SEx_TxRxDMACplt+0x34>
        ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_SLAVE_TX))
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f403 7340 	and.w	r3, r3, #768	; 0x300
    if (((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_TX) || \
 8004208:	2b00      	cmp	r3, #0
 800420a:	d11e      	bne.n	800424a <I2SEx_TxRxDMACplt+0x72>
    /* Disable Tx & Rx DMA Requests */
    {
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a25      	ldr	r2, [pc, #148]	; (80042a8 <I2SEx_TxRxDMACplt+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d101      	bne.n	800421a <I2SEx_TxRxDMACplt+0x42>
 8004216:	4b25      	ldr	r3, [pc, #148]	; (80042ac <I2SEx_TxRxDMACplt+0xd4>)
 8004218:	e001      	b.n	800421e <I2SEx_TxRxDMACplt+0x46>
 800421a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800421e:	685a      	ldr	r2, [r3, #4]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4920      	ldr	r1, [pc, #128]	; (80042a8 <I2SEx_TxRxDMACplt+0xd0>)
 8004226:	428b      	cmp	r3, r1
 8004228:	d101      	bne.n	800422e <I2SEx_TxRxDMACplt+0x56>
 800422a:	4b20      	ldr	r3, [pc, #128]	; (80042ac <I2SEx_TxRxDMACplt+0xd4>)
 800422c:	e001      	b.n	8004232 <I2SEx_TxRxDMACplt+0x5a>
 800422e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004232:	f022 0201 	bic.w	r2, r2, #1
 8004236:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685a      	ldr	r2, [r3, #4]
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0202 	bic.w	r2, r2, #2
 8004246:	605a      	str	r2, [r3, #4]
 8004248:	e01d      	b.n	8004286 <I2SEx_TxRxDMACplt+0xae>
    }
    else
    {
      CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685a      	ldr	r2, [r3, #4]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0201 	bic.w	r2, r2, #1
 8004258:	605a      	str	r2, [r3, #4]
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4a12      	ldr	r2, [pc, #72]	; (80042a8 <I2SEx_TxRxDMACplt+0xd0>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d101      	bne.n	8004268 <I2SEx_TxRxDMACplt+0x90>
 8004264:	4b11      	ldr	r3, [pc, #68]	; (80042ac <I2SEx_TxRxDMACplt+0xd4>)
 8004266:	e001      	b.n	800426c <I2SEx_TxRxDMACplt+0x94>
 8004268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	490d      	ldr	r1, [pc, #52]	; (80042a8 <I2SEx_TxRxDMACplt+0xd0>)
 8004274:	428b      	cmp	r3, r1
 8004276:	d101      	bne.n	800427c <I2SEx_TxRxDMACplt+0xa4>
 8004278:	4b0c      	ldr	r3, [pc, #48]	; (80042ac <I2SEx_TxRxDMACplt+0xd4>)
 800427a:	e001      	b.n	8004280 <I2SEx_TxRxDMACplt+0xa8>
 800427c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004280:	f022 0202 	bic.w	r2, r2, #2
 8004284:	605a      	str	r2, [r3, #4]
    }

    hi2s->RxXferCount = 0U;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	865a      	strh	r2, [r3, #50]	; 0x32
    hi2s->TxXferCount = 0U;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	855a      	strh	r2, [r3, #42]	; 0x2a

    hi2s->State = HAL_I2S_STATE_READY;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxRxCpltCallback(hi2s);
#else
  HAL_I2SEx_TxRxCpltCallback(hi2s);
 800429a:	68f8      	ldr	r0, [r7, #12]
 800429c:	f7fc fb68 	bl	8000970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80042a0:	bf00      	nop
 80042a2:	3710      	adds	r7, #16
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40003800 	.word	0x40003800
 80042ac:	40003400 	.word	0x40003400

080042b0 <I2SEx_TxRxDMAError>:
  * @brief  DMA I2S communication error callback
  * @param  hdma DMA handle
  * @retval None
  */
static void I2SEx_TxRxDMAError(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042bc:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f022 0203 	bic.w	r2, r2, #3
 80042cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	4a15      	ldr	r2, [pc, #84]	; (8004328 <I2SEx_TxRxDMAError+0x78>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d101      	bne.n	80042dc <I2SEx_TxRxDMAError+0x2c>
 80042d8:	4b14      	ldr	r3, [pc, #80]	; (800432c <I2SEx_TxRxDMAError+0x7c>)
 80042da:	e001      	b.n	80042e0 <I2SEx_TxRxDMAError+0x30>
 80042dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	4910      	ldr	r1, [pc, #64]	; (8004328 <I2SEx_TxRxDMAError+0x78>)
 80042e8:	428b      	cmp	r3, r1
 80042ea:	d101      	bne.n	80042f0 <I2SEx_TxRxDMAError+0x40>
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <I2SEx_TxRxDMAError+0x7c>)
 80042ee:	e001      	b.n	80042f4 <I2SEx_TxRxDMAError+0x44>
 80042f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80042f4:	f022 0203 	bic.w	r2, r2, #3
 80042f8:	605a      	str	r2, [r3, #4]

  hi2s->TxXferCount = 0U;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	2200      	movs	r2, #0
 8004304:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2201      	movs	r2, #1
 800430a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004312:	f043 0208 	orr.w	r2, r3, #8
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fb7e 	bl	8003a1c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8004320:	bf00      	nop
 8004322:	3710      	adds	r7, #16
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}
 8004328:	40003800 	.word	0x40003800
 800432c:	40003400 	.word	0x40003400

08004330 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	b082      	sub	sp, #8
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800433c:	1c99      	adds	r1, r3, #2
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6251      	str	r1, [r2, #36]	; 0x24
 8004342:	881a      	ldrh	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d113      	bne.n	800438a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004370:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004376:	b29b      	uxth	r3, r3
 8004378:	2b00      	cmp	r3, #0
 800437a:	d106      	bne.n	800438a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f7fc faf3 	bl	8000970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800438a:	bf00      	nop
 800438c:	3708      	adds	r7, #8
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b082      	sub	sp, #8
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	1c99      	adds	r1, r3, #2
 80043a2:	687a      	ldr	r2, [r7, #4]
 80043a4:	6251      	str	r1, [r2, #36]	; 0x24
 80043a6:	8819      	ldrh	r1, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a1d      	ldr	r2, [pc, #116]	; (8004424 <I2SEx_TxISR_I2SExt+0x90>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d101      	bne.n	80043b6 <I2SEx_TxISR_I2SExt+0x22>
 80043b2:	4b1d      	ldr	r3, [pc, #116]	; (8004428 <I2SEx_TxISR_I2SExt+0x94>)
 80043b4:	e001      	b.n	80043ba <I2SEx_TxISR_I2SExt+0x26>
 80043b6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ba:	460a      	mov	r2, r1
 80043bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b29a      	uxth	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d121      	bne.n	800441a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a12      	ldr	r2, [pc, #72]	; (8004424 <I2SEx_TxISR_I2SExt+0x90>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d101      	bne.n	80043e4 <I2SEx_TxISR_I2SExt+0x50>
 80043e0:	4b11      	ldr	r3, [pc, #68]	; (8004428 <I2SEx_TxISR_I2SExt+0x94>)
 80043e2:	e001      	b.n	80043e8 <I2SEx_TxISR_I2SExt+0x54>
 80043e4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	490d      	ldr	r1, [pc, #52]	; (8004424 <I2SEx_TxISR_I2SExt+0x90>)
 80043f0:	428b      	cmp	r3, r1
 80043f2:	d101      	bne.n	80043f8 <I2SEx_TxISR_I2SExt+0x64>
 80043f4:	4b0c      	ldr	r3, [pc, #48]	; (8004428 <I2SEx_TxISR_I2SExt+0x94>)
 80043f6:	e001      	b.n	80043fc <I2SEx_TxISR_I2SExt+0x68>
 80043f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043fc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004400:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004406:	b29b      	uxth	r3, r3
 8004408:	2b00      	cmp	r3, #0
 800440a:	d106      	bne.n	800441a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	f7fc faab 	bl	8000970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800441a:	bf00      	nop
 800441c:	3708      	adds	r7, #8
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	40003800 	.word	0x40003800
 8004428:	40003400 	.word	0x40003400

0800442c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68d8      	ldr	r0, [r3, #12]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800443e:	1c99      	adds	r1, r3, #2
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004444:	b282      	uxth	r2, r0
 8004446:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800444c:	b29b      	uxth	r3, r3
 800444e:	3b01      	subs	r3, #1
 8004450:	b29a      	uxth	r2, r3
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800445a:	b29b      	uxth	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	d113      	bne.n	8004488 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800446e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004474:	b29b      	uxth	r3, r3
 8004476:	2b00      	cmp	r3, #0
 8004478:	d106      	bne.n	8004488 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2201      	movs	r2, #1
 800447e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f7fc fa74 	bl	8000970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004488:	bf00      	nop
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}

08004490 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b082      	sub	sp, #8
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	4a20      	ldr	r2, [pc, #128]	; (8004520 <I2SEx_RxISR_I2SExt+0x90>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d101      	bne.n	80044a6 <I2SEx_RxISR_I2SExt+0x16>
 80044a2:	4b20      	ldr	r3, [pc, #128]	; (8004524 <I2SEx_RxISR_I2SExt+0x94>)
 80044a4:	e001      	b.n	80044aa <I2SEx_RxISR_I2SExt+0x1a>
 80044a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044aa:	68d8      	ldr	r0, [r3, #12]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b0:	1c99      	adds	r1, r3, #2
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	62d1      	str	r1, [r2, #44]	; 0x2c
 80044b6:	b282      	uxth	r2, r0
 80044b8:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044be:	b29b      	uxth	r3, r3
 80044c0:	3b01      	subs	r3, #1
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80044cc:	b29b      	uxth	r3, r3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d121      	bne.n	8004516 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	4a12      	ldr	r2, [pc, #72]	; (8004520 <I2SEx_RxISR_I2SExt+0x90>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d101      	bne.n	80044e0 <I2SEx_RxISR_I2SExt+0x50>
 80044dc:	4b11      	ldr	r3, [pc, #68]	; (8004524 <I2SEx_RxISR_I2SExt+0x94>)
 80044de:	e001      	b.n	80044e4 <I2SEx_RxISR_I2SExt+0x54>
 80044e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044e4:	685a      	ldr	r2, [r3, #4]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	490d      	ldr	r1, [pc, #52]	; (8004520 <I2SEx_RxISR_I2SExt+0x90>)
 80044ec:	428b      	cmp	r3, r1
 80044ee:	d101      	bne.n	80044f4 <I2SEx_RxISR_I2SExt+0x64>
 80044f0:	4b0c      	ldr	r3, [pc, #48]	; (8004524 <I2SEx_RxISR_I2SExt+0x94>)
 80044f2:	e001      	b.n	80044f8 <I2SEx_RxISR_I2SExt+0x68>
 80044f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80044f8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044fc:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004502:	b29b      	uxth	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	d106      	bne.n	8004516 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f7fc fa2d 	bl	8000970 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	40003800 	.word	0x40003800
 8004524:	40003400 	.word	0x40003400

08004528 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e267      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0301 	and.w	r3, r3, #1
 8004542:	2b00      	cmp	r3, #0
 8004544:	d075      	beq.n	8004632 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004546:	4b88      	ldr	r3, [pc, #544]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 030c 	and.w	r3, r3, #12
 800454e:	2b04      	cmp	r3, #4
 8004550:	d00c      	beq.n	800456c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004552:	4b85      	ldr	r3, [pc, #532]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800455a:	2b08      	cmp	r3, #8
 800455c:	d112      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800455e:	4b82      	ldr	r3, [pc, #520]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800456a:	d10b      	bne.n	8004584 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800456c:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d05b      	beq.n	8004630 <HAL_RCC_OscConfig+0x108>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d157      	bne.n	8004630 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004580:	2301      	movs	r3, #1
 8004582:	e242      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800458c:	d106      	bne.n	800459c <HAL_RCC_OscConfig+0x74>
 800458e:	4b76      	ldr	r3, [pc, #472]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	4a75      	ldr	r2, [pc, #468]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004598:	6013      	str	r3, [r2, #0]
 800459a:	e01d      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80045a4:	d10c      	bne.n	80045c0 <HAL_RCC_OscConfig+0x98>
 80045a6:	4b70      	ldr	r3, [pc, #448]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a6f      	ldr	r2, [pc, #444]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80045b0:	6013      	str	r3, [r2, #0]
 80045b2:	4b6d      	ldr	r3, [pc, #436]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a6c      	ldr	r2, [pc, #432]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e00b      	b.n	80045d8 <HAL_RCC_OscConfig+0xb0>
 80045c0:	4b69      	ldr	r3, [pc, #420]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a68      	ldr	r2, [pc, #416]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045ca:	6013      	str	r3, [r2, #0]
 80045cc:	4b66      	ldr	r3, [pc, #408]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a65      	ldr	r2, [pc, #404]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d013      	beq.n	8004608 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fd f848 	bl	8001674 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fd f844 	bl	8001674 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e207      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045fa:	4b5b      	ldr	r3, [pc, #364]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0f0      	beq.n	80045e8 <HAL_RCC_OscConfig+0xc0>
 8004606:	e014      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004608:	f7fd f834 	bl	8001674 <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004610:	f7fd f830 	bl	8001674 <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b64      	cmp	r3, #100	; 0x64
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1f3      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004622:	4b51      	ldr	r3, [pc, #324]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d1f0      	bne.n	8004610 <HAL_RCC_OscConfig+0xe8>
 800462e:	e000      	b.n	8004632 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004630:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 0302 	and.w	r3, r3, #2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d063      	beq.n	8004706 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800463e:	4b4a      	ldr	r3, [pc, #296]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 030c 	and.w	r3, r3, #12
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00b      	beq.n	8004662 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800464a:	4b47      	ldr	r3, [pc, #284]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004652:	2b08      	cmp	r3, #8
 8004654:	d11c      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004656:	4b44      	ldr	r3, [pc, #272]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800465e:	2b00      	cmp	r3, #0
 8004660:	d116      	bne.n	8004690 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004662:	4b41      	ldr	r3, [pc, #260]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f003 0302 	and.w	r3, r3, #2
 800466a:	2b00      	cmp	r3, #0
 800466c:	d005      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	68db      	ldr	r3, [r3, #12]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d001      	beq.n	800467a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e1c7      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800467a:	4b3b      	ldr	r3, [pc, #236]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	00db      	lsls	r3, r3, #3
 8004688:	4937      	ldr	r1, [pc, #220]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800468a:	4313      	orrs	r3, r2
 800468c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800468e:	e03a      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	68db      	ldr	r3, [r3, #12]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d020      	beq.n	80046da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004698:	4b34      	ldr	r3, [pc, #208]	; (800476c <HAL_RCC_OscConfig+0x244>)
 800469a:	2201      	movs	r2, #1
 800469c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800469e:	f7fc ffe9 	bl	8001674 <HAL_GetTick>
 80046a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046a4:	e008      	b.n	80046b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046a6:	f7fc ffe5 	bl	8001674 <HAL_GetTick>
 80046aa:	4602      	mov	r2, r0
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	d901      	bls.n	80046b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046b4:	2303      	movs	r3, #3
 80046b6:	e1a8      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046b8:	4b2b      	ldr	r3, [pc, #172]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d0f0      	beq.n	80046a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046c4:	4b28      	ldr	r3, [pc, #160]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	00db      	lsls	r3, r3, #3
 80046d2:	4925      	ldr	r1, [pc, #148]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	600b      	str	r3, [r1, #0]
 80046d8:	e015      	b.n	8004706 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046da:	4b24      	ldr	r3, [pc, #144]	; (800476c <HAL_RCC_OscConfig+0x244>)
 80046dc:	2200      	movs	r2, #0
 80046de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e0:	f7fc ffc8 	bl	8001674 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80046e8:	f7fc ffc4 	bl	8001674 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b02      	cmp	r3, #2
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e187      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046fa:	4b1b      	ldr	r3, [pc, #108]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0308 	and.w	r3, r3, #8
 800470e:	2b00      	cmp	r3, #0
 8004710:	d036      	beq.n	8004780 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800471a:	4b15      	ldr	r3, [pc, #84]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800471c:	2201      	movs	r2, #1
 800471e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004720:	f7fc ffa8 	bl	8001674 <HAL_GetTick>
 8004724:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004726:	e008      	b.n	800473a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004728:	f7fc ffa4 	bl	8001674 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	2b02      	cmp	r3, #2
 8004734:	d901      	bls.n	800473a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e167      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800473a:	4b0b      	ldr	r3, [pc, #44]	; (8004768 <HAL_RCC_OscConfig+0x240>)
 800473c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d0f0      	beq.n	8004728 <HAL_RCC_OscConfig+0x200>
 8004746:	e01b      	b.n	8004780 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004748:	4b09      	ldr	r3, [pc, #36]	; (8004770 <HAL_RCC_OscConfig+0x248>)
 800474a:	2200      	movs	r2, #0
 800474c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800474e:	f7fc ff91 	bl	8001674 <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	e00e      	b.n	8004774 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004756:	f7fc ff8d 	bl	8001674 <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	2b02      	cmp	r3, #2
 8004762:	d907      	bls.n	8004774 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004764:	2303      	movs	r3, #3
 8004766:	e150      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004768:	40023800 	.word	0x40023800
 800476c:	42470000 	.word	0x42470000
 8004770:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004774:	4b88      	ldr	r3, [pc, #544]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004776:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1ea      	bne.n	8004756 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f003 0304 	and.w	r3, r3, #4
 8004788:	2b00      	cmp	r3, #0
 800478a:	f000 8097 	beq.w	80048bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800478e:	2300      	movs	r3, #0
 8004790:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004792:	4b81      	ldr	r3, [pc, #516]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004796:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800479a:	2b00      	cmp	r3, #0
 800479c:	d10f      	bne.n	80047be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	4b7d      	ldr	r3, [pc, #500]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a6:	4a7c      	ldr	r2, [pc, #496]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047ac:	6413      	str	r3, [r2, #64]	; 0x40
 80047ae:	4b7a      	ldr	r3, [pc, #488]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80047b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047b6:	60bb      	str	r3, [r7, #8]
 80047b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047ba:	2301      	movs	r3, #1
 80047bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047be:	4b77      	ldr	r3, [pc, #476]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d118      	bne.n	80047fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ca:	4b74      	ldr	r3, [pc, #464]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a73      	ldr	r2, [pc, #460]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047d6:	f7fc ff4d 	bl	8001674 <HAL_GetTick>
 80047da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047dc:	e008      	b.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047de:	f7fc ff49 	bl	8001674 <HAL_GetTick>
 80047e2:	4602      	mov	r2, r0
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	1ad3      	subs	r3, r2, r3
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d901      	bls.n	80047f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e10c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047f0:	4b6a      	ldr	r3, [pc, #424]	; (800499c <HAL_RCC_OscConfig+0x474>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d0f0      	beq.n	80047de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d106      	bne.n	8004812 <HAL_RCC_OscConfig+0x2ea>
 8004804:	4b64      	ldr	r3, [pc, #400]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	4a63      	ldr	r2, [pc, #396]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800480a:	f043 0301 	orr.w	r3, r3, #1
 800480e:	6713      	str	r3, [r2, #112]	; 0x70
 8004810:	e01c      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	2b05      	cmp	r3, #5
 8004818:	d10c      	bne.n	8004834 <HAL_RCC_OscConfig+0x30c>
 800481a:	4b5f      	ldr	r3, [pc, #380]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800481c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800481e:	4a5e      	ldr	r2, [pc, #376]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004820:	f043 0304 	orr.w	r3, r3, #4
 8004824:	6713      	str	r3, [r2, #112]	; 0x70
 8004826:	4b5c      	ldr	r3, [pc, #368]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	4a5b      	ldr	r2, [pc, #364]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800482c:	f043 0301 	orr.w	r3, r3, #1
 8004830:	6713      	str	r3, [r2, #112]	; 0x70
 8004832:	e00b      	b.n	800484c <HAL_RCC_OscConfig+0x324>
 8004834:	4b58      	ldr	r3, [pc, #352]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004838:	4a57      	ldr	r2, [pc, #348]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	6713      	str	r3, [r2, #112]	; 0x70
 8004840:	4b55      	ldr	r3, [pc, #340]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004844:	4a54      	ldr	r2, [pc, #336]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004846:	f023 0304 	bic.w	r3, r3, #4
 800484a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d015      	beq.n	8004880 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004854:	f7fc ff0e 	bl	8001674 <HAL_GetTick>
 8004858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800485a:	e00a      	b.n	8004872 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800485c:	f7fc ff0a 	bl	8001674 <HAL_GetTick>
 8004860:	4602      	mov	r2, r0
 8004862:	693b      	ldr	r3, [r7, #16]
 8004864:	1ad3      	subs	r3, r2, r3
 8004866:	f241 3288 	movw	r2, #5000	; 0x1388
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e0cb      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004876:	f003 0302 	and.w	r3, r3, #2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d0ee      	beq.n	800485c <HAL_RCC_OscConfig+0x334>
 800487e:	e014      	b.n	80048aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004880:	f7fc fef8 	bl	8001674 <HAL_GetTick>
 8004884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004886:	e00a      	b.n	800489e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004888:	f7fc fef4 	bl	8001674 <HAL_GetTick>
 800488c:	4602      	mov	r2, r0
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	1ad3      	subs	r3, r2, r3
 8004892:	f241 3288 	movw	r2, #5000	; 0x1388
 8004896:	4293      	cmp	r3, r2
 8004898:	d901      	bls.n	800489e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e0b5      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489e:	4b3e      	ldr	r3, [pc, #248]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80048a2:	f003 0302 	and.w	r3, r3, #2
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d1ee      	bne.n	8004888 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048aa:	7dfb      	ldrb	r3, [r7, #23]
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d105      	bne.n	80048bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048b0:	4b39      	ldr	r3, [pc, #228]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b4:	4a38      	ldr	r2, [pc, #224]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80a1 	beq.w	8004a08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048c6:	4b34      	ldr	r3, [pc, #208]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	f003 030c 	and.w	r3, r3, #12
 80048ce:	2b08      	cmp	r3, #8
 80048d0:	d05c      	beq.n	800498c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	2b02      	cmp	r3, #2
 80048d8:	d141      	bne.n	800495e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048da:	4b31      	ldr	r3, [pc, #196]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 80048dc:	2200      	movs	r2, #0
 80048de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e0:	f7fc fec8 	bl	8001674 <HAL_GetTick>
 80048e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048e6:	e008      	b.n	80048fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048e8:	f7fc fec4 	bl	8001674 <HAL_GetTick>
 80048ec:	4602      	mov	r2, r0
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	1ad3      	subs	r3, r2, r3
 80048f2:	2b02      	cmp	r3, #2
 80048f4:	d901      	bls.n	80048fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80048f6:	2303      	movs	r3, #3
 80048f8:	e087      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048fa:	4b27      	ldr	r3, [pc, #156]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004902:	2b00      	cmp	r3, #0
 8004904:	d1f0      	bne.n	80048e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	69da      	ldr	r2, [r3, #28]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6a1b      	ldr	r3, [r3, #32]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004914:	019b      	lsls	r3, r3, #6
 8004916:	431a      	orrs	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800491c:	085b      	lsrs	r3, r3, #1
 800491e:	3b01      	subs	r3, #1
 8004920:	041b      	lsls	r3, r3, #16
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	061b      	lsls	r3, r3, #24
 800492a:	491b      	ldr	r1, [pc, #108]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 800492c:	4313      	orrs	r3, r2
 800492e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004930:	4b1b      	ldr	r3, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004932:	2201      	movs	r2, #1
 8004934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004936:	f7fc fe9d 	bl	8001674 <HAL_GetTick>
 800493a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800493c:	e008      	b.n	8004950 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800493e:	f7fc fe99 	bl	8001674 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	693b      	ldr	r3, [r7, #16]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d901      	bls.n	8004950 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800494c:	2303      	movs	r3, #3
 800494e:	e05c      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004950:	4b11      	ldr	r3, [pc, #68]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004958:	2b00      	cmp	r3, #0
 800495a:	d0f0      	beq.n	800493e <HAL_RCC_OscConfig+0x416>
 800495c:	e054      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800495e:	4b10      	ldr	r3, [pc, #64]	; (80049a0 <HAL_RCC_OscConfig+0x478>)
 8004960:	2200      	movs	r2, #0
 8004962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004964:	f7fc fe86 	bl	8001674 <HAL_GetTick>
 8004968:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800496a:	e008      	b.n	800497e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800496c:	f7fc fe82 	bl	8001674 <HAL_GetTick>
 8004970:	4602      	mov	r2, r0
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	1ad3      	subs	r3, r2, r3
 8004976:	2b02      	cmp	r3, #2
 8004978:	d901      	bls.n	800497e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800497a:	2303      	movs	r3, #3
 800497c:	e045      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800497e:	4b06      	ldr	r3, [pc, #24]	; (8004998 <HAL_RCC_OscConfig+0x470>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1f0      	bne.n	800496c <HAL_RCC_OscConfig+0x444>
 800498a:	e03d      	b.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	699b      	ldr	r3, [r3, #24]
 8004990:	2b01      	cmp	r3, #1
 8004992:	d107      	bne.n	80049a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e038      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
 8004998:	40023800 	.word	0x40023800
 800499c:	40007000 	.word	0x40007000
 80049a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049a4:	4b1b      	ldr	r3, [pc, #108]	; (8004a14 <HAL_RCC_OscConfig+0x4ec>)
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	699b      	ldr	r3, [r3, #24]
 80049ae:	2b01      	cmp	r3, #1
 80049b0:	d028      	beq.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049bc:	429a      	cmp	r2, r3
 80049be:	d121      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d11a      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049ce:	68fa      	ldr	r2, [r7, #12]
 80049d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80049d4:	4013      	ands	r3, r2
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80049da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049dc:	4293      	cmp	r3, r2
 80049de:	d111      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ea:	085b      	lsrs	r3, r3, #1
 80049ec:	3b01      	subs	r3, #1
 80049ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f0:	429a      	cmp	r2, r3
 80049f2:	d107      	bne.n	8004a04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d001      	beq.n	8004a08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e000      	b.n	8004a0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3718      	adds	r7, #24
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}
 8004a12:	bf00      	nop
 8004a14:	40023800 	.word	0x40023800

08004a18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d101      	bne.n	8004a2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e0cc      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a2c:	4b68      	ldr	r3, [pc, #416]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	683a      	ldr	r2, [r7, #0]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d90c      	bls.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a3a:	4b65      	ldr	r3, [pc, #404]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a3c:	683a      	ldr	r2, [r7, #0]
 8004a3e:	b2d2      	uxtb	r2, r2
 8004a40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a42:	4b63      	ldr	r3, [pc, #396]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0307 	and.w	r3, r3, #7
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d001      	beq.n	8004a54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	e0b8      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f003 0302 	and.w	r3, r3, #2
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d020      	beq.n	8004aa2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f003 0304 	and.w	r3, r3, #4
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d005      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a6c:	4b59      	ldr	r3, [pc, #356]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	4a58      	ldr	r2, [pc, #352]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004a76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0308 	and.w	r3, r3, #8
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d005      	beq.n	8004a90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a84:	4b53      	ldr	r3, [pc, #332]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4a52      	ldr	r2, [pc, #328]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004a8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a90:	4b50      	ldr	r3, [pc, #320]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	494d      	ldr	r1, [pc, #308]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f003 0301 	and.w	r3, r3, #1
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d044      	beq.n	8004b38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d107      	bne.n	8004ac6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ab6:	4b47      	ldr	r3, [pc, #284]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d119      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d003      	beq.n	8004ad6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ad2:	2b03      	cmp	r3, #3
 8004ad4:	d107      	bne.n	8004ae6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad6:	4b3f      	ldr	r3, [pc, #252]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d109      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e06f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ae6:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d101      	bne.n	8004af6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004af2:	2301      	movs	r3, #1
 8004af4:	e067      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004af6:	4b37      	ldr	r3, [pc, #220]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f023 0203 	bic.w	r2, r3, #3
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	4934      	ldr	r1, [pc, #208]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b04:	4313      	orrs	r3, r2
 8004b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b08:	f7fc fdb4 	bl	8001674 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b0e:	e00a      	b.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b10:	f7fc fdb0 	bl	8001674 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d901      	bls.n	8004b26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b22:	2303      	movs	r3, #3
 8004b24:	e04f      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b26:	4b2b      	ldr	r3, [pc, #172]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	f003 020c 	and.w	r2, r3, #12
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	009b      	lsls	r3, r3, #2
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d1eb      	bne.n	8004b10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004b38:	4b25      	ldr	r3, [pc, #148]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0307 	and.w	r3, r3, #7
 8004b40:	683a      	ldr	r2, [r7, #0]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d20c      	bcs.n	8004b60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b46:	4b22      	ldr	r3, [pc, #136]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b48:	683a      	ldr	r2, [r7, #0]
 8004b4a:	b2d2      	uxtb	r2, r2
 8004b4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b4e:	4b20      	ldr	r3, [pc, #128]	; (8004bd0 <HAL_RCC_ClockConfig+0x1b8>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0307 	and.w	r3, r3, #7
 8004b56:	683a      	ldr	r2, [r7, #0]
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d001      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b5c:	2301      	movs	r3, #1
 8004b5e:	e032      	b.n	8004bc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0304 	and.w	r3, r3, #4
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d008      	beq.n	8004b7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	4916      	ldr	r1, [pc, #88]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0308 	and.w	r3, r3, #8
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d009      	beq.n	8004b9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b8a:	4b12      	ldr	r3, [pc, #72]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	691b      	ldr	r3, [r3, #16]
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	490e      	ldr	r1, [pc, #56]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9a:	4313      	orrs	r3, r2
 8004b9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b9e:	f000 f821 	bl	8004be4 <HAL_RCC_GetSysClockFreq>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	091b      	lsrs	r3, r3, #4
 8004baa:	f003 030f 	and.w	r3, r3, #15
 8004bae:	490a      	ldr	r1, [pc, #40]	; (8004bd8 <HAL_RCC_ClockConfig+0x1c0>)
 8004bb0:	5ccb      	ldrb	r3, [r1, r3]
 8004bb2:	fa22 f303 	lsr.w	r3, r2, r3
 8004bb6:	4a09      	ldr	r2, [pc, #36]	; (8004bdc <HAL_RCC_ClockConfig+0x1c4>)
 8004bb8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004bba:	4b09      	ldr	r3, [pc, #36]	; (8004be0 <HAL_RCC_ClockConfig+0x1c8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f7fc fd14 	bl	80015ec <HAL_InitTick>

  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	40023c00 	.word	0x40023c00
 8004bd4:	40023800 	.word	0x40023800
 8004bd8:	08005b94 	.word	0x08005b94
 8004bdc:	20000004 	.word	0x20000004
 8004be0:	20000008 	.word	0x20000008

08004be4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004be4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004be8:	b090      	sub	sp, #64	; 0x40
 8004bea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004bec:	2300      	movs	r3, #0
 8004bee:	637b      	str	r3, [r7, #52]	; 0x34
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bfc:	4b59      	ldr	r3, [pc, #356]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 030c 	and.w	r3, r3, #12
 8004c04:	2b08      	cmp	r3, #8
 8004c06:	d00d      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x40>
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	f200 80a1 	bhi.w	8004d50 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d002      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0x34>
 8004c12:	2b04      	cmp	r3, #4
 8004c14:	d003      	beq.n	8004c1e <HAL_RCC_GetSysClockFreq+0x3a>
 8004c16:	e09b      	b.n	8004d50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c18:	4b53      	ldr	r3, [pc, #332]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004c1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004c1c:	e09b      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c1e:	4b53      	ldr	r3, [pc, #332]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004c22:	e098      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c24:	4b4f      	ldr	r3, [pc, #316]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c2e:	4b4d      	ldr	r3, [pc, #308]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c30:	685b      	ldr	r3, [r3, #4]
 8004c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d028      	beq.n	8004c8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c3a:	4b4a      	ldr	r3, [pc, #296]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	099b      	lsrs	r3, r3, #6
 8004c40:	2200      	movs	r2, #0
 8004c42:	623b      	str	r3, [r7, #32]
 8004c44:	627a      	str	r2, [r7, #36]	; 0x24
 8004c46:	6a3b      	ldr	r3, [r7, #32]
 8004c48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c4c:	2100      	movs	r1, #0
 8004c4e:	4b47      	ldr	r3, [pc, #284]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c50:	fb03 f201 	mul.w	r2, r3, r1
 8004c54:	2300      	movs	r3, #0
 8004c56:	fb00 f303 	mul.w	r3, r0, r3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	4a43      	ldr	r2, [pc, #268]	; (8004d6c <HAL_RCC_GetSysClockFreq+0x188>)
 8004c5e:	fba0 1202 	umull	r1, r2, r0, r2
 8004c62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004c64:	460a      	mov	r2, r1
 8004c66:	62ba      	str	r2, [r7, #40]	; 0x28
 8004c68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c6a:	4413      	add	r3, r2
 8004c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	2200      	movs	r2, #0
 8004c72:	61bb      	str	r3, [r7, #24]
 8004c74:	61fa      	str	r2, [r7, #28]
 8004c76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004c7e:	f7fb faa3 	bl	80001c8 <__aeabi_uldivmod>
 8004c82:	4602      	mov	r2, r0
 8004c84:	460b      	mov	r3, r1
 8004c86:	4613      	mov	r3, r2
 8004c88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c8a:	e053      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c8c:	4b35      	ldr	r3, [pc, #212]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	2200      	movs	r2, #0
 8004c94:	613b      	str	r3, [r7, #16]
 8004c96:	617a      	str	r2, [r7, #20]
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c9e:	f04f 0b00 	mov.w	fp, #0
 8004ca2:	4652      	mov	r2, sl
 8004ca4:	465b      	mov	r3, fp
 8004ca6:	f04f 0000 	mov.w	r0, #0
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	0159      	lsls	r1, r3, #5
 8004cb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cb4:	0150      	lsls	r0, r2, #5
 8004cb6:	4602      	mov	r2, r0
 8004cb8:	460b      	mov	r3, r1
 8004cba:	ebb2 080a 	subs.w	r8, r2, sl
 8004cbe:	eb63 090b 	sbc.w	r9, r3, fp
 8004cc2:	f04f 0200 	mov.w	r2, #0
 8004cc6:	f04f 0300 	mov.w	r3, #0
 8004cca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cd2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cd6:	ebb2 0408 	subs.w	r4, r2, r8
 8004cda:	eb63 0509 	sbc.w	r5, r3, r9
 8004cde:	f04f 0200 	mov.w	r2, #0
 8004ce2:	f04f 0300 	mov.w	r3, #0
 8004ce6:	00eb      	lsls	r3, r5, #3
 8004ce8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004cec:	00e2      	lsls	r2, r4, #3
 8004cee:	4614      	mov	r4, r2
 8004cf0:	461d      	mov	r5, r3
 8004cf2:	eb14 030a 	adds.w	r3, r4, sl
 8004cf6:	603b      	str	r3, [r7, #0]
 8004cf8:	eb45 030b 	adc.w	r3, r5, fp
 8004cfc:	607b      	str	r3, [r7, #4]
 8004cfe:	f04f 0200 	mov.w	r2, #0
 8004d02:	f04f 0300 	mov.w	r3, #0
 8004d06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d0a:	4629      	mov	r1, r5
 8004d0c:	028b      	lsls	r3, r1, #10
 8004d0e:	4621      	mov	r1, r4
 8004d10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d14:	4621      	mov	r1, r4
 8004d16:	028a      	lsls	r2, r1, #10
 8004d18:	4610      	mov	r0, r2
 8004d1a:	4619      	mov	r1, r3
 8004d1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d1e:	2200      	movs	r2, #0
 8004d20:	60bb      	str	r3, [r7, #8]
 8004d22:	60fa      	str	r2, [r7, #12]
 8004d24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d28:	f7fb fa4e 	bl	80001c8 <__aeabi_uldivmod>
 8004d2c:	4602      	mov	r2, r0
 8004d2e:	460b      	mov	r3, r1
 8004d30:	4613      	mov	r3, r2
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d34:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	0c1b      	lsrs	r3, r3, #16
 8004d3a:	f003 0303 	and.w	r3, r3, #3
 8004d3e:	3301      	adds	r3, #1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004d44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d4e:	e002      	b.n	8004d56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d50:	4b05      	ldr	r3, [pc, #20]	; (8004d68 <HAL_RCC_GetSysClockFreq+0x184>)
 8004d52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004d54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3740      	adds	r7, #64	; 0x40
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00f42400 	.word	0x00f42400
 8004d6c:	018cba80 	.word	0x018cba80

08004d70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d74:	4b03      	ldr	r3, [pc, #12]	; (8004d84 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d76:	681b      	ldr	r3, [r3, #0]
}
 8004d78:	4618      	mov	r0, r3
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000004 	.word	0x20000004

08004d88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d88:	b580      	push	{r7, lr}
 8004d8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d8c:	f7ff fff0 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004d90:	4602      	mov	r2, r0
 8004d92:	4b05      	ldr	r3, [pc, #20]	; (8004da8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	0a9b      	lsrs	r3, r3, #10
 8004d98:	f003 0307 	and.w	r3, r3, #7
 8004d9c:	4903      	ldr	r1, [pc, #12]	; (8004dac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d9e:	5ccb      	ldrb	r3, [r1, r3]
 8004da0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004da4:	4618      	mov	r0, r3
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	40023800 	.word	0x40023800
 8004dac:	08005ba4 	.word	0x08005ba4

08004db0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004db4:	f7ff ffdc 	bl	8004d70 <HAL_RCC_GetHCLKFreq>
 8004db8:	4602      	mov	r2, r0
 8004dba:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	0b5b      	lsrs	r3, r3, #13
 8004dc0:	f003 0307 	and.w	r3, r3, #7
 8004dc4:	4903      	ldr	r1, [pc, #12]	; (8004dd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dc6:	5ccb      	ldrb	r3, [r1, r3]
 8004dc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dcc:	4618      	mov	r0, r3
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	08005ba4 	.word	0x08005ba4

08004dd8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0301 	and.w	r3, r3, #1
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d105      	bne.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d035      	beq.n	8004e6c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004e00:	4b62      	ldr	r3, [pc, #392]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e06:	f7fc fc35 	bl	8001674 <HAL_GetTick>
 8004e0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e0c:	e008      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e0e:	f7fc fc31 	bl	8001674 <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e0b0      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004e20:	4b5b      	ldr	r3, [pc, #364]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d1f0      	bne.n	8004e0e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	685b      	ldr	r3, [r3, #4]
 8004e30:	019a      	lsls	r2, r3, #6
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	071b      	lsls	r3, r3, #28
 8004e38:	4955      	ldr	r1, [pc, #340]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004e40:	4b52      	ldr	r3, [pc, #328]	; (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004e46:	f7fc fc15 	bl	8001674 <HAL_GetTick>
 8004e4a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e4c:	e008      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004e4e:	f7fc fc11 	bl	8001674 <HAL_GetTick>
 8004e52:	4602      	mov	r2, r0
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	1ad3      	subs	r3, r2, r3
 8004e58:	2b02      	cmp	r3, #2
 8004e5a:	d901      	bls.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004e5c:	2303      	movs	r3, #3
 8004e5e:	e090      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004e60:	4b4b      	ldr	r3, [pc, #300]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d0f0      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 8083 	beq.w	8004f80 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	60fb      	str	r3, [r7, #12]
 8004e7e:	4b44      	ldr	r3, [pc, #272]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e82:	4a43      	ldr	r2, [pc, #268]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e88:	6413      	str	r3, [r2, #64]	; 0x40
 8004e8a:	4b41      	ldr	r3, [pc, #260]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e92:	60fb      	str	r3, [r7, #12]
 8004e94:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004e96:	4b3f      	ldr	r3, [pc, #252]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a3e      	ldr	r2, [pc, #248]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ea0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ea2:	f7fc fbe7 	bl	8001674 <HAL_GetTick>
 8004ea6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ea8:	e008      	b.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004eaa:	f7fc fbe3 	bl	8001674 <HAL_GetTick>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	1ad3      	subs	r3, r2, r3
 8004eb4:	2b02      	cmp	r3, #2
 8004eb6:	d901      	bls.n	8004ebc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004eb8:	2303      	movs	r3, #3
 8004eba:	e062      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004ebc:	4b35      	ldr	r3, [pc, #212]	; (8004f94 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d0f0      	beq.n	8004eaa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004ec8:	4b31      	ldr	r3, [pc, #196]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ed0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d02f      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	68db      	ldr	r3, [r3, #12]
 8004edc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ee0:	693a      	ldr	r2, [r7, #16]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d028      	beq.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ee6:	4b2a      	ldr	r3, [pc, #168]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eee:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004ef0:	4b29      	ldr	r3, [pc, #164]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004ef6:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004efc:	4a24      	ldr	r2, [pc, #144]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004f02:	4b23      	ldr	r3, [pc, #140]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d114      	bne.n	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004f0e:	f7fc fbb1 	bl	8001674 <HAL_GetTick>
 8004f12:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f14:	e00a      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f16:	f7fc fbad 	bl	8001674 <HAL_GetTick>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	1ad3      	subs	r3, r2, r3
 8004f20:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d901      	bls.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004f28:	2303      	movs	r3, #3
 8004f2a:	e02a      	b.n	8004f82 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f2c:	4b18      	ldr	r3, [pc, #96]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f30:	f003 0302 	and.w	r3, r3, #2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d0ee      	beq.n	8004f16 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f40:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004f44:	d10d      	bne.n	8004f62 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004f46:	4b12      	ldr	r3, [pc, #72]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004f56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f5a:	490d      	ldr	r1, [pc, #52]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	608b      	str	r3, [r1, #8]
 8004f60:	e005      	b.n	8004f6e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004f62:	4b0b      	ldr	r3, [pc, #44]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f64:	689b      	ldr	r3, [r3, #8]
 8004f66:	4a0a      	ldr	r2, [pc, #40]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f68:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004f6c:	6093      	str	r3, [r2, #8]
 8004f6e:	4b08      	ldr	r3, [pc, #32]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f70:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	68db      	ldr	r3, [r3, #12]
 8004f76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f7a:	4905      	ldr	r1, [pc, #20]	; (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3718      	adds	r7, #24
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	42470068 	.word	0x42470068
 8004f90:	40023800 	.word	0x40023800
 8004f94:	40007000 	.word	0x40007000
 8004f98:	42470e40 	.word	0x42470e40

08004f9c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b087      	sub	sp, #28
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b01      	cmp	r3, #1
 8004fb8:	d13e      	bne.n	8005038 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004fba:	4b23      	ldr	r3, [pc, #140]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004fc2:	60fb      	str	r3, [r7, #12]
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d005      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d12f      	bne.n	8005030 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004fd0:	4b1e      	ldr	r3, [pc, #120]	; (800504c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004fd2:	617b      	str	r3, [r7, #20]
          break;
 8004fd4:	e02f      	b.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004fd6:	4b1c      	ldr	r3, [pc, #112]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004fe2:	d108      	bne.n	8004ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004fe4:	4b18      	ldr	r3, [pc, #96]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fec:	4a18      	ldr	r2, [pc, #96]	; (8005050 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e007      	b.n	8005006 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004ff6:	4b14      	ldr	r3, [pc, #80]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ffe:	4a15      	ldr	r2, [pc, #84]	; (8005054 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005000:	fbb2 f3f3 	udiv	r3, r2, r3
 8005004:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005006:	4b10      	ldr	r3, [pc, #64]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005008:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800500c:	099b      	lsrs	r3, r3, #6
 800500e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800501a:	4b0b      	ldr	r3, [pc, #44]	; (8005048 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800501c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005020:	0f1b      	lsrs	r3, r3, #28
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	68ba      	ldr	r2, [r7, #8]
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	617b      	str	r3, [r7, #20]
          break;
 800502e:	e002      	b.n	8005036 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
          break;
 8005034:	bf00      	nop
        }
      }
      break;
 8005036:	bf00      	nop
    }
  }
  return frequency;
 8005038:	697b      	ldr	r3, [r7, #20]
}
 800503a:	4618      	mov	r0, r3
 800503c:	371c      	adds	r7, #28
 800503e:	46bd      	mov	sp, r7
 8005040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005044:	4770      	bx	lr
 8005046:	bf00      	nop
 8005048:	40023800 	.word	0x40023800
 800504c:	00bb8000 	.word	0x00bb8000
 8005050:	018cba80 	.word	0x018cba80
 8005054:	00f42400 	.word	0x00f42400

08005058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b082      	sub	sp, #8
 800505c:	af00      	add	r7, sp, #0
 800505e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d101      	bne.n	800506a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	e041      	b.n	80050ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b00      	cmp	r3, #0
 8005074:	d106      	bne.n	8005084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f7fc f99e 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681a      	ldr	r2, [r3, #0]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	3304      	adds	r3, #4
 8005094:	4619      	mov	r1, r3
 8005096:	4610      	mov	r0, r2
 8005098:	f000 f9ce 	bl	8005438 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2201      	movs	r2, #1
 80050a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	2201      	movs	r2, #1
 80050a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2201      	movs	r2, #1
 80050b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2201      	movs	r2, #1
 80050c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2201      	movs	r2, #1
 80050c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2201      	movs	r2, #1
 80050d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	2201      	movs	r2, #1
 80050e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3708      	adds	r7, #8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
	...

080050f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005106:	b2db      	uxtb	r3, r3
 8005108:	2b01      	cmp	r3, #1
 800510a:	d001      	beq.n	8005110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e04e      	b.n	80051ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	68da      	ldr	r2, [r3, #12]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f042 0201 	orr.w	r2, r2, #1
 8005126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a23      	ldr	r2, [pc, #140]	; (80051bc <HAL_TIM_Base_Start_IT+0xc4>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d022      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800513a:	d01d      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a1f      	ldr	r2, [pc, #124]	; (80051c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d018      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a1e      	ldr	r2, [pc, #120]	; (80051c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d013      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a1c      	ldr	r2, [pc, #112]	; (80051c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d00e      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a1b      	ldr	r2, [pc, #108]	; (80051cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d009      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a19      	ldr	r2, [pc, #100]	; (80051d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d004      	beq.n	8005178 <HAL_TIM_Base_Start_IT+0x80>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a18      	ldr	r2, [pc, #96]	; (80051d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d111      	bne.n	800519c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	2b06      	cmp	r3, #6
 8005188:	d010      	beq.n	80051ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681a      	ldr	r2, [r3, #0]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f042 0201 	orr.w	r2, r2, #1
 8005198:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800519a:	e007      	b.n	80051ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	681a      	ldr	r2, [r3, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f042 0201 	orr.w	r2, r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051ac:	2300      	movs	r3, #0
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	3714      	adds	r7, #20
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr
 80051ba:	bf00      	nop
 80051bc:	40010000 	.word	0x40010000
 80051c0:	40000400 	.word	0x40000400
 80051c4:	40000800 	.word	0x40000800
 80051c8:	40000c00 	.word	0x40000c00
 80051cc:	40010400 	.word	0x40010400
 80051d0:	40014000 	.word	0x40014000
 80051d4:	40001800 	.word	0x40001800

080051d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b082      	sub	sp, #8
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0302 	and.w	r3, r3, #2
 80051ea:	2b02      	cmp	r3, #2
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0302 	and.w	r3, r3, #2
 80051f8:	2b02      	cmp	r3, #2
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0202 	mvn.w	r2, #2
 8005204:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2201      	movs	r2, #1
 800520a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	f003 0303 	and.w	r3, r3, #3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f8ee 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f8e0 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 f8f1 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b04      	cmp	r3, #4
 8005240:	d122      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0304 	and.w	r3, r3, #4
 800524c:	2b04      	cmp	r3, #4
 800524e:	d11b      	bne.n	8005288 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0204 	mvn.w	r2, #4
 8005258:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2202      	movs	r2, #2
 800525e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	699b      	ldr	r3, [r3, #24]
 8005266:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f8c4 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 8005274:	e005      	b.n	8005282 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 f8b6 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f8c7 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	f003 0308 	and.w	r3, r3, #8
 8005292:	2b08      	cmp	r3, #8
 8005294:	d122      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	68db      	ldr	r3, [r3, #12]
 800529c:	f003 0308 	and.w	r3, r3, #8
 80052a0:	2b08      	cmp	r3, #8
 80052a2:	d11b      	bne.n	80052dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f06f 0208 	mvn.w	r2, #8
 80052ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2204      	movs	r2, #4
 80052b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	69db      	ldr	r3, [r3, #28]
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d003      	beq.n	80052ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f89a 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 80052c8:	e005      	b.n	80052d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 f88c 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d0:	6878      	ldr	r0, [r7, #4]
 80052d2:	f000 f89d 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0310 	and.w	r3, r3, #16
 80052e6:	2b10      	cmp	r3, #16
 80052e8:	d122      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0310 	and.w	r3, r3, #16
 80052f4:	2b10      	cmp	r3, #16
 80052f6:	d11b      	bne.n	8005330 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	f06f 0210 	mvn.w	r2, #16
 8005300:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	2208      	movs	r2, #8
 8005306:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	69db      	ldr	r3, [r3, #28]
 800530e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005312:	2b00      	cmp	r3, #0
 8005314:	d003      	beq.n	800531e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005316:	6878      	ldr	r0, [r7, #4]
 8005318:	f000 f870 	bl	80053fc <HAL_TIM_IC_CaptureCallback>
 800531c:	e005      	b.n	800532a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 f862 	bl	80053e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f000 f873 	bl	8005410 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	691b      	ldr	r3, [r3, #16]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b01      	cmp	r3, #1
 800533c:	d10e      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b01      	cmp	r3, #1
 800534a:	d107      	bne.n	800535c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f06f 0201 	mvn.w	r2, #1
 8005354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f7fb fe16 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005366:	2b80      	cmp	r3, #128	; 0x80
 8005368:	d10e      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	68db      	ldr	r3, [r3, #12]
 8005370:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005374:	2b80      	cmp	r3, #128	; 0x80
 8005376:	d107      	bne.n	8005388 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f902 	bl	800558c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005392:	2b40      	cmp	r3, #64	; 0x40
 8005394:	d10e      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	68db      	ldr	r3, [r3, #12]
 800539c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a0:	2b40      	cmp	r3, #64	; 0x40
 80053a2:	d107      	bne.n	80053b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ae:	6878      	ldr	r0, [r7, #4]
 80053b0:	f000 f838 	bl	8005424 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	f003 0320 	and.w	r3, r3, #32
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d10e      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	f003 0320 	and.w	r3, r3, #32
 80053cc:	2b20      	cmp	r3, #32
 80053ce:	d107      	bne.n	80053e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f06f 0220 	mvn.w	r2, #32
 80053d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 f8cc 	bl	8005578 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e0:	bf00      	nop
 80053e2:	3708      	adds	r7, #8
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}

080053e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005438:	b480      	push	{r7}
 800543a:	b085      	sub	sp, #20
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a40      	ldr	r2, [pc, #256]	; (800554c <TIM_Base_SetConfig+0x114>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d013      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005456:	d00f      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a3d      	ldr	r2, [pc, #244]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d00b      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a3c      	ldr	r2, [pc, #240]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d007      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4a3b      	ldr	r2, [pc, #236]	; (8005558 <TIM_Base_SetConfig+0x120>)
 800546c:	4293      	cmp	r3, r2
 800546e:	d003      	beq.n	8005478 <TIM_Base_SetConfig+0x40>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4a3a      	ldr	r2, [pc, #232]	; (800555c <TIM_Base_SetConfig+0x124>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d108      	bne.n	800548a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800547e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	4313      	orrs	r3, r2
 8005488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a2f      	ldr	r2, [pc, #188]	; (800554c <TIM_Base_SetConfig+0x114>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d02b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005498:	d027      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a2c      	ldr	r2, [pc, #176]	; (8005550 <TIM_Base_SetConfig+0x118>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d023      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	4a2b      	ldr	r2, [pc, #172]	; (8005554 <TIM_Base_SetConfig+0x11c>)
 80054a6:	4293      	cmp	r3, r2
 80054a8:	d01f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	4a2a      	ldr	r2, [pc, #168]	; (8005558 <TIM_Base_SetConfig+0x120>)
 80054ae:	4293      	cmp	r3, r2
 80054b0:	d01b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a29      	ldr	r2, [pc, #164]	; (800555c <TIM_Base_SetConfig+0x124>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d017      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	4a28      	ldr	r2, [pc, #160]	; (8005560 <TIM_Base_SetConfig+0x128>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d013      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4a27      	ldr	r2, [pc, #156]	; (8005564 <TIM_Base_SetConfig+0x12c>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d00f      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	4a26      	ldr	r2, [pc, #152]	; (8005568 <TIM_Base_SetConfig+0x130>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00b      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	4a25      	ldr	r2, [pc, #148]	; (800556c <TIM_Base_SetConfig+0x134>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d007      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4a24      	ldr	r2, [pc, #144]	; (8005570 <TIM_Base_SetConfig+0x138>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d003      	beq.n	80054ea <TIM_Base_SetConfig+0xb2>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4a23      	ldr	r2, [pc, #140]	; (8005574 <TIM_Base_SetConfig+0x13c>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d108      	bne.n	80054fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80054f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	68fa      	ldr	r2, [r7, #12]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	695b      	ldr	r3, [r3, #20]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	68fa      	ldr	r2, [r7, #12]
 800550e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	689a      	ldr	r2, [r3, #8]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	681a      	ldr	r2, [r3, #0]
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a0a      	ldr	r2, [pc, #40]	; (800554c <TIM_Base_SetConfig+0x114>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d003      	beq.n	8005530 <TIM_Base_SetConfig+0xf8>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	4a0c      	ldr	r2, [pc, #48]	; (800555c <TIM_Base_SetConfig+0x124>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d103      	bne.n	8005538 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	615a      	str	r2, [r3, #20]
}
 800553e:	bf00      	nop
 8005540:	3714      	adds	r7, #20
 8005542:	46bd      	mov	sp, r7
 8005544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005548:	4770      	bx	lr
 800554a:	bf00      	nop
 800554c:	40010000 	.word	0x40010000
 8005550:	40000400 	.word	0x40000400
 8005554:	40000800 	.word	0x40000800
 8005558:	40000c00 	.word	0x40000c00
 800555c:	40010400 	.word	0x40010400
 8005560:	40014000 	.word	0x40014000
 8005564:	40014400 	.word	0x40014400
 8005568:	40014800 	.word	0x40014800
 800556c:	40001800 	.word	0x40001800
 8005570:	40001c00 	.word	0x40001c00
 8005574:	40002000 	.word	0x40002000

08005578 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80055ae:	2301      	movs	r3, #1
 80055b0:	e03f      	b.n	8005632 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d106      	bne.n	80055cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f7fb ff22 	bl	8001410 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2224      	movs	r2, #36	; 0x24
 80055d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80055e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f829 	bl	800563c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	691a      	ldr	r2, [r3, #16]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	695a      	ldr	r2, [r3, #20]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005608:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005618:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2220      	movs	r2, #32
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3708      	adds	r7, #8
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800563c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005640:	b0c0      	sub	sp, #256	; 0x100
 8005642:	af00      	add	r7, sp, #0
 8005644:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	691b      	ldr	r3, [r3, #16]
 8005650:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005658:	68d9      	ldr	r1, [r3, #12]
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	ea40 0301 	orr.w	r3, r0, r1
 8005664:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566a:	689a      	ldr	r2, [r3, #8]
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	691b      	ldr	r3, [r3, #16]
 8005672:	431a      	orrs	r2, r3
 8005674:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005678:	695b      	ldr	r3, [r3, #20]
 800567a:	431a      	orrs	r2, r3
 800567c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005680:	69db      	ldr	r3, [r3, #28]
 8005682:	4313      	orrs	r3, r2
 8005684:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005694:	f021 010c 	bic.w	r1, r1, #12
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800569c:	681a      	ldr	r2, [r3, #0]
 800569e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80056a2:	430b      	orrs	r3, r1
 80056a4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	695b      	ldr	r3, [r3, #20]
 80056ae:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80056b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056b6:	6999      	ldr	r1, [r3, #24]
 80056b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	ea40 0301 	orr.w	r3, r0, r1
 80056c2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c8:	681a      	ldr	r2, [r3, #0]
 80056ca:	4b8f      	ldr	r3, [pc, #572]	; (8005908 <UART_SetConfig+0x2cc>)
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d005      	beq.n	80056dc <UART_SetConfig+0xa0>
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b8d      	ldr	r3, [pc, #564]	; (800590c <UART_SetConfig+0x2d0>)
 80056d8:	429a      	cmp	r2, r3
 80056da:	d104      	bne.n	80056e6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056dc:	f7ff fb68 	bl	8004db0 <HAL_RCC_GetPCLK2Freq>
 80056e0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80056e4:	e003      	b.n	80056ee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056e6:	f7ff fb4f 	bl	8004d88 <HAL_RCC_GetPCLK1Freq>
 80056ea:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056f2:	69db      	ldr	r3, [r3, #28]
 80056f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056f8:	f040 810c 	bne.w	8005914 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005700:	2200      	movs	r2, #0
 8005702:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005706:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800570a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800570e:	4622      	mov	r2, r4
 8005710:	462b      	mov	r3, r5
 8005712:	1891      	adds	r1, r2, r2
 8005714:	65b9      	str	r1, [r7, #88]	; 0x58
 8005716:	415b      	adcs	r3, r3
 8005718:	65fb      	str	r3, [r7, #92]	; 0x5c
 800571a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800571e:	4621      	mov	r1, r4
 8005720:	eb12 0801 	adds.w	r8, r2, r1
 8005724:	4629      	mov	r1, r5
 8005726:	eb43 0901 	adc.w	r9, r3, r1
 800572a:	f04f 0200 	mov.w	r2, #0
 800572e:	f04f 0300 	mov.w	r3, #0
 8005732:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005736:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800573a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800573e:	4690      	mov	r8, r2
 8005740:	4699      	mov	r9, r3
 8005742:	4623      	mov	r3, r4
 8005744:	eb18 0303 	adds.w	r3, r8, r3
 8005748:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800574c:	462b      	mov	r3, r5
 800574e:	eb49 0303 	adc.w	r3, r9, r3
 8005752:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	2200      	movs	r2, #0
 800575e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005762:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005766:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800576a:	460b      	mov	r3, r1
 800576c:	18db      	adds	r3, r3, r3
 800576e:	653b      	str	r3, [r7, #80]	; 0x50
 8005770:	4613      	mov	r3, r2
 8005772:	eb42 0303 	adc.w	r3, r2, r3
 8005776:	657b      	str	r3, [r7, #84]	; 0x54
 8005778:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800577c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005780:	f7fa fd22 	bl	80001c8 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4b61      	ldr	r3, [pc, #388]	; (8005910 <UART_SetConfig+0x2d4>)
 800578a:	fba3 2302 	umull	r2, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	011c      	lsls	r4, r3, #4
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800579c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80057a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	1891      	adds	r1, r2, r2
 80057aa:	64b9      	str	r1, [r7, #72]	; 0x48
 80057ac:	415b      	adcs	r3, r3
 80057ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80057b4:	4641      	mov	r1, r8
 80057b6:	eb12 0a01 	adds.w	sl, r2, r1
 80057ba:	4649      	mov	r1, r9
 80057bc:	eb43 0b01 	adc.w	fp, r3, r1
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057d4:	4692      	mov	sl, r2
 80057d6:	469b      	mov	fp, r3
 80057d8:	4643      	mov	r3, r8
 80057da:	eb1a 0303 	adds.w	r3, sl, r3
 80057de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057e2:	464b      	mov	r3, r9
 80057e4:	eb4b 0303 	adc.w	r3, fp, r3
 80057e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f0:	685b      	ldr	r3, [r3, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057f8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005800:	460b      	mov	r3, r1
 8005802:	18db      	adds	r3, r3, r3
 8005804:	643b      	str	r3, [r7, #64]	; 0x40
 8005806:	4613      	mov	r3, r2
 8005808:	eb42 0303 	adc.w	r3, r2, r3
 800580c:	647b      	str	r3, [r7, #68]	; 0x44
 800580e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005812:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005816:	f7fa fcd7 	bl	80001c8 <__aeabi_uldivmod>
 800581a:	4602      	mov	r2, r0
 800581c:	460b      	mov	r3, r1
 800581e:	4611      	mov	r1, r2
 8005820:	4b3b      	ldr	r3, [pc, #236]	; (8005910 <UART_SetConfig+0x2d4>)
 8005822:	fba3 2301 	umull	r2, r3, r3, r1
 8005826:	095b      	lsrs	r3, r3, #5
 8005828:	2264      	movs	r2, #100	; 0x64
 800582a:	fb02 f303 	mul.w	r3, r2, r3
 800582e:	1acb      	subs	r3, r1, r3
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005836:	4b36      	ldr	r3, [pc, #216]	; (8005910 <UART_SetConfig+0x2d4>)
 8005838:	fba3 2302 	umull	r2, r3, r3, r2
 800583c:	095b      	lsrs	r3, r3, #5
 800583e:	005b      	lsls	r3, r3, #1
 8005840:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005844:	441c      	add	r4, r3
 8005846:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800584a:	2200      	movs	r2, #0
 800584c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005850:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005854:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	1891      	adds	r1, r2, r2
 800585e:	63b9      	str	r1, [r7, #56]	; 0x38
 8005860:	415b      	adcs	r3, r3
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005864:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005868:	4641      	mov	r1, r8
 800586a:	1851      	adds	r1, r2, r1
 800586c:	6339      	str	r1, [r7, #48]	; 0x30
 800586e:	4649      	mov	r1, r9
 8005870:	414b      	adcs	r3, r1
 8005872:	637b      	str	r3, [r7, #52]	; 0x34
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005880:	4659      	mov	r1, fp
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4651      	mov	r1, sl
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4651      	mov	r1, sl
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4642      	mov	r2, r8
 8005896:	189b      	adds	r3, r3, r2
 8005898:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800589c:	464b      	mov	r3, r9
 800589e:	460a      	mov	r2, r1
 80058a0:	eb42 0303 	adc.w	r3, r2, r3
 80058a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80058b4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80058b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80058bc:	460b      	mov	r3, r1
 80058be:	18db      	adds	r3, r3, r3
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80058c2:	4613      	mov	r3, r2
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80058ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80058d2:	f7fa fc79 	bl	80001c8 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4b0d      	ldr	r3, [pc, #52]	; (8005910 <UART_SetConfig+0x2d4>)
 80058dc:	fba3 1302 	umull	r1, r3, r3, r2
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	2164      	movs	r1, #100	; 0x64
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	3332      	adds	r3, #50	; 0x32
 80058ee:	4a08      	ldr	r2, [pc, #32]	; (8005910 <UART_SetConfig+0x2d4>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	f003 0207 	and.w	r2, r3, #7
 80058fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	4422      	add	r2, r4
 8005902:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005904:	e106      	b.n	8005b14 <UART_SetConfig+0x4d8>
 8005906:	bf00      	nop
 8005908:	40011000 	.word	0x40011000
 800590c:	40011400 	.word	0x40011400
 8005910:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005914:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005918:	2200      	movs	r2, #0
 800591a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800591e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005922:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005926:	4642      	mov	r2, r8
 8005928:	464b      	mov	r3, r9
 800592a:	1891      	adds	r1, r2, r2
 800592c:	6239      	str	r1, [r7, #32]
 800592e:	415b      	adcs	r3, r3
 8005930:	627b      	str	r3, [r7, #36]	; 0x24
 8005932:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005936:	4641      	mov	r1, r8
 8005938:	1854      	adds	r4, r2, r1
 800593a:	4649      	mov	r1, r9
 800593c:	eb43 0501 	adc.w	r5, r3, r1
 8005940:	f04f 0200 	mov.w	r2, #0
 8005944:	f04f 0300 	mov.w	r3, #0
 8005948:	00eb      	lsls	r3, r5, #3
 800594a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800594e:	00e2      	lsls	r2, r4, #3
 8005950:	4614      	mov	r4, r2
 8005952:	461d      	mov	r5, r3
 8005954:	4643      	mov	r3, r8
 8005956:	18e3      	adds	r3, r4, r3
 8005958:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800595c:	464b      	mov	r3, r9
 800595e:	eb45 0303 	adc.w	r3, r5, r3
 8005962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800596a:	685b      	ldr	r3, [r3, #4]
 800596c:	2200      	movs	r2, #0
 800596e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005972:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	f04f 0300 	mov.w	r3, #0
 800597e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005982:	4629      	mov	r1, r5
 8005984:	008b      	lsls	r3, r1, #2
 8005986:	4621      	mov	r1, r4
 8005988:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598c:	4621      	mov	r1, r4
 800598e:	008a      	lsls	r2, r1, #2
 8005990:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005994:	f7fa fc18 	bl	80001c8 <__aeabi_uldivmod>
 8005998:	4602      	mov	r2, r0
 800599a:	460b      	mov	r3, r1
 800599c:	4b60      	ldr	r3, [pc, #384]	; (8005b20 <UART_SetConfig+0x4e4>)
 800599e:	fba3 2302 	umull	r2, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	011c      	lsls	r4, r3, #4
 80059a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059aa:	2200      	movs	r2, #0
 80059ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80059b0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80059b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80059b8:	4642      	mov	r2, r8
 80059ba:	464b      	mov	r3, r9
 80059bc:	1891      	adds	r1, r2, r2
 80059be:	61b9      	str	r1, [r7, #24]
 80059c0:	415b      	adcs	r3, r3
 80059c2:	61fb      	str	r3, [r7, #28]
 80059c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059c8:	4641      	mov	r1, r8
 80059ca:	1851      	adds	r1, r2, r1
 80059cc:	6139      	str	r1, [r7, #16]
 80059ce:	4649      	mov	r1, r9
 80059d0:	414b      	adcs	r3, r1
 80059d2:	617b      	str	r3, [r7, #20]
 80059d4:	f04f 0200 	mov.w	r2, #0
 80059d8:	f04f 0300 	mov.w	r3, #0
 80059dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059e0:	4659      	mov	r1, fp
 80059e2:	00cb      	lsls	r3, r1, #3
 80059e4:	4651      	mov	r1, sl
 80059e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059ea:	4651      	mov	r1, sl
 80059ec:	00ca      	lsls	r2, r1, #3
 80059ee:	4610      	mov	r0, r2
 80059f0:	4619      	mov	r1, r3
 80059f2:	4603      	mov	r3, r0
 80059f4:	4642      	mov	r2, r8
 80059f6:	189b      	adds	r3, r3, r2
 80059f8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059fc:	464b      	mov	r3, r9
 80059fe:	460a      	mov	r2, r1
 8005a00:	eb42 0303 	adc.w	r3, r2, r3
 8005a04:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005a08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	67bb      	str	r3, [r7, #120]	; 0x78
 8005a12:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005a20:	4649      	mov	r1, r9
 8005a22:	008b      	lsls	r3, r1, #2
 8005a24:	4641      	mov	r1, r8
 8005a26:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a2a:	4641      	mov	r1, r8
 8005a2c:	008a      	lsls	r2, r1, #2
 8005a2e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005a32:	f7fa fbc9 	bl	80001c8 <__aeabi_uldivmod>
 8005a36:	4602      	mov	r2, r0
 8005a38:	460b      	mov	r3, r1
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4b38      	ldr	r3, [pc, #224]	; (8005b20 <UART_SetConfig+0x4e4>)
 8005a3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005a42:	095b      	lsrs	r3, r3, #5
 8005a44:	2264      	movs	r2, #100	; 0x64
 8005a46:	fb02 f303 	mul.w	r3, r2, r3
 8005a4a:	1acb      	subs	r3, r1, r3
 8005a4c:	011b      	lsls	r3, r3, #4
 8005a4e:	3332      	adds	r3, #50	; 0x32
 8005a50:	4a33      	ldr	r2, [pc, #204]	; (8005b20 <UART_SetConfig+0x4e4>)
 8005a52:	fba2 2303 	umull	r2, r3, r2, r3
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a5c:	441c      	add	r4, r3
 8005a5e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a62:	2200      	movs	r2, #0
 8005a64:	673b      	str	r3, [r7, #112]	; 0x70
 8005a66:	677a      	str	r2, [r7, #116]	; 0x74
 8005a68:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a6c:	4642      	mov	r2, r8
 8005a6e:	464b      	mov	r3, r9
 8005a70:	1891      	adds	r1, r2, r2
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	415b      	adcs	r3, r3
 8005a76:	60fb      	str	r3, [r7, #12]
 8005a78:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	1851      	adds	r1, r2, r1
 8005a80:	6039      	str	r1, [r7, #0]
 8005a82:	4649      	mov	r1, r9
 8005a84:	414b      	adcs	r3, r1
 8005a86:	607b      	str	r3, [r7, #4]
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a94:	4659      	mov	r1, fp
 8005a96:	00cb      	lsls	r3, r1, #3
 8005a98:	4651      	mov	r1, sl
 8005a9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a9e:	4651      	mov	r1, sl
 8005aa0:	00ca      	lsls	r2, r1, #3
 8005aa2:	4610      	mov	r0, r2
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	4642      	mov	r2, r8
 8005aaa:	189b      	adds	r3, r3, r2
 8005aac:	66bb      	str	r3, [r7, #104]	; 0x68
 8005aae:	464b      	mov	r3, r9
 8005ab0:	460a      	mov	r2, r1
 8005ab2:	eb42 0303 	adc.w	r3, r2, r3
 8005ab6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	663b      	str	r3, [r7, #96]	; 0x60
 8005ac2:	667a      	str	r2, [r7, #100]	; 0x64
 8005ac4:	f04f 0200 	mov.w	r2, #0
 8005ac8:	f04f 0300 	mov.w	r3, #0
 8005acc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ad0:	4649      	mov	r1, r9
 8005ad2:	008b      	lsls	r3, r1, #2
 8005ad4:	4641      	mov	r1, r8
 8005ad6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ada:	4641      	mov	r1, r8
 8005adc:	008a      	lsls	r2, r1, #2
 8005ade:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005ae2:	f7fa fb71 	bl	80001c8 <__aeabi_uldivmod>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4b0d      	ldr	r3, [pc, #52]	; (8005b20 <UART_SetConfig+0x4e4>)
 8005aec:	fba3 1302 	umull	r1, r3, r3, r2
 8005af0:	095b      	lsrs	r3, r3, #5
 8005af2:	2164      	movs	r1, #100	; 0x64
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	1ad3      	subs	r3, r2, r3
 8005afa:	011b      	lsls	r3, r3, #4
 8005afc:	3332      	adds	r3, #50	; 0x32
 8005afe:	4a08      	ldr	r2, [pc, #32]	; (8005b20 <UART_SetConfig+0x4e4>)
 8005b00:	fba2 2303 	umull	r2, r3, r2, r3
 8005b04:	095b      	lsrs	r3, r3, #5
 8005b06:	f003 020f 	and.w	r2, r3, #15
 8005b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4422      	add	r2, r4
 8005b12:	609a      	str	r2, [r3, #8]
}
 8005b14:	bf00      	nop
 8005b16:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b20:	51eb851f 	.word	0x51eb851f

08005b24 <memset>:
 8005b24:	4402      	add	r2, r0
 8005b26:	4603      	mov	r3, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4d0d      	ldr	r5, [pc, #52]	; (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	; (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2600      	movs	r6, #0
 8005b40:	42a6      	cmp	r6, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4d0b      	ldr	r5, [pc, #44]	; (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	; (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 f818 	bl	8005b7c <_init>
 8005b4c:	1b64      	subs	r4, r4, r5
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2600      	movs	r6, #0
 8005b52:	42a6      	cmp	r6, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5c:	4798      	blx	r3
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b66:	4798      	blx	r3
 8005b68:	3601      	adds	r6, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08005bbc 	.word	0x08005bbc
 8005b70:	08005bbc 	.word	0x08005bbc
 8005b74:	08005bbc 	.word	0x08005bbc
 8005b78:	08005bc0 	.word	0x08005bc0

08005b7c <_init>:
 8005b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b7e:	bf00      	nop
 8005b80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b82:	bc08      	pop	{r3}
 8005b84:	469e      	mov	lr, r3
 8005b86:	4770      	bx	lr

08005b88 <_fini>:
 8005b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b8a:	bf00      	nop
 8005b8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b8e:	bc08      	pop	{r3}
 8005b90:	469e      	mov	lr, r3
 8005b92:	4770      	bx	lr
