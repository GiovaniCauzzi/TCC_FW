
Firmware_TCC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f5c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080050e4  080050e4  000150e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005104  08005104  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08005104  08005104  00015104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800510c  0800510c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005110  08005110  00015110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000274  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000280  20000280  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001338c  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000295d  00000000  00000000  0003340b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011e8  00000000  00000000  00035d68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e2b  00000000  00000000  00036f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020d28  00000000  00000000  00037d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017269  00000000  00000000  00058aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd4b0  00000000  00000000  0006fd0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004c94  00000000  00000000  0013d1bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007d  00000000  00000000  00141e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080050cc 	.word	0x080050cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080050cc 	.word	0x080050cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <codec_init>:
 */

#include "codec.h"

void codec_init(I2C_HandleTypeDef *i2c_instance)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	6078      	str	r0, [r7, #4]
	aux[0] = ;
	aux[1] = ;
	result = codec_set_reg(i2c_instance, dREG_BLABLA, &aux, 2);
	*/

	aux[0] = 0x00;
 80004cc:	2300      	movs	r3, #0
 80004ce:	733b      	strb	r3, [r7, #12]
	aux[1] = 0x00;
 80004d0:	2300      	movs	r3, #0
 80004d2:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_SW_RESET, &aux, 2);
 80004d4:	f107 020c 	add.w	r2, r7, #12
 80004d8:	2302      	movs	r3, #2
 80004da:	2100      	movs	r1, #0
 80004dc:	6878      	ldr	r0, [r7, #4]
 80004de:	f000 f85d 	bl	800059c <codec_set_reg>
 80004e2:	4603      	mov	r3, r0
 80004e4:	73fb      	strb	r3, [r7, #15]

	aux[0] = 0xC8;
 80004e6:	23c8      	movs	r3, #200	; 0xc8
 80004e8:	733b      	strb	r3, [r7, #12]
	aux[1] = 0xC8;
 80004ea:	23c8      	movs	r3, #200	; 0xc8
 80004ec:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_HPOUT, &aux, 2);
 80004ee:	f107 020c 	add.w	r2, r7, #12
 80004f2:	2302      	movs	r3, #2
 80004f4:	2102      	movs	r1, #2
 80004f6:	6878      	ldr	r0, [r7, #4]
 80004f8:	f000 f850 	bl	800059c <codec_set_reg>
 80004fc:	4603      	mov	r3, r0
 80004fe:	73fb      	strb	r3, [r7, #15]
	result = codec_read_reg(i2c_instance,dREG_HPOUT,databuffer, 2);
 8000500:	f107 0208 	add.w	r2, r7, #8
 8000504:	2302      	movs	r3, #2
 8000506:	2102      	movs	r1, #2
 8000508:	6878      	ldr	r0, [r7, #4]
 800050a:	f000 f863 	bl	80005d4 <codec_read_reg>
 800050e:	4603      	mov	r3, r0
 8000510:	73fb      	strb	r3, [r7, #15]
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_SW_RESET, I2C_MEMADD_SIZE_8BIT, &aux, 2, dCODEC_HAL_MAX_DELAY);
	// result = HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, dREG_HPOUT, I2C_MEMADD_SIZE_8BIT, &aux, 2, dCODEC_HAL_MAX_DELAY);

	aux[0] = 0b00001000;
 8000512:	2308      	movs	r3, #8
 8000514:	733b      	strb	r3, [r7, #12]
	aux[1] = 0b00001000;
 8000516:	2308      	movs	r3, #8
 8000518:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT1, &aux, 2);
 800051a:	f107 020c 	add.w	r2, r7, #12
 800051e:	2302      	movs	r3, #2
 8000520:	2103      	movs	r1, #3
 8000522:	6878      	ldr	r0, [r7, #4]
 8000524:	f000 f83a 	bl	800059c <codec_set_reg>
 8000528:	4603      	mov	r3, r0
 800052a:	73fb      	strb	r3, [r7, #15]

	aux[0] = 0x00;
 800052c:	2300      	movs	r3, #0
 800052e:	733b      	strb	r3, [r7, #12]
	aux[1] = 0x00;
 8000530:	2300      	movs	r3, #0
 8000532:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_LINE_OUTPUT2, &aux, 2);
 8000534:	f107 020c 	add.w	r2, r7, #12
 8000538:	2302      	movs	r3, #2
 800053a:	2105      	movs	r1, #5
 800053c:	6878      	ldr	r0, [r7, #4]
 800053e:	f000 f82d 	bl	800059c <codec_set_reg>
 8000542:	4603      	mov	r3, r0
 8000544:	73fb      	strb	r3, [r7, #15]

	aux[0] = 0b00000000;
 8000546:	2300      	movs	r3, #0
 8000548:	733b      	strb	r3, [r7, #12]
	aux[1] = 0x00;
 800054a:	2300      	movs	r3, #0
 800054c:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_MIC_INPUT_MODE_GAIN, &aux, 2);
 800054e:	f107 020c 	add.w	r2, r7, #12
 8000552:	2302      	movs	r3, #2
 8000554:	210d      	movs	r1, #13
 8000556:	6878      	ldr	r0, [r7, #4]
 8000558:	f000 f820 	bl	800059c <codec_set_reg>
 800055c:	4603      	mov	r3, r0
 800055e:	73fb      	strb	r3, [r7, #15]

	aux[0] = 0b00001000;
 8000560:	2308      	movs	r3, #8
 8000562:	733b      	strb	r3, [r7, #12]
	aux[1] = 0b00001000;
 8000564:	2308      	movs	r3, #8
 8000566:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_LINE_INPUT_MODE, &aux, 2);
 8000568:	f107 020c 	add.w	r2, r7, #12
 800056c:	2302      	movs	r3, #2
 800056e:	210f      	movs	r1, #15
 8000570:	6878      	ldr	r0, [r7, #4]
 8000572:	f000 f813 	bl	800059c <codec_set_reg>
 8000576:	4603      	mov	r3, r0
 8000578:	73fb      	strb	r3, [r7, #15]

	aux[0] = 0b00000000;
 800057a:	2300      	movs	r3, #0
 800057c:	733b      	strb	r3, [r7, #12]
	aux[1] = 0b00000000;
 800057e:	2300      	movs	r3, #0
 8000580:	737b      	strb	r3, [r7, #13]
	result = codec_set_reg(i2c_instance, dREG_ADC_MIX_CONTROL, &aux, 2);
 8000582:	f107 020c 	add.w	r2, r7, #12
 8000586:	2302      	movs	r3, #2
 8000588:	2127      	movs	r1, #39	; 0x27
 800058a:	6878      	ldr	r0, [r7, #4]
 800058c:	f000 f806 	bl	800059c <codec_set_reg>
 8000590:	4603      	mov	r3, r0
 8000592:	73fb      	strb	r3, [r7, #15]

	
}
 8000594:	bf00      	nop
 8000596:	3710      	adds	r7, #16
 8000598:	46bd      	mov	sp, r7
 800059a:	bd80      	pop	{r7, pc}

0800059c <codec_set_reg>:

HAL_StatusTypeDef codec_set_reg(I2C_HandleTypeDef *i2c_instance, unsigned char MemAddress, unsigned char *pdata, unsigned int size)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	b088      	sub	sp, #32
 80005a0:	af04      	add	r7, sp, #16
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	607a      	str	r2, [r7, #4]
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	460b      	mov	r3, r1
 80005aa:	72fb      	strb	r3, [r7, #11]
	return HAL_I2C_Mem_Write(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 80005ac:	7afb      	ldrb	r3, [r7, #11]
 80005ae:	b29a      	uxth	r2, r3
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	b29b      	uxth	r3, r3
 80005b4:	f04f 31ff 	mov.w	r1, #4294967295
 80005b8:	9102      	str	r1, [sp, #8]
 80005ba:	9301      	str	r3, [sp, #4]
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	9300      	str	r3, [sp, #0]
 80005c0:	2301      	movs	r3, #1
 80005c2:	2136      	movs	r1, #54	; 0x36
 80005c4:	68f8      	ldr	r0, [r7, #12]
 80005c6:	f001 ff3b 	bl	8002440 <HAL_I2C_Mem_Write>
 80005ca:	4603      	mov	r3, r0
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3710      	adds	r7, #16
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <codec_read_reg>:
uint8_t *pData,
uint16_t Size,
uint32_t Timeout)*/

HAL_StatusTypeDef codec_read_reg(I2C_HandleTypeDef *i2c_instance, uint16_t MemAddress, uint8_t * pdata, uint16_t size)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af04      	add	r7, sp, #16
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	607a      	str	r2, [r7, #4]
 80005de:	461a      	mov	r2, r3
 80005e0:	460b      	mov	r3, r1
 80005e2:	817b      	strh	r3, [r7, #10]
 80005e4:	4613      	mov	r3, r2
 80005e6:	813b      	strh	r3, [r7, #8]
	return HAL_I2C_Mem_Read(i2c_instance, dCODEC_ADDR, MemAddress, I2C_MEMADD_SIZE_8BIT, pdata, size, dCODEC_HAL_MAX_DELAY);
 80005e8:	897a      	ldrh	r2, [r7, #10]
 80005ea:	f04f 33ff 	mov.w	r3, #4294967295
 80005ee:	9302      	str	r3, [sp, #8]
 80005f0:	893b      	ldrh	r3, [r7, #8]
 80005f2:	9301      	str	r3, [sp, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2301      	movs	r3, #1
 80005fa:	2136      	movs	r1, #54	; 0x36
 80005fc:	68f8      	ldr	r0, [r7, #12]
 80005fe:	f002 f819 	bl	8002634 <HAL_I2C_Mem_Read>
 8000602:	4603      	mov	r3, r0
}
 8000604:	4618      	mov	r0, r3
 8000606:	3710      	adds	r7, #16
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fd31 	bl	8001078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f823 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f9af 	bl	800097c <MX_GPIO_Init>
  MX_DMA_Init();
 800061e:	f000 f985 	bl	800092c <MX_DMA_Init>
  MX_I2C2_Init();
 8000622:	f000 f8d9 	bl	80007d8 <MX_I2C2_Init>
  MX_I2S2_Init();
 8000626:	f000 f905 	bl	8000834 <MX_I2S2_Init>
  MX_ADC1_Init();
 800062a:	f000 f883 	bl	8000734 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800062e:	f000 f953 	bl	80008d8 <MX_USART1_UART_Init>
  MX_TIM14_Init();
 8000632:	f000 f92d 	bl	8000890 <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim14);
 8000636:	4807      	ldr	r0, [pc, #28]	; (8000654 <main+0x48>)
 8000638:	f004 f806 	bl	8004648 <HAL_TIM_Base_Start_IT>
  codec_init(&hi2c2);
 800063c:	4806      	ldr	r0, [pc, #24]	; (8000658 <main+0x4c>)
 800063e:	f7ff ff41 	bl	80004c4 <codec_init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  if(GL_timer_100ms)
 8000642:	4b06      	ldr	r3, [pc, #24]	; (800065c <main+0x50>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0fb      	beq.n	8000642 <main+0x36>
	  {
		  codec_init(&hi2c2);
 800064a:	4803      	ldr	r0, [pc, #12]	; (8000658 <main+0x4c>)
 800064c:	f7ff ff3a 	bl	80004c4 <codec_init>
	  if(GL_timer_100ms)
 8000650:	e7f7      	b.n	8000642 <main+0x36>
 8000652:	bf00      	nop
 8000654:	200001e0 	.word	0x200001e0
 8000658:	20000084 	.word	0x20000084
 800065c:	20000034 	.word	0x20000034

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f004 fd00 	bl	8005074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b28      	ldr	r3, [pc, #160]	; (800072c <SystemClock_Config+0xcc>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a27      	ldr	r2, [pc, #156]	; (800072c <SystemClock_Config+0xcc>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b25      	ldr	r3, [pc, #148]	; (800072c <SystemClock_Config+0xcc>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b22      	ldr	r3, [pc, #136]	; (8000730 <SystemClock_Config+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a21      	ldr	r2, [pc, #132]	; (8000730 <SystemClock_Config+0xd0>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b1f      	ldr	r3, [pc, #124]	; (8000730 <SystemClock_Config+0xd0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006d4:	23a8      	movs	r3, #168	; 0xa8
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f003 f9c7 	bl	8003a78 <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fa18 	bl	8000b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f4:	230f      	movs	r3, #15
 80006f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f8:	2302      	movs	r3, #2
 80006fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000700:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000704:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800070c:	f107 030c 	add.w	r3, r7, #12
 8000710:	2105      	movs	r1, #5
 8000712:	4618      	mov	r0, r3
 8000714:	f003 fc28 	bl	8003f68 <HAL_RCC_ClockConfig>
 8000718:	4603      	mov	r3, r0
 800071a:	2b00      	cmp	r3, #0
 800071c:	d001      	beq.n	8000722 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800071e:	f000 fa01 	bl	8000b24 <Error_Handler>
  }
}
 8000722:	bf00      	nop
 8000724:	3750      	adds	r7, #80	; 0x50
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40023800 	.word	0x40023800
 8000730:	40007000 	.word	0x40007000

08000734 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b084      	sub	sp, #16
 8000738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800073a:	463b      	mov	r3, r7
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_ADC1_Init+0x98>)
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <MX_ADC1_Init+0x9c>)
 800074a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800074c:	4b1f      	ldr	r3, [pc, #124]	; (80007cc <MX_ADC1_Init+0x98>)
 800074e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000752:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000754:	4b1d      	ldr	r3, [pc, #116]	; (80007cc <MX_ADC1_Init+0x98>)
 8000756:	2200      	movs	r2, #0
 8000758:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800075a:	4b1c      	ldr	r3, [pc, #112]	; (80007cc <MX_ADC1_Init+0x98>)
 800075c:	2200      	movs	r2, #0
 800075e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000760:	4b1a      	ldr	r3, [pc, #104]	; (80007cc <MX_ADC1_Init+0x98>)
 8000762:	2200      	movs	r2, #0
 8000764:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000766:	4b19      	ldr	r3, [pc, #100]	; (80007cc <MX_ADC1_Init+0x98>)
 8000768:	2200      	movs	r2, #0
 800076a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800076e:	4b17      	ldr	r3, [pc, #92]	; (80007cc <MX_ADC1_Init+0x98>)
 8000770:	2200      	movs	r2, #0
 8000772:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000774:	4b15      	ldr	r3, [pc, #84]	; (80007cc <MX_ADC1_Init+0x98>)
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <MX_ADC1_Init+0xa0>)
 8000778:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800077a:	4b14      	ldr	r3, [pc, #80]	; (80007cc <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000780:	4b12      	ldr	r3, [pc, #72]	; (80007cc <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000786:	4b11      	ldr	r3, [pc, #68]	; (80007cc <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <MX_ADC1_Init+0x98>)
 8000790:	2201      	movs	r2, #1
 8000792:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000794:	480d      	ldr	r0, [pc, #52]	; (80007cc <MX_ADC1_Init+0x98>)
 8000796:	f000 fce1 	bl	800115c <HAL_ADC_Init>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007a0:	f000 f9c0 	bl	8000b24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80007a4:	2301      	movs	r3, #1
 80007a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007a8:	2301      	movs	r3, #1
 80007aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007ac:	2300      	movs	r3, #0
 80007ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007b0:	463b      	mov	r3, r7
 80007b2:	4619      	mov	r1, r3
 80007b4:	4805      	ldr	r0, [pc, #20]	; (80007cc <MX_ADC1_Init+0x98>)
 80007b6:	f000 fd15 	bl	80011e4 <HAL_ADC_ConfigChannel>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007c0:	f000 f9b0 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007c4:	bf00      	nop
 80007c6:	3710      	adds	r7, #16
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	2000003c 	.word	0x2000003c
 80007d0:	40012000 	.word	0x40012000
 80007d4:	0f000001 	.word	0x0f000001

080007d8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80007dc:	4b12      	ldr	r3, [pc, #72]	; (8000828 <MX_I2C2_Init+0x50>)
 80007de:	4a13      	ldr	r2, [pc, #76]	; (800082c <MX_I2C2_Init+0x54>)
 80007e0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80007e2:	4b11      	ldr	r3, [pc, #68]	; (8000828 <MX_I2C2_Init+0x50>)
 80007e4:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_I2C2_Init+0x58>)
 80007e6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007e8:	4b0f      	ldr	r3, [pc, #60]	; (8000828 <MX_I2C2_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80007ee:	4b0e      	ldr	r3, [pc, #56]	; (8000828 <MX_I2C2_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007f4:	4b0c      	ldr	r3, [pc, #48]	; (8000828 <MX_I2C2_Init+0x50>)
 80007f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007fa:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007fc:	4b0a      	ldr	r3, [pc, #40]	; (8000828 <MX_I2C2_Init+0x50>)
 80007fe:	2200      	movs	r2, #0
 8000800:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8000802:	4b09      	ldr	r3, [pc, #36]	; (8000828 <MX_I2C2_Init+0x50>)
 8000804:	2200      	movs	r2, #0
 8000806:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000808:	4b07      	ldr	r3, [pc, #28]	; (8000828 <MX_I2C2_Init+0x50>)
 800080a:	2200      	movs	r2, #0
 800080c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800080e:	4b06      	ldr	r3, [pc, #24]	; (8000828 <MX_I2C2_Init+0x50>)
 8000810:	2200      	movs	r2, #0
 8000812:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000814:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_I2C2_Init+0x50>)
 8000816:	f001 fccf 	bl	80021b8 <HAL_I2C_Init>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8000820:	f000 f980 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	20000084 	.word	0x20000084
 800082c:	40005800 	.word	0x40005800
 8000830:	000186a0 	.word	0x000186a0

08000834 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000838:	4b13      	ldr	r3, [pc, #76]	; (8000888 <MX_I2S2_Init+0x54>)
 800083a:	4a14      	ldr	r2, [pc, #80]	; (800088c <MX_I2S2_Init+0x58>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800083e:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_I2S2_Init+0x54>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000846:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_I2S2_Init+0x54>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084c:	4b0e      	ldr	r3, [pc, #56]	; (8000888 <MX_I2S2_Init+0x54>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000852:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_I2S2_Init+0x54>)
 8000854:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000858:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800085a:	4b0b      	ldr	r3, [pc, #44]	; (8000888 <MX_I2S2_Init+0x54>)
 800085c:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000860:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_I2S2_Init+0x54>)
 8000864:	2200      	movs	r2, #0
 8000866:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_I2S2_Init+0x54>)
 800086a:	2200      	movs	r2, #0
 800086c:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_I2S2_Init+0x54>)
 8000870:	2201      	movs	r2, #1
 8000872:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_I2S2_Init+0x54>)
 8000876:	f002 fc5f 	bl	8003138 <HAL_I2S_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_I2S2_Init+0x50>
  {
    Error_Handler();
 8000880:	f000 f950 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	200000d8 	.word	0x200000d8
 800088c:	40003800 	.word	0x40003800

08000890 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_TIM14_Init+0x40>)
 8000896:	4a0f      	ldr	r2, [pc, #60]	; (80008d4 <MX_TIM14_Init+0x44>)
 8000898:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 1;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_TIM14_Init+0x40>)
 800089c:	2201      	movs	r2, #1
 800089e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_TIM14_Init+0x40>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 8400;
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <MX_TIM14_Init+0x40>)
 80008a8:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80008ac:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_TIM14_Init+0x40>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_TIM14_Init+0x40>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_TIM14_Init+0x40>)
 80008bc:	f003 fe74 	bl	80045a8 <HAL_TIM_Base_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 80008c6:	f000 f92d 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200001e0 	.word	0x200001e0
 80008d4:	40002000 	.word	0x40002000

080008d8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008dc:	4b11      	ldr	r3, [pc, #68]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008de:	4a12      	ldr	r2, [pc, #72]	; (8000928 <MX_USART1_UART_Init+0x50>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80008e2:	4b10      	ldr	r3, [pc, #64]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b0e      	ldr	r3, [pc, #56]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0c      	ldr	r3, [pc, #48]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0b      	ldr	r3, [pc, #44]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b09      	ldr	r3, [pc, #36]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b08      	ldr	r3, [pc, #32]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b06      	ldr	r3, [pc, #24]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800090e:	4805      	ldr	r0, [pc, #20]	; (8000924 <MX_USART1_UART_Init+0x4c>)
 8000910:	f004 f8ee 	bl	8004af0 <HAL_UART_Init>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800091a:	f000 f903 	bl	8000b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	20000228 	.word	0x20000228
 8000928:	40011000 	.word	0x40011000

0800092c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	607b      	str	r3, [r7, #4]
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <MX_DMA_Init+0x4c>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a0f      	ldr	r2, [pc, #60]	; (8000978 <MX_DMA_Init+0x4c>)
 800093c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b0d      	ldr	r3, [pc, #52]	; (8000978 <MX_DMA_Init+0x4c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800094a:	607b      	str	r3, [r7, #4]
 800094c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	200e      	movs	r0, #14
 8000954:	f000 ff3f 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000958:	200e      	movs	r0, #14
 800095a:	f000 ff58 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 800095e:	2200      	movs	r2, #0
 8000960:	2100      	movs	r1, #0
 8000962:	200f      	movs	r0, #15
 8000964:	f000 ff37 	bl	80017d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000968:	200f      	movs	r0, #15
 800096a:	f000 ff50 	bl	800180e <HAL_NVIC_EnableIRQ>

}
 800096e:	bf00      	nop
 8000970:	3708      	adds	r7, #8
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	40023800 	.word	0x40023800

0800097c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08a      	sub	sp, #40	; 0x28
 8000980:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	2200      	movs	r2, #0
 8000988:	601a      	str	r2, [r3, #0]
 800098a:	605a      	str	r2, [r3, #4]
 800098c:	609a      	str	r2, [r3, #8]
 800098e:	60da      	str	r2, [r3, #12]
 8000990:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]
 8000996:	4b2e      	ldr	r3, [pc, #184]	; (8000a50 <MX_GPIO_Init+0xd4>)
 8000998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099a:	4a2d      	ldr	r2, [pc, #180]	; (8000a50 <MX_GPIO_Init+0xd4>)
 800099c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a0:	6313      	str	r3, [r2, #48]	; 0x30
 80009a2:	4b2b      	ldr	r3, [pc, #172]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009aa:	613b      	str	r3, [r7, #16]
 80009ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ae:	2300      	movs	r3, #0
 80009b0:	60fb      	str	r3, [r7, #12]
 80009b2:	4b27      	ldr	r3, [pc, #156]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	4a26      	ldr	r2, [pc, #152]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	6313      	str	r3, [r2, #48]	; 0x30
 80009be:	4b24      	ldr	r3, [pc, #144]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	f003 0301 	and.w	r3, r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
 80009c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d2:	4a1f      	ldr	r2, [pc, #124]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009d4:	f043 0302 	orr.w	r3, r3, #2
 80009d8:	6313      	str	r3, [r2, #48]	; 0x30
 80009da:	4b1d      	ldr	r3, [pc, #116]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	f003 0302 	and.w	r3, r3, #2
 80009e2:	60bb      	str	r3, [r7, #8]
 80009e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
 80009ea:	4b19      	ldr	r3, [pc, #100]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a18      	ldr	r2, [pc, #96]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b16      	ldr	r3, [pc, #88]	; (8000a50 <MX_GPIO_Init+0xd4>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin, GPIO_PIN_RESET);
 8000a02:	2200      	movs	r2, #0
 8000a04:	f44f 7128 	mov.w	r1, #672	; 0x2a0
 8000a08:	4812      	ldr	r0, [pc, #72]	; (8000a54 <MX_GPIO_Init+0xd8>)
 8000a0a:	f001 fba1 	bl	8002150 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Status_LED_external_Pin STAT_LED_INT_Pin STAT_LED_EXT_Pin */
  GPIO_InitStruct.Pin = Status_LED_external_Pin|STAT_LED_INT_Pin|STAT_LED_EXT_Pin;
 8000a0e:	f44f 7328 	mov.w	r3, #672	; 0x2a0
 8000a12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a14:	2301      	movs	r3, #1
 8000a16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a20:	f107 0314 	add.w	r3, r7, #20
 8000a24:	4619      	mov	r1, r3
 8000a26:	480b      	ldr	r0, [pc, #44]	; (8000a54 <MX_GPIO_Init+0xd8>)
 8000a28:	f001 f9f6 	bl	8001e18 <HAL_GPIO_Init>

  /*Configure GPIO pin : ON_OFF_Pin */
  GPIO_InitStruct.Pin = ON_OFF_Pin;
 8000a2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a32:	2300      	movs	r3, #0
 8000a34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ON_OFF_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	f107 0314 	add.w	r3, r7, #20
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4804      	ldr	r0, [pc, #16]	; (8000a54 <MX_GPIO_Init+0xd8>)
 8000a42:	f001 f9e9 	bl	8001e18 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3728      	adds	r7, #40	; 0x28
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020400 	.word	0x40020400

08000a58 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  static int count_1ms = 0;
  static int count_10ms = 0;
  static int count_100ms = 0;
  static int count_1s = 0;

  if (htim->Instance == TIM14) // 100us
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a24      	ldr	r2, [pc, #144]	; (8000af8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000a66:	4293      	cmp	r3, r2
 8000a68:	d142      	bne.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0x98>
  {
    

    GL_timer_100us = 1;
 8000a6a:	4b24      	ldr	r3, [pc, #144]	; (8000afc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	601a      	str	r2, [r3, #0]
    count_100us++;
 8000a70:	4b23      	ldr	r3, [pc, #140]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a72:	681b      	ldr	r3, [r3, #0]
 8000a74:	3301      	adds	r3, #1
 8000a76:	4a22      	ldr	r2, [pc, #136]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a78:	6013      	str	r3, [r2, #0]

    if(count_100us >= 10)
 8000a7a:	4b21      	ldr	r3, [pc, #132]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a7c:	681b      	ldr	r3, [r3, #0]
 8000a7e:	2b09      	cmp	r3, #9
 8000a80:	dd0a      	ble.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x40>
    {
      count_100us = 0;
 8000a82:	4b1f      	ldr	r3, [pc, #124]	; (8000b00 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
      GL_timer_1ms = 1;
 8000a88:	4b1e      	ldr	r3, [pc, #120]	; (8000b04 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000a8a:	2201      	movs	r2, #1
 8000a8c:	601a      	str	r2, [r3, #0]
      count_1ms++;
 8000a8e:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a1c      	ldr	r2, [pc, #112]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a96:	6013      	str	r3, [r2, #0]
    }

    if(count_1ms >= 10)
 8000a98:	4b1b      	ldr	r3, [pc, #108]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b09      	cmp	r3, #9
 8000a9e:	dd0a      	ble.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
      count_1ms = 0;
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
      GL_timer_10ms = 1;
 8000aa6:	4b19      	ldr	r3, [pc, #100]	; (8000b0c <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	601a      	str	r2, [r3, #0]
      count_10ms++;
 8000aac:	4b18      	ldr	r3, [pc, #96]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	3301      	adds	r3, #1
 8000ab2:	4a17      	ldr	r2, [pc, #92]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ab4:	6013      	str	r3, [r2, #0]
    }

    if(count_10ms >= 10)
 8000ab6:	4b16      	ldr	r3, [pc, #88]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	dd0e      	ble.n	8000adc <HAL_TIM_PeriodElapsedCallback+0x84>
    {
      count_10ms = 0;
 8000abe:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
      GL_timer_100ms = 1;
 8000ac4:	4b13      	ldr	r3, [pc, #76]	; (8000b14 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	601a      	str	r2, [r3, #0]
      count_100ms++;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	4a11      	ldr	r2, [pc, #68]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ad2:	6013      	str	r3, [r2, #0]
      HAL_GPIO_TogglePin(STAT_LED_INT_GPIO_Port, STAT_LED_INT_Pin);
 8000ad4:	2180      	movs	r1, #128	; 0x80
 8000ad6:	4811      	ldr	r0, [pc, #68]	; (8000b1c <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000ad8:	f001 fb53 	bl	8002182 <HAL_GPIO_TogglePin>
    }

    if(count_100ms >= 10)
 8000adc:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	2b09      	cmp	r3, #9
 8000ae2:	dd05      	ble.n	8000af0 <HAL_TIM_PeriodElapsedCallback+0x98>
    {
      count_100ms = 0;
 8000ae4:	4b0c      	ldr	r3, [pc, #48]	; (8000b18 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	601a      	str	r2, [r3, #0]
      GL_timer_1s = 1;
 8000aea:	4b0d      	ldr	r3, [pc, #52]	; (8000b20 <HAL_TIM_PeriodElapsedCallback+0xc8>)
 8000aec:	2201      	movs	r2, #1
 8000aee:	601a      	str	r2, [r3, #0]
      //count_1s++;
    }
  
  }
}
 8000af0:	bf00      	nop
 8000af2:	3708      	adds	r7, #8
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40002000 	.word	0x40002000
 8000afc:	20000028 	.word	0x20000028
 8000b00:	2000026c 	.word	0x2000026c
 8000b04:	2000002c 	.word	0x2000002c
 8000b08:	20000270 	.word	0x20000270
 8000b0c:	20000030 	.word	0x20000030
 8000b10:	20000274 	.word	0x20000274
 8000b14:	20000034 	.word	0x20000034
 8000b18:	20000278 	.word	0x20000278
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	20000038 	.word	0x20000038

08000b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b28:	b672      	cpsid	i
}
 8000b2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <Error_Handler+0x8>
	...

08000b30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	607b      	str	r3, [r7, #4]
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3e:	4a0f      	ldr	r2, [pc, #60]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b44:	6453      	str	r3, [r2, #68]	; 0x44
 8000b46:	4b0d      	ldr	r3, [pc, #52]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	603b      	str	r3, [r7, #0]
 8000b56:	4b09      	ldr	r3, [pc, #36]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5a:	4a08      	ldr	r2, [pc, #32]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b60:	6413      	str	r3, [r2, #64]	; 0x40
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <HAL_MspInit+0x4c>)
 8000b64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	603b      	str	r3, [r7, #0]
 8000b6c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800

08000b80 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	; 0x28
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	601a      	str	r2, [r3, #0]
 8000b90:	605a      	str	r2, [r3, #4]
 8000b92:	609a      	str	r2, [r3, #8]
 8000b94:	60da      	str	r2, [r3, #12]
 8000b96:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	4a17      	ldr	r2, [pc, #92]	; (8000bfc <HAL_ADC_MspInit+0x7c>)
 8000b9e:	4293      	cmp	r3, r2
 8000ba0:	d127      	bne.n	8000bf2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
 8000ba6:	4b16      	ldr	r3, [pc, #88]	; (8000c00 <HAL_ADC_MspInit+0x80>)
 8000ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000baa:	4a15      	ldr	r2, [pc, #84]	; (8000c00 <HAL_ADC_MspInit+0x80>)
 8000bac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8000bb2:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <HAL_ADC_MspInit+0x80>)
 8000bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
 8000bc2:	4b0f      	ldr	r3, [pc, #60]	; (8000c00 <HAL_ADC_MspInit+0x80>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_ADC_MspInit+0x80>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b0c      	ldr	r3, [pc, #48]	; (8000c00 <HAL_ADC_MspInit+0x80>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60fb      	str	r3, [r7, #12]
 8000bd8:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = POT1_Pin|POT2_Pin|POT3_Pin|POT4_Pin
 8000bda:	231f      	movs	r3, #31
 8000bdc:	617b      	str	r3, [r7, #20]
                          |AD_PWR_SUPPLY_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bde:	2303      	movs	r3, #3
 8000be0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	4805      	ldr	r0, [pc, #20]	; (8000c04 <HAL_ADC_MspInit+0x84>)
 8000bee:	f001 f913 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000bf2:	bf00      	nop
 8000bf4:	3728      	adds	r7, #40	; 0x28
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	40012000 	.word	0x40012000
 8000c00:	40023800 	.word	0x40023800
 8000c04:	40020000 	.word	0x40020000

08000c08 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b08a      	sub	sp, #40	; 0x28
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 0314 	add.w	r3, r7, #20
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a19      	ldr	r2, [pc, #100]	; (8000c8c <HAL_I2C_MspInit+0x84>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d12c      	bne.n	8000c84 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	613b      	str	r3, [r7, #16]
 8000c2e:	4b18      	ldr	r3, [pc, #96]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a17      	ldr	r2, [pc, #92]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c34:	f043 0302 	orr.w	r3, r3, #2
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b15      	ldr	r3, [pc, #84]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	613b      	str	r3, [r7, #16]
 8000c44:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000c4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c4c:	2312      	movs	r3, #18
 8000c4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c58:	2304      	movs	r3, #4
 8000c5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	; (8000c94 <HAL_I2C_MspInit+0x8c>)
 8000c64:	f001 f8d8 	bl	8001e18 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a07      	ldr	r2, [pc, #28]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c72:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <HAL_I2C_MspInit+0x88>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	; 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	40005800 	.word	0x40005800
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40020400 	.word	0x40020400

08000c98 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b08e      	sub	sp, #56	; 0x38
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	601a      	str	r2, [r3, #0]
 8000ca8:	605a      	str	r2, [r3, #4]
 8000caa:	609a      	str	r2, [r3, #8]
 8000cac:	60da      	str	r2, [r3, #12]
 8000cae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a6b      	ldr	r2, [pc, #428]	; (8000e70 <HAL_I2S_MspInit+0x1d8>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	f040 80cf 	bne.w	8000e68 <HAL_I2S_MspInit+0x1d0>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000cce:	2332      	movs	r3, #50	; 0x32
 8000cd0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4618      	mov	r0, r3
 8000cdc:	f003 fb24 	bl	8004328 <HAL_RCCEx_PeriphCLKConfig>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8000ce6:	f7ff ff1d 	bl	8000b24 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	613b      	str	r3, [r7, #16]
 8000cee:	4b61      	ldr	r3, [pc, #388]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf2:	4a60      	ldr	r2, [pc, #384]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cf8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cfa:	4b5e      	ldr	r3, [pc, #376]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d02:	613b      	str	r3, [r7, #16]
 8000d04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	4b5a      	ldr	r3, [pc, #360]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a59      	ldr	r2, [pc, #356]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000d10:	f043 0302 	orr.w	r3, r3, #2
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b57      	ldr	r3, [pc, #348]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0302 	and.w	r3, r3, #2
 8000d1e:	60fb      	str	r3, [r7, #12]
 8000d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	4b53      	ldr	r3, [pc, #332]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a52      	ldr	r2, [pc, #328]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000d2c:	f043 0304 	orr.w	r3, r3, #4
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b50      	ldr	r3, [pc, #320]	; (8000e74 <HAL_I2S_MspInit+0x1dc>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0304 	and.w	r3, r3, #4
 8000d3a:	60bb      	str	r3, [r7, #8]
 8000d3c:	68bb      	ldr	r3, [r7, #8]
    PB13     ------> I2S2_CK
    PB14     ------> I2S2_ext_SD
    PB15     ------> I2S2_SD
    PC6     ------> I2S2_MCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000d3e:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 8000d42:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d44:	2302      	movs	r3, #2
 8000d46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d50:	2305      	movs	r3, #5
 8000d52:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4847      	ldr	r0, [pc, #284]	; (8000e78 <HAL_I2S_MspInit+0x1e0>)
 8000d5c:	f001 f85c 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000d60:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000d64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000d72:	2306      	movs	r3, #6
 8000d74:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	483e      	ldr	r0, [pc, #248]	; (8000e78 <HAL_I2S_MspInit+0x1e0>)
 8000d7e:	f001 f84b 	bl	8001e18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d82:	2340      	movs	r3, #64	; 0x40
 8000d84:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d86:	2302      	movs	r3, #2
 8000d88:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d92:	2305      	movs	r3, #5
 8000d94:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4837      	ldr	r0, [pc, #220]	; (8000e7c <HAL_I2S_MspInit+0x1e4>)
 8000d9e:	f001 f83b 	bl	8001e18 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 8000da2:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000da4:	4a37      	ldr	r2, [pc, #220]	; (8000e84 <HAL_I2S_MspInit+0x1ec>)
 8000da6:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 8000da8:	4b35      	ldr	r3, [pc, #212]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000dae:	4b34      	ldr	r3, [pc, #208]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000db0:	2240      	movs	r2, #64	; 0x40
 8000db2:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000db4:	4b32      	ldr	r3, [pc, #200]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000dba:	4b31      	ldr	r3, [pc, #196]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000dbc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000dc0:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000dc2:	4b2f      	ldr	r3, [pc, #188]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dc8:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000dcc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000dd0:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 8000dd2:	4b2b      	ldr	r3, [pc, #172]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000dd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000dd8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000dda:	4b29      	ldr	r3, [pc, #164]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000ddc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000de0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000de2:	4b27      	ldr	r3, [pc, #156]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000de8:	4825      	ldr	r0, [pc, #148]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000dea:	f000 fd2b 	bl	8001844 <HAL_DMA_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <HAL_I2S_MspInit+0x160>
    {
      Error_Handler();
 8000df4:	f7ff fe96 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000dfc:	639a      	str	r2, [r3, #56]	; 0x38
 8000dfe:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <HAL_I2S_MspInit+0x1e8>)
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2S2_EXT_RX Init */
    hdma_i2s2_ext_rx.Instance = DMA1_Stream3;
 8000e04:	4b20      	ldr	r3, [pc, #128]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e06:	4a21      	ldr	r2, [pc, #132]	; (8000e8c <HAL_I2S_MspInit+0x1f4>)
 8000e08:	601a      	str	r2, [r3, #0]
    hdma_i2s2_ext_rx.Init.Channel = DMA_CHANNEL_3;
 8000e0a:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e0c:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000e10:	605a      	str	r2, [r3, #4]
    hdma_i2s2_ext_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e12:	4b1d      	ldr	r3, [pc, #116]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
    hdma_i2s2_ext_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e18:	4b1b      	ldr	r3, [pc, #108]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
    hdma_i2s2_ext_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e20:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e24:	611a      	str	r2, [r3, #16]
    hdma_i2s2_ext_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e26:	4b18      	ldr	r3, [pc, #96]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e28:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e2c:	615a      	str	r2, [r3, #20]
    hdma_i2s2_ext_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e2e:	4b16      	ldr	r3, [pc, #88]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e30:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e34:	619a      	str	r2, [r3, #24]
    hdma_i2s2_ext_rx.Init.Mode = DMA_CIRCULAR;
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e38:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e3c:	61da      	str	r2, [r3, #28]
    hdma_i2s2_ext_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e40:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e44:	621a      	str	r2, [r3, #32]
    hdma_i2s2_ext_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e46:	4b10      	ldr	r3, [pc, #64]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2s2_ext_rx) != HAL_OK)
 8000e4c:	480e      	ldr	r0, [pc, #56]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e4e:	f000 fcf9 	bl	8001844 <HAL_DMA_Init>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <HAL_I2S_MspInit+0x1c4>
    {
      Error_Handler();
 8000e58:	f7ff fe64 	bl	8000b24 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_i2s2_ext_rx);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4a0a      	ldr	r2, [pc, #40]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e60:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e62:	4a09      	ldr	r2, [pc, #36]	; (8000e88 <HAL_I2S_MspInit+0x1f0>)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000e68:	bf00      	nop
 8000e6a:	3738      	adds	r7, #56	; 0x38
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40003800 	.word	0x40003800
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40020400 	.word	0x40020400
 8000e7c:	40020800 	.word	0x40020800
 8000e80:	20000120 	.word	0x20000120
 8000e84:	40026070 	.word	0x40026070
 8000e88:	20000180 	.word	0x20000180
 8000e8c:	40026058 	.word	0x40026058

08000e90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_TIM_Base_MspInit+0x48>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d115      	bne.n	8000ece <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b0d      	ldr	r3, [pc, #52]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	4a0c      	ldr	r2, [pc, #48]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	; (8000edc <HAL_TIM_Base_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	202d      	movs	r0, #45	; 0x2d
 8000ec4:	f000 fc87 	bl	80017d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000ec8:	202d      	movs	r0, #45	; 0x2d
 8000eca:	f000 fca0 	bl	800180e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000ece:	bf00      	nop
 8000ed0:	3710      	adds	r7, #16
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40002000 	.word	0x40002000
 8000edc:	40023800 	.word	0x40023800

08000ee0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12c      	bne.n	8000f5c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f0c:	f043 0310 	orr.w	r3, r3, #16
 8000f10:	6453      	str	r3, [r2, #68]	; 0x44
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f16:	f003 0310 	and.w	r3, r3, #16
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
 8000f22:	4b11      	ldr	r3, [pc, #68]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a10      	ldr	r2, [pc, #64]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0e      	ldr	r3, [pc, #56]	; (8000f68 <HAL_UART_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	60fb      	str	r3, [r7, #12]
 8000f38:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f3a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f40:	2302      	movs	r3, #2
 8000f42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f44:	2300      	movs	r3, #0
 8000f46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f48:	2303      	movs	r3, #3
 8000f4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f50:	f107 0314 	add.w	r3, r7, #20
 8000f54:	4619      	mov	r1, r3
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <HAL_UART_MspInit+0x8c>)
 8000f58:	f000 ff5e 	bl	8001e18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40011000 	.word	0x40011000
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020000 	.word	0x40020000

08000f70 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <NMI_Handler+0x4>

08000f76 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <HardFault_Handler+0x4>

08000f7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <MemManage_Handler+0x4>

08000f82 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f86:	e7fe      	b.n	8000f86 <BusFault_Handler+0x4>

08000f88 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f8c:	e7fe      	b.n	8000f8c <UsageFault_Handler+0x4>

08000f8e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f92:	bf00      	nop
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000faa:	b480      	push	{r7}
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr

08000fb8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fbc:	f000 f8ae 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2s2_ext_rx);
 8000fc8:	4802      	ldr	r0, [pc, #8]	; (8000fd4 <DMA1_Stream3_IRQHandler+0x10>)
 8000fca:	f000 fce9 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	bf00      	nop
 8000fd4:	20000180 	.word	0x20000180

08000fd8 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000fdc:	4802      	ldr	r0, [pc, #8]	; (8000fe8 <DMA1_Stream4_IRQHandler+0x10>)
 8000fde:	f000 fcdf 	bl	80019a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	20000120 	.word	0x20000120

08000fec <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000ff0:	4802      	ldr	r0, [pc, #8]	; (8000ffc <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000ff2:	f003 fb99 	bl	8004728 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	200001e0 	.word	0x200001e0

08001000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001004:	4b06      	ldr	r3, [pc, #24]	; (8001020 <SystemInit+0x20>)
 8001006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800100a:	4a05      	ldr	r2, [pc, #20]	; (8001020 <SystemInit+0x20>)
 800100c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	e000ed00 	.word	0xe000ed00

08001024 <Reset_Handler>:
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopFillZerobss+0x12>
 8001028:	480d      	ldr	r0, [pc, #52]	; (8001060 <LoopFillZerobss+0x16>)
 800102a:	490e      	ldr	r1, [pc, #56]	; (8001064 <LoopFillZerobss+0x1a>)
 800102c:	4a0e      	ldr	r2, [pc, #56]	; (8001068 <LoopFillZerobss+0x1e>)
 800102e:	2300      	movs	r3, #0
 8001030:	e002      	b.n	8001038 <LoopCopyDataInit>

08001032 <CopyDataInit>:
 8001032:	58d4      	ldr	r4, [r2, r3]
 8001034:	50c4      	str	r4, [r0, r3]
 8001036:	3304      	adds	r3, #4

08001038 <LoopCopyDataInit>:
 8001038:	18c4      	adds	r4, r0, r3
 800103a:	428c      	cmp	r4, r1
 800103c:	d3f9      	bcc.n	8001032 <CopyDataInit>
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopFillZerobss+0x22>)
 8001040:	4c0b      	ldr	r4, [pc, #44]	; (8001070 <LoopFillZerobss+0x26>)
 8001042:	2300      	movs	r3, #0
 8001044:	e001      	b.n	800104a <LoopFillZerobss>

08001046 <FillZerobss>:
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	3204      	adds	r2, #4

0800104a <LoopFillZerobss>:
 800104a:	42a2      	cmp	r2, r4
 800104c:	d3fb      	bcc.n	8001046 <FillZerobss>
 800104e:	f7ff ffd7 	bl	8001000 <SystemInit>
 8001052:	f004 f817 	bl	8005084 <__libc_init_array>
 8001056:	f7ff fad9 	bl	800060c <main>
 800105a:	4770      	bx	lr
 800105c:	20020000 	.word	0x20020000
 8001060:	20000000 	.word	0x20000000
 8001064:	2000000c 	.word	0x2000000c
 8001068:	08005114 	.word	0x08005114
 800106c:	2000000c 	.word	0x2000000c
 8001070:	20000280 	.word	0x20000280

08001074 <ADC_IRQHandler>:
 8001074:	e7fe      	b.n	8001074 <ADC_IRQHandler>
	...

08001078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800107c:	4b0e      	ldr	r3, [pc, #56]	; (80010b8 <HAL_Init+0x40>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a0d      	ldr	r2, [pc, #52]	; (80010b8 <HAL_Init+0x40>)
 8001082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001088:	4b0b      	ldr	r3, [pc, #44]	; (80010b8 <HAL_Init+0x40>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a0a      	ldr	r2, [pc, #40]	; (80010b8 <HAL_Init+0x40>)
 800108e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_Init+0x40>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a07      	ldr	r2, [pc, #28]	; (80010b8 <HAL_Init+0x40>)
 800109a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a0:	2003      	movs	r0, #3
 80010a2:	f000 fb8d 	bl	80017c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010a6:	200f      	movs	r0, #15
 80010a8:	f000 f808 	bl	80010bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ac:	f7ff fd40 	bl	8000b30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b0:	2300      	movs	r3, #0
}
 80010b2:	4618      	mov	r0, r3
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	40023c00 	.word	0x40023c00

080010bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b082      	sub	sp, #8
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_InitTick+0x54>)
 80010c6:	681a      	ldr	r2, [r3, #0]
 80010c8:	4b12      	ldr	r3, [pc, #72]	; (8001114 <HAL_InitTick+0x58>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	4619      	mov	r1, r3
 80010ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 fba5 	bl	800182a <HAL_SYSTICK_Config>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010e6:	2301      	movs	r3, #1
 80010e8:	e00e      	b.n	8001108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b0f      	cmp	r3, #15
 80010ee:	d80a      	bhi.n	8001106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f0:	2200      	movs	r2, #0
 80010f2:	6879      	ldr	r1, [r7, #4]
 80010f4:	f04f 30ff 	mov.w	r0, #4294967295
 80010f8:	f000 fb6d 	bl	80017d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010fc:	4a06      	ldr	r2, [pc, #24]	; (8001118 <HAL_InitTick+0x5c>)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
 8001104:	e000      	b.n	8001108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
}
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000000 	.word	0x20000000
 8001114:	20000008 	.word	0x20000008
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_IncTick+0x20>)
 8001122:	781b      	ldrb	r3, [r3, #0]
 8001124:	461a      	mov	r2, r3
 8001126:	4b06      	ldr	r3, [pc, #24]	; (8001140 <HAL_IncTick+0x24>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4413      	add	r3, r2
 800112c:	4a04      	ldr	r2, [pc, #16]	; (8001140 <HAL_IncTick+0x24>)
 800112e:	6013      	str	r3, [r2, #0]
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	20000008 	.word	0x20000008
 8001140:	2000027c 	.word	0x2000027c

08001144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return uwTick;
 8001148:	4b03      	ldr	r3, [pc, #12]	; (8001158 <HAL_GetTick+0x14>)
 800114a:	681b      	ldr	r3, [r3, #0]
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	2000027c 	.word	0x2000027c

0800115c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b084      	sub	sp, #16
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001164:	2300      	movs	r3, #0
 8001166:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d101      	bne.n	8001172 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800116e:	2301      	movs	r3, #1
 8001170:	e033      	b.n	80011da <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001176:	2b00      	cmp	r3, #0
 8001178:	d109      	bne.n	800118e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff fd00 	bl	8000b80 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	f003 0310 	and.w	r3, r3, #16
 8001196:	2b00      	cmp	r3, #0
 8001198:	d118      	bne.n	80011cc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011a2:	f023 0302 	bic.w	r3, r3, #2
 80011a6:	f043 0202 	orr.w	r2, r3, #2
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011ae:	6878      	ldr	r0, [r7, #4]
 80011b0:	f000 f93a 	bl	8001428 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2200      	movs	r2, #0
 80011b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011be:	f023 0303 	bic.w	r3, r3, #3
 80011c2:	f043 0201 	orr.w	r2, r3, #1
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
 80011ca:	e001      	b.n	80011d0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011cc:	2301      	movs	r3, #1
 80011ce:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
	...

080011e4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80011e4:	b480      	push	{r7}
 80011e6:	b085      	sub	sp, #20
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d101      	bne.n	8001200 <HAL_ADC_ConfigChannel+0x1c>
 80011fc:	2302      	movs	r3, #2
 80011fe:	e105      	b.n	800140c <HAL_ADC_ConfigChannel+0x228>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	2201      	movs	r2, #1
 8001204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b09      	cmp	r3, #9
 800120e:	d925      	bls.n	800125c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	68d9      	ldr	r1, [r3, #12]
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	461a      	mov	r2, r3
 800121e:	4613      	mov	r3, r2
 8001220:	005b      	lsls	r3, r3, #1
 8001222:	4413      	add	r3, r2
 8001224:	3b1e      	subs	r3, #30
 8001226:	2207      	movs	r2, #7
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43da      	mvns	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	400a      	ands	r2, r1
 8001234:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	68d9      	ldr	r1, [r3, #12]
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	689a      	ldr	r2, [r3, #8]
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	b29b      	uxth	r3, r3
 8001246:	4618      	mov	r0, r3
 8001248:	4603      	mov	r3, r0
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4403      	add	r3, r0
 800124e:	3b1e      	subs	r3, #30
 8001250:	409a      	lsls	r2, r3
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	430a      	orrs	r2, r1
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	e022      	b.n	80012a2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6919      	ldr	r1, [r3, #16]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	b29b      	uxth	r3, r3
 8001268:	461a      	mov	r2, r3
 800126a:	4613      	mov	r3, r2
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	4413      	add	r3, r2
 8001270:	2207      	movs	r2, #7
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	43da      	mvns	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	400a      	ands	r2, r1
 800127e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6919      	ldr	r1, [r3, #16]
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	b29b      	uxth	r3, r3
 8001290:	4618      	mov	r0, r3
 8001292:	4603      	mov	r3, r0
 8001294:	005b      	lsls	r3, r3, #1
 8001296:	4403      	add	r3, r0
 8001298:	409a      	lsls	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	430a      	orrs	r2, r1
 80012a0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	2b06      	cmp	r3, #6
 80012a8:	d824      	bhi.n	80012f4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	3b05      	subs	r3, #5
 80012bc:	221f      	movs	r2, #31
 80012be:	fa02 f303 	lsl.w	r3, r2, r3
 80012c2:	43da      	mvns	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	400a      	ands	r2, r1
 80012ca:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	4618      	mov	r0, r3
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685a      	ldr	r2, [r3, #4]
 80012de:	4613      	mov	r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	4413      	add	r3, r2
 80012e4:	3b05      	subs	r3, #5
 80012e6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34
 80012f2:	e04c      	b.n	800138e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b0c      	cmp	r3, #12
 80012fa:	d824      	bhi.n	8001346 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	4413      	add	r3, r2
 800130c:	3b23      	subs	r3, #35	; 0x23
 800130e:	221f      	movs	r2, #31
 8001310:	fa02 f303 	lsl.w	r3, r2, r3
 8001314:	43da      	mvns	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	400a      	ands	r2, r1
 800131c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	b29b      	uxth	r3, r3
 800132a:	4618      	mov	r0, r3
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	4613      	mov	r3, r2
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	4413      	add	r3, r2
 8001336:	3b23      	subs	r3, #35	; 0x23
 8001338:	fa00 f203 	lsl.w	r2, r0, r3
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	430a      	orrs	r2, r1
 8001342:	631a      	str	r2, [r3, #48]	; 0x30
 8001344:	e023      	b.n	800138e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	685a      	ldr	r2, [r3, #4]
 8001350:	4613      	mov	r3, r2
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	4413      	add	r3, r2
 8001356:	3b41      	subs	r3, #65	; 0x41
 8001358:	221f      	movs	r2, #31
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	43da      	mvns	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	400a      	ands	r2, r1
 8001366:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	b29b      	uxth	r3, r3
 8001374:	4618      	mov	r0, r3
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	4613      	mov	r3, r2
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	3b41      	subs	r3, #65	; 0x41
 8001382:	fa00 f203 	lsl.w	r2, r0, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800138e:	4b22      	ldr	r3, [pc, #136]	; (8001418 <HAL_ADC_ConfigChannel+0x234>)
 8001390:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	4a21      	ldr	r2, [pc, #132]	; (800141c <HAL_ADC_ConfigChannel+0x238>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d109      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x1cc>
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	2b12      	cmp	r3, #18
 80013a2:	d105      	bne.n	80013b0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a19      	ldr	r2, [pc, #100]	; (800141c <HAL_ADC_ConfigChannel+0x238>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d123      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x21e>
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	2b10      	cmp	r3, #16
 80013c0:	d003      	beq.n	80013ca <HAL_ADC_ConfigChannel+0x1e6>
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b11      	cmp	r3, #17
 80013c8:	d11b      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b10      	cmp	r3, #16
 80013dc:	d111      	bne.n	8001402 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_ADC_ConfigChannel+0x23c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a10      	ldr	r2, [pc, #64]	; (8001424 <HAL_ADC_ConfigChannel+0x240>)
 80013e4:	fba2 2303 	umull	r2, r3, r2, r3
 80013e8:	0c9a      	lsrs	r2, r3, #18
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	005b      	lsls	r3, r3, #1
 80013f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013f4:	e002      	b.n	80013fc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	3b01      	subs	r3, #1
 80013fa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d1f9      	bne.n	80013f6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800140a:	2300      	movs	r3, #0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	40012300 	.word	0x40012300
 800141c:	40012000 	.word	0x40012000
 8001420:	20000000 	.word	0x20000000
 8001424:	431bde83 	.word	0x431bde83

08001428 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001430:	4b79      	ldr	r3, [pc, #484]	; (8001618 <ADC_Init+0x1f0>)
 8001432:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	685a      	ldr	r2, [r3, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	431a      	orrs	r2, r3
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	685a      	ldr	r2, [r3, #4]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800145c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6859      	ldr	r1, [r3, #4]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	691b      	ldr	r3, [r3, #16]
 8001468:	021a      	lsls	r2, r3, #8
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	430a      	orrs	r2, r1
 8001470:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	685a      	ldr	r2, [r3, #4]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	6859      	ldr	r1, [r3, #4]
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	689a      	ldr	r2, [r3, #8]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80014a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6899      	ldr	r1, [r3, #8]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	68da      	ldr	r2, [r3, #12]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	430a      	orrs	r2, r1
 80014b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ba:	4a58      	ldr	r2, [pc, #352]	; (800161c <ADC_Init+0x1f4>)
 80014bc:	4293      	cmp	r3, r2
 80014be:	d022      	beq.n	8001506 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	689a      	ldr	r2, [r3, #8]
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80014ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	6899      	ldr	r1, [r3, #8]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	430a      	orrs	r2, r1
 80014e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689a      	ldr	r2, [r3, #8]
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6899      	ldr	r1, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	430a      	orrs	r2, r1
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	e00f      	b.n	8001526 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	689a      	ldr	r2, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001524:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	689a      	ldr	r2, [r3, #8]
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f022 0202 	bic.w	r2, r2, #2
 8001534:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	6899      	ldr	r1, [r3, #8]
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	7e1b      	ldrb	r3, [r3, #24]
 8001540:	005a      	lsls	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001550:	2b00      	cmp	r3, #0
 8001552:	d01b      	beq.n	800158c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001562:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	685a      	ldr	r2, [r3, #4]
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001572:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	6859      	ldr	r1, [r3, #4]
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800157e:	3b01      	subs	r3, #1
 8001580:	035a      	lsls	r2, r3, #13
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	430a      	orrs	r2, r1
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	e007      	b.n	800159c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	685a      	ldr	r2, [r3, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800159a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80015aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	69db      	ldr	r3, [r3, #28]
 80015b6:	3b01      	subs	r3, #1
 80015b8:	051a      	lsls	r2, r3, #20
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	430a      	orrs	r2, r1
 80015c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	689a      	ldr	r2, [r3, #8]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80015d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	6899      	ldr	r1, [r3, #8]
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80015de:	025a      	lsls	r2, r3, #9
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	689a      	ldr	r2, [r3, #8]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	6899      	ldr	r1, [r3, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	695b      	ldr	r3, [r3, #20]
 8001602:	029a      	lsls	r2, r3, #10
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	430a      	orrs	r2, r1
 800160a:	609a      	str	r2, [r3, #8]
}
 800160c:	bf00      	nop
 800160e:	3714      	adds	r7, #20
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	40012300 	.word	0x40012300
 800161c:	0f000001 	.word	0x0f000001

08001620 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001620:	b480      	push	{r7}
 8001622:	b085      	sub	sp, #20
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	f003 0307 	and.w	r3, r3, #7
 800162e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001630:	4b0c      	ldr	r3, [pc, #48]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001632:	68db      	ldr	r3, [r3, #12]
 8001634:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800163c:	4013      	ands	r3, r2
 800163e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001648:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800164c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001650:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001652:	4a04      	ldr	r2, [pc, #16]	; (8001664 <__NVIC_SetPriorityGrouping+0x44>)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	60d3      	str	r3, [r2, #12]
}
 8001658:	bf00      	nop
 800165a:	3714      	adds	r7, #20
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800166c:	4b04      	ldr	r3, [pc, #16]	; (8001680 <__NVIC_GetPriorityGrouping+0x18>)
 800166e:	68db      	ldr	r3, [r3, #12]
 8001670:	0a1b      	lsrs	r3, r3, #8
 8001672:	f003 0307 	and.w	r3, r3, #7
}
 8001676:	4618      	mov	r0, r3
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001684:	b480      	push	{r7}
 8001686:	b083      	sub	sp, #12
 8001688:	af00      	add	r7, sp, #0
 800168a:	4603      	mov	r3, r0
 800168c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800168e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001692:	2b00      	cmp	r3, #0
 8001694:	db0b      	blt.n	80016ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 021f 	and.w	r2, r3, #31
 800169c:	4907      	ldr	r1, [pc, #28]	; (80016bc <__NVIC_EnableIRQ+0x38>)
 800169e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a2:	095b      	lsrs	r3, r3, #5
 80016a4:	2001      	movs	r0, #1
 80016a6:	fa00 f202 	lsl.w	r2, r0, r2
 80016aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80016ae:	bf00      	nop
 80016b0:	370c      	adds	r7, #12
 80016b2:	46bd      	mov	sp, r7
 80016b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b8:	4770      	bx	lr
 80016ba:	bf00      	nop
 80016bc:	e000e100 	.word	0xe000e100

080016c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	4603      	mov	r3, r0
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	db0a      	blt.n	80016ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	b2da      	uxtb	r2, r3
 80016d8:	490c      	ldr	r1, [pc, #48]	; (800170c <__NVIC_SetPriority+0x4c>)
 80016da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016de:	0112      	lsls	r2, r2, #4
 80016e0:	b2d2      	uxtb	r2, r2
 80016e2:	440b      	add	r3, r1
 80016e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016e8:	e00a      	b.n	8001700 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	b2da      	uxtb	r2, r3
 80016ee:	4908      	ldr	r1, [pc, #32]	; (8001710 <__NVIC_SetPriority+0x50>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	3b04      	subs	r3, #4
 80016f8:	0112      	lsls	r2, r2, #4
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	440b      	add	r3, r1
 80016fe:	761a      	strb	r2, [r3, #24]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	e000e100 	.word	0xe000e100
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001714:	b480      	push	{r7}
 8001716:	b089      	sub	sp, #36	; 0x24
 8001718:	af00      	add	r7, sp, #0
 800171a:	60f8      	str	r0, [r7, #12]
 800171c:	60b9      	str	r1, [r7, #8]
 800171e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f003 0307 	and.w	r3, r3, #7
 8001726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	f1c3 0307 	rsb	r3, r3, #7
 800172e:	2b04      	cmp	r3, #4
 8001730:	bf28      	it	cs
 8001732:	2304      	movcs	r3, #4
 8001734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	3304      	adds	r3, #4
 800173a:	2b06      	cmp	r3, #6
 800173c:	d902      	bls.n	8001744 <NVIC_EncodePriority+0x30>
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	3b03      	subs	r3, #3
 8001742:	e000      	b.n	8001746 <NVIC_EncodePriority+0x32>
 8001744:	2300      	movs	r3, #0
 8001746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	43da      	mvns	r2, r3
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	401a      	ands	r2, r3
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800175c:	f04f 31ff 	mov.w	r1, #4294967295
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa01 f303 	lsl.w	r3, r1, r3
 8001766:	43d9      	mvns	r1, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800176c:	4313      	orrs	r3, r2
         );
}
 800176e:	4618      	mov	r0, r3
 8001770:	3724      	adds	r7, #36	; 0x24
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
	...

0800177c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	3b01      	subs	r3, #1
 8001788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800178c:	d301      	bcc.n	8001792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800178e:	2301      	movs	r3, #1
 8001790:	e00f      	b.n	80017b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001792:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <SysTick_Config+0x40>)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800179a:	210f      	movs	r1, #15
 800179c:	f04f 30ff 	mov.w	r0, #4294967295
 80017a0:	f7ff ff8e 	bl	80016c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017a4:	4b05      	ldr	r3, [pc, #20]	; (80017bc <SysTick_Config+0x40>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017aa:	4b04      	ldr	r3, [pc, #16]	; (80017bc <SysTick_Config+0x40>)
 80017ac:	2207      	movs	r2, #7
 80017ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017b0:	2300      	movs	r3, #0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	e000e010 	.word	0xe000e010

080017c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017c8:	6878      	ldr	r0, [r7, #4]
 80017ca:	f7ff ff29 	bl	8001620 <__NVIC_SetPriorityGrouping>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}

080017d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017d6:	b580      	push	{r7, lr}
 80017d8:	b086      	sub	sp, #24
 80017da:	af00      	add	r7, sp, #0
 80017dc:	4603      	mov	r3, r0
 80017de:	60b9      	str	r1, [r7, #8]
 80017e0:	607a      	str	r2, [r7, #4]
 80017e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80017e4:	2300      	movs	r3, #0
 80017e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80017e8:	f7ff ff3e 	bl	8001668 <__NVIC_GetPriorityGrouping>
 80017ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	6978      	ldr	r0, [r7, #20]
 80017f4:	f7ff ff8e 	bl	8001714 <NVIC_EncodePriority>
 80017f8:	4602      	mov	r2, r0
 80017fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f7ff ff5d 	bl	80016c0 <__NVIC_SetPriority>
}
 8001806:	bf00      	nop
 8001808:	3718      	adds	r7, #24
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b082      	sub	sp, #8
 8001812:	af00      	add	r7, sp, #0
 8001814:	4603      	mov	r3, r0
 8001816:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181c:	4618      	mov	r0, r3
 800181e:	f7ff ff31 	bl	8001684 <__NVIC_EnableIRQ>
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b082      	sub	sp, #8
 800182e:	af00      	add	r7, sp, #0
 8001830:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffa2 	bl	800177c <SysTick_Config>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
	...

08001844 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b086      	sub	sp, #24
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800184c:	2300      	movs	r3, #0
 800184e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001850:	f7ff fc78 	bl	8001144 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2b00      	cmp	r3, #0
 800185a:	d101      	bne.n	8001860 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e099      	b.n	8001994 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2202      	movs	r2, #2
 8001864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2200      	movs	r2, #0
 800186c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f022 0201 	bic.w	r2, r2, #1
 800187e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001880:	e00f      	b.n	80018a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001882:	f7ff fc5f 	bl	8001144 <HAL_GetTick>
 8001886:	4602      	mov	r2, r0
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	1ad3      	subs	r3, r2, r3
 800188c:	2b05      	cmp	r3, #5
 800188e:	d908      	bls.n	80018a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2203      	movs	r2, #3
 800189a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e078      	b.n	8001994 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1e8      	bne.n	8001882 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80018b8:	697a      	ldr	r2, [r7, #20]
 80018ba:	4b38      	ldr	r3, [pc, #224]	; (800199c <HAL_DMA_Init+0x158>)
 80018bc:	4013      	ands	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685a      	ldr	r2, [r3, #4]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80018da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	699b      	ldr	r3, [r3, #24]
 80018e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80018e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a1b      	ldr	r3, [r3, #32]
 80018ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2b04      	cmp	r3, #4
 80018fa:	d107      	bne.n	800190c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001904:	4313      	orrs	r3, r2
 8001906:	697a      	ldr	r2, [r7, #20]
 8001908:	4313      	orrs	r3, r2
 800190a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	697a      	ldr	r2, [r7, #20]
 8001912:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695b      	ldr	r3, [r3, #20]
 800191a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f023 0307 	bic.w	r3, r3, #7
 8001922:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001928:	697a      	ldr	r2, [r7, #20]
 800192a:	4313      	orrs	r3, r2
 800192c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001932:	2b04      	cmp	r3, #4
 8001934:	d117      	bne.n	8001966 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4313      	orrs	r3, r2
 800193e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001944:	2b00      	cmp	r3, #0
 8001946:	d00e      	beq.n	8001966 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f000 f9e9 	bl	8001d20 <DMA_CheckFifoParam>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2240      	movs	r2, #64	; 0x40
 8001958:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2201      	movs	r2, #1
 800195e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001962:	2301      	movs	r3, #1
 8001964:	e016      	b.n	8001994 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 f9a0 	bl	8001cb4 <DMA_CalcBaseAndBitshift>
 8001974:	4603      	mov	r3, r0
 8001976:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	223f      	movs	r2, #63	; 0x3f
 800197e:	409a      	lsls	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	2200      	movs	r2, #0
 8001988:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2201      	movs	r2, #1
 800198e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3718      	adds	r7, #24
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	f010803f 	.word	0xf010803f

080019a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b086      	sub	sp, #24
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80019ac:	4b8e      	ldr	r3, [pc, #568]	; (8001be8 <HAL_DMA_IRQHandler+0x248>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4a8e      	ldr	r2, [pc, #568]	; (8001bec <HAL_DMA_IRQHandler+0x24c>)
 80019b2:	fba2 2303 	umull	r2, r3, r2, r3
 80019b6:	0a9b      	lsrs	r3, r3, #10
 80019b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2208      	movs	r2, #8
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d01a      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0304 	and.w	r3, r3, #4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d013      	beq.n	8001a0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	681a      	ldr	r2, [r3, #0]
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f022 0204 	bic.w	r2, r2, #4
 80019f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2208      	movs	r2, #8
 80019fa:	409a      	lsls	r2, r3
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a04:	f043 0201 	orr.w	r2, r3, #1
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a10:	2201      	movs	r2, #1
 8001a12:	409a      	lsls	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	4013      	ands	r3, r2
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d012      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	695b      	ldr	r3, [r3, #20]
 8001a22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d00b      	beq.n	8001a42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2e:	2201      	movs	r2, #1
 8001a30:	409a      	lsls	r2, r3
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a3a:	f043 0202 	orr.w	r2, r3, #2
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a46:	2204      	movs	r2, #4
 8001a48:	409a      	lsls	r2, r3
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d012      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00b      	beq.n	8001a78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a64:	2204      	movs	r2, #4
 8001a66:	409a      	lsls	r2, r3
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a70:	f043 0204 	orr.w	r2, r3, #4
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a7c:	2210      	movs	r2, #16
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d043      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0308 	and.w	r3, r3, #8
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d03c      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a9a:	2210      	movs	r2, #16
 8001a9c:	409a      	lsls	r2, r3
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d018      	beq.n	8001ae2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d108      	bne.n	8001ad0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d024      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	4798      	blx	r3
 8001ace:	e01f      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d01b      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	4798      	blx	r3
 8001ae0:	e016      	b.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d107      	bne.n	8001b00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f022 0208 	bic.w	r2, r2, #8
 8001afe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d003      	beq.n	8001b10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b14:	2220      	movs	r2, #32
 8001b16:	409a      	lsls	r2, r3
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	f000 808f 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0310 	and.w	r3, r3, #16
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8087 	beq.w	8001c40 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b36:	2220      	movs	r2, #32
 8001b38:	409a      	lsls	r2, r3
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d136      	bne.n	8001bb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0216 	bic.w	r2, r2, #22
 8001b58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	695a      	ldr	r2, [r3, #20]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d103      	bne.n	8001b7a <HAL_DMA_IRQHandler+0x1da>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d007      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f022 0208 	bic.w	r2, r2, #8
 8001b88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b8e:	223f      	movs	r2, #63	; 0x3f
 8001b90:	409a      	lsls	r2, r3
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	2201      	movs	r2, #1
 8001b9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d07e      	beq.n	8001cac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	4798      	blx	r3
        }
        return;
 8001bb6:	e079      	b.n	8001cac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d01d      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10d      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d031      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001be0:	6878      	ldr	r0, [r7, #4]
 8001be2:	4798      	blx	r3
 8001be4:	e02c      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
 8001be6:	bf00      	nop
 8001be8:	20000000 	.word	0x20000000
 8001bec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d023      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	4798      	blx	r3
 8001c00:	e01e      	b.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d10f      	bne.n	8001c30 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f022 0210 	bic.w	r2, r2, #16
 8001c1e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2201      	movs	r2, #1
 8001c24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d003      	beq.n	8001c40 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d032      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d022      	beq.n	8001c9a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2205      	movs	r2, #5
 8001c58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0201 	bic.w	r2, r2, #1
 8001c6a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	697a      	ldr	r2, [r7, #20]
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d307      	bcc.n	8001c88 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f2      	bne.n	8001c6c <HAL_DMA_IRQHandler+0x2cc>
 8001c86:	e000      	b.n	8001c8a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c88:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d005      	beq.n	8001cae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	4798      	blx	r3
 8001caa:	e000      	b.n	8001cae <HAL_DMA_IRQHandler+0x30e>
        return;
 8001cac:	bf00      	nop
    }
  }
}
 8001cae:	3718      	adds	r7, #24
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}

08001cb4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	3b10      	subs	r3, #16
 8001cc4:	4a14      	ldr	r2, [pc, #80]	; (8001d18 <DMA_CalcBaseAndBitshift+0x64>)
 8001cc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cca:	091b      	lsrs	r3, r3, #4
 8001ccc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001cce:	4a13      	ldr	r2, [pc, #76]	; (8001d1c <DMA_CalcBaseAndBitshift+0x68>)
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	4413      	add	r3, r2
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	2b03      	cmp	r3, #3
 8001ce0:	d909      	bls.n	8001cf6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cea:	f023 0303 	bic.w	r3, r3, #3
 8001cee:	1d1a      	adds	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	659a      	str	r2, [r3, #88]	; 0x58
 8001cf4:	e007      	b.n	8001d06 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001cfe:	f023 0303 	bic.w	r3, r3, #3
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3714      	adds	r7, #20
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	aaaaaaab 	.word	0xaaaaaaab
 8001d1c:	080050fc 	.word	0x080050fc

08001d20 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b085      	sub	sp, #20
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d30:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	699b      	ldr	r3, [r3, #24]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d11f      	bne.n	8001d7a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	2b03      	cmp	r3, #3
 8001d3e:	d856      	bhi.n	8001dee <DMA_CheckFifoParam+0xce>
 8001d40:	a201      	add	r2, pc, #4	; (adr r2, 8001d48 <DMA_CheckFifoParam+0x28>)
 8001d42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d46:	bf00      	nop
 8001d48:	08001d59 	.word	0x08001d59
 8001d4c:	08001d6b 	.word	0x08001d6b
 8001d50:	08001d59 	.word	0x08001d59
 8001d54:	08001def 	.word	0x08001def
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d5c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d046      	beq.n	8001df2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d68:	e043      	b.n	8001df2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d6e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d72:	d140      	bne.n	8001df6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d78:	e03d      	b.n	8001df6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d82:	d121      	bne.n	8001dc8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	2b03      	cmp	r3, #3
 8001d88:	d837      	bhi.n	8001dfa <DMA_CheckFifoParam+0xda>
 8001d8a:	a201      	add	r2, pc, #4	; (adr r2, 8001d90 <DMA_CheckFifoParam+0x70>)
 8001d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d90:	08001da1 	.word	0x08001da1
 8001d94:	08001da7 	.word	0x08001da7
 8001d98:	08001da1 	.word	0x08001da1
 8001d9c:	08001db9 	.word	0x08001db9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	73fb      	strb	r3, [r7, #15]
      break;
 8001da4:	e030      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001daa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d025      	beq.n	8001dfe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001db6:	e022      	b.n	8001dfe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dbc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001dc0:	d11f      	bne.n	8001e02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001dc6:	e01c      	b.n	8001e02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d903      	bls.n	8001dd6 <DMA_CheckFifoParam+0xb6>
 8001dce:	68bb      	ldr	r3, [r7, #8]
 8001dd0:	2b03      	cmp	r3, #3
 8001dd2:	d003      	beq.n	8001ddc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001dd4:	e018      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	73fb      	strb	r3, [r7, #15]
      break;
 8001dda:	e015      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d00e      	beq.n	8001e06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	73fb      	strb	r3, [r7, #15]
      break;
 8001dec:	e00b      	b.n	8001e06 <DMA_CheckFifoParam+0xe6>
      break;
 8001dee:	bf00      	nop
 8001df0:	e00a      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001df2:	bf00      	nop
 8001df4:	e008      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001df6:	bf00      	nop
 8001df8:	e006      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfa:	bf00      	nop
 8001dfc:	e004      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001dfe:	bf00      	nop
 8001e00:	e002      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;   
 8001e02:	bf00      	nop
 8001e04:	e000      	b.n	8001e08 <DMA_CheckFifoParam+0xe8>
      break;
 8001e06:	bf00      	nop
    }
  } 
  
  return status; 
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop

08001e18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b089      	sub	sp, #36	; 0x24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e22:	2300      	movs	r3, #0
 8001e24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e26:	2300      	movs	r3, #0
 8001e28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61fb      	str	r3, [r7, #28]
 8001e32:	e16b      	b.n	800210c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e34:	2201      	movs	r2, #1
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	697a      	ldr	r2, [r7, #20]
 8001e44:	4013      	ands	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	f040 815a 	bne.w	8002106 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	f003 0303 	and.w	r3, r3, #3
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d005      	beq.n	8001e6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d130      	bne.n	8001ecc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	2203      	movs	r2, #3
 8001e76:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	68da      	ldr	r2, [r3, #12]
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	005b      	lsls	r3, r3, #1
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4313      	orrs	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	69ba      	ldr	r2, [r7, #24]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 0201 	and.w	r2, r3, #1
 8001eba:	69fb      	ldr	r3, [r7, #28]
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b03      	cmp	r3, #3
 8001ed6:	d017      	beq.n	8001f08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	2203      	movs	r2, #3
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	43db      	mvns	r3, r3
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	4013      	ands	r3, r2
 8001eee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	689a      	ldr	r2, [r3, #8]
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	005b      	lsls	r3, r3, #1
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	69ba      	ldr	r2, [r7, #24]
 8001efe:	4313      	orrs	r3, r2
 8001f00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	69ba      	ldr	r2, [r7, #24]
 8001f06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d123      	bne.n	8001f5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	08da      	lsrs	r2, r3, #3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3208      	adds	r2, #8
 8001f1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f22:	69fb      	ldr	r3, [r7, #28]
 8001f24:	f003 0307 	and.w	r3, r3, #7
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691a      	ldr	r2, [r3, #16]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	f003 0307 	and.w	r3, r3, #7
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	08da      	lsrs	r2, r3, #3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	3208      	adds	r2, #8
 8001f56:	69b9      	ldr	r1, [r7, #24]
 8001f58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	005b      	lsls	r3, r3, #1
 8001f66:	2203      	movs	r2, #3
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43db      	mvns	r3, r3
 8001f6e:	69ba      	ldr	r2, [r7, #24]
 8001f70:	4013      	ands	r3, r2
 8001f72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f003 0203 	and.w	r2, r3, #3
 8001f7c:	69fb      	ldr	r3, [r7, #28]
 8001f7e:	005b      	lsls	r3, r3, #1
 8001f80:	fa02 f303 	lsl.w	r3, r2, r3
 8001f84:	69ba      	ldr	r2, [r7, #24]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	69ba      	ldr	r2, [r7, #24]
 8001f8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f90:	683b      	ldr	r3, [r7, #0]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	f000 80b4 	beq.w	8002106 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	60fb      	str	r3, [r7, #12]
 8001fa2:	4b60      	ldr	r3, [pc, #384]	; (8002124 <HAL_GPIO_Init+0x30c>)
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fa6:	4a5f      	ldr	r2, [pc, #380]	; (8002124 <HAL_GPIO_Init+0x30c>)
 8001fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fac:	6453      	str	r3, [r2, #68]	; 0x44
 8001fae:	4b5d      	ldr	r3, [pc, #372]	; (8002124 <HAL_GPIO_Init+0x30c>)
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fb6:	60fb      	str	r3, [r7, #12]
 8001fb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001fba:	4a5b      	ldr	r2, [pc, #364]	; (8002128 <HAL_GPIO_Init+0x310>)
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	089b      	lsrs	r3, r3, #2
 8001fc0:	3302      	adds	r3, #2
 8001fc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	f003 0303 	and.w	r3, r3, #3
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	220f      	movs	r2, #15
 8001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd6:	43db      	mvns	r3, r3
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a52      	ldr	r2, [pc, #328]	; (800212c <HAL_GPIO_Init+0x314>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d02b      	beq.n	800203e <HAL_GPIO_Init+0x226>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a51      	ldr	r2, [pc, #324]	; (8002130 <HAL_GPIO_Init+0x318>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d025      	beq.n	800203a <HAL_GPIO_Init+0x222>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a50      	ldr	r2, [pc, #320]	; (8002134 <HAL_GPIO_Init+0x31c>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01f      	beq.n	8002036 <HAL_GPIO_Init+0x21e>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a4f      	ldr	r2, [pc, #316]	; (8002138 <HAL_GPIO_Init+0x320>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d019      	beq.n	8002032 <HAL_GPIO_Init+0x21a>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a4e      	ldr	r2, [pc, #312]	; (800213c <HAL_GPIO_Init+0x324>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <HAL_GPIO_Init+0x216>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a4d      	ldr	r2, [pc, #308]	; (8002140 <HAL_GPIO_Init+0x328>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00d      	beq.n	800202a <HAL_GPIO_Init+0x212>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a4c      	ldr	r2, [pc, #304]	; (8002144 <HAL_GPIO_Init+0x32c>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d007      	beq.n	8002026 <HAL_GPIO_Init+0x20e>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a4b      	ldr	r2, [pc, #300]	; (8002148 <HAL_GPIO_Init+0x330>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d101      	bne.n	8002022 <HAL_GPIO_Init+0x20a>
 800201e:	2307      	movs	r3, #7
 8002020:	e00e      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002022:	2308      	movs	r3, #8
 8002024:	e00c      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002026:	2306      	movs	r3, #6
 8002028:	e00a      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800202a:	2305      	movs	r3, #5
 800202c:	e008      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800202e:	2304      	movs	r3, #4
 8002030:	e006      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002032:	2303      	movs	r3, #3
 8002034:	e004      	b.n	8002040 <HAL_GPIO_Init+0x228>
 8002036:	2302      	movs	r3, #2
 8002038:	e002      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800203a:	2301      	movs	r3, #1
 800203c:	e000      	b.n	8002040 <HAL_GPIO_Init+0x228>
 800203e:	2300      	movs	r3, #0
 8002040:	69fa      	ldr	r2, [r7, #28]
 8002042:	f002 0203 	and.w	r2, r2, #3
 8002046:	0092      	lsls	r2, r2, #2
 8002048:	4093      	lsls	r3, r2
 800204a:	69ba      	ldr	r2, [r7, #24]
 800204c:	4313      	orrs	r3, r2
 800204e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002050:	4935      	ldr	r1, [pc, #212]	; (8002128 <HAL_GPIO_Init+0x310>)
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	089b      	lsrs	r3, r3, #2
 8002056:	3302      	adds	r3, #2
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800205e:	4b3b      	ldr	r3, [pc, #236]	; (800214c <HAL_GPIO_Init+0x334>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	43db      	mvns	r3, r3
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	4013      	ands	r3, r2
 800206c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002076:	2b00      	cmp	r3, #0
 8002078:	d003      	beq.n	8002082 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002082:	4a32      	ldr	r2, [pc, #200]	; (800214c <HAL_GPIO_Init+0x334>)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002088:	4b30      	ldr	r3, [pc, #192]	; (800214c <HAL_GPIO_Init+0x334>)
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	43db      	mvns	r3, r3
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	4013      	ands	r3, r2
 8002096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d003      	beq.n	80020ac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80020a4:	69ba      	ldr	r2, [r7, #24]
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80020ac:	4a27      	ldr	r2, [pc, #156]	; (800214c <HAL_GPIO_Init+0x334>)
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80020b2:	4b26      	ldr	r3, [pc, #152]	; (800214c <HAL_GPIO_Init+0x334>)
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	43db      	mvns	r3, r3
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	4013      	ands	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d003      	beq.n	80020d6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80020ce:	69ba      	ldr	r2, [r7, #24]
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020d6:	4a1d      	ldr	r2, [pc, #116]	; (800214c <HAL_GPIO_Init+0x334>)
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020dc:	4b1b      	ldr	r3, [pc, #108]	; (800214c <HAL_GPIO_Init+0x334>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	69ba      	ldr	r2, [r7, #24]
 80020e8:	4013      	ands	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d003      	beq.n	8002100 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020f8:	69ba      	ldr	r2, [r7, #24]
 80020fa:	693b      	ldr	r3, [r7, #16]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002100:	4a12      	ldr	r2, [pc, #72]	; (800214c <HAL_GPIO_Init+0x334>)
 8002102:	69bb      	ldr	r3, [r7, #24]
 8002104:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3301      	adds	r3, #1
 800210a:	61fb      	str	r3, [r7, #28]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	2b0f      	cmp	r3, #15
 8002110:	f67f ae90 	bls.w	8001e34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002114:	bf00      	nop
 8002116:	bf00      	nop
 8002118:	3724      	adds	r7, #36	; 0x24
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	40023800 	.word	0x40023800
 8002128:	40013800 	.word	0x40013800
 800212c:	40020000 	.word	0x40020000
 8002130:	40020400 	.word	0x40020400
 8002134:	40020800 	.word	0x40020800
 8002138:	40020c00 	.word	0x40020c00
 800213c:	40021000 	.word	0x40021000
 8002140:	40021400 	.word	0x40021400
 8002144:	40021800 	.word	0x40021800
 8002148:	40021c00 	.word	0x40021c00
 800214c:	40013c00 	.word	0x40013c00

08002150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	460b      	mov	r3, r1
 800215a:	807b      	strh	r3, [r7, #2]
 800215c:	4613      	mov	r3, r2
 800215e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002160:	787b      	ldrb	r3, [r7, #1]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d003      	beq.n	800216e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002166:	887a      	ldrh	r2, [r7, #2]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800216c:	e003      	b.n	8002176 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800216e:	887b      	ldrh	r3, [r7, #2]
 8002170:	041a      	lsls	r2, r3, #16
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	619a      	str	r2, [r3, #24]
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr

08002182 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002194:	887a      	ldrh	r2, [r7, #2]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43d9      	mvns	r1, r3
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	400b      	ands	r3, r1
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
	...

080021b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e12b      	b.n	8002422 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d106      	bne.n	80021e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2200      	movs	r2, #0
 80021da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fd12 	bl	8000c08 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2224      	movs	r2, #36	; 0x24
 80021e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0201 	bic.w	r2, r2, #1
 80021fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800220a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	681a      	ldr	r2, [r3, #0]
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800221a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800221c:	f002 f85c 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8002220:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4a81      	ldr	r2, [pc, #516]	; (800242c <HAL_I2C_Init+0x274>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d807      	bhi.n	800223c <HAL_I2C_Init+0x84>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4a80      	ldr	r2, [pc, #512]	; (8002430 <HAL_I2C_Init+0x278>)
 8002230:	4293      	cmp	r3, r2
 8002232:	bf94      	ite	ls
 8002234:	2301      	movls	r3, #1
 8002236:	2300      	movhi	r3, #0
 8002238:	b2db      	uxtb	r3, r3
 800223a:	e006      	b.n	800224a <HAL_I2C_Init+0x92>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	4a7d      	ldr	r2, [pc, #500]	; (8002434 <HAL_I2C_Init+0x27c>)
 8002240:	4293      	cmp	r3, r2
 8002242:	bf94      	ite	ls
 8002244:	2301      	movls	r3, #1
 8002246:	2300      	movhi	r3, #0
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b00      	cmp	r3, #0
 800224c:	d001      	beq.n	8002252 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	e0e7      	b.n	8002422 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4a78      	ldr	r2, [pc, #480]	; (8002438 <HAL_I2C_Init+0x280>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	0c9b      	lsrs	r3, r3, #18
 800225c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	430a      	orrs	r2, r1
 8002270:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a6a      	ldr	r2, [pc, #424]	; (800242c <HAL_I2C_Init+0x274>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d802      	bhi.n	800228c <HAL_I2C_Init+0xd4>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	3301      	adds	r3, #1
 800228a:	e009      	b.n	80022a0 <HAL_I2C_Init+0xe8>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002292:	fb02 f303 	mul.w	r3, r2, r3
 8002296:	4a69      	ldr	r2, [pc, #420]	; (800243c <HAL_I2C_Init+0x284>)
 8002298:	fba2 2303 	umull	r2, r3, r2, r3
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	3301      	adds	r3, #1
 80022a0:	687a      	ldr	r2, [r7, #4]
 80022a2:	6812      	ldr	r2, [r2, #0]
 80022a4:	430b      	orrs	r3, r1
 80022a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	69db      	ldr	r3, [r3, #28]
 80022ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80022b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	495c      	ldr	r1, [pc, #368]	; (800242c <HAL_I2C_Init+0x274>)
 80022bc:	428b      	cmp	r3, r1
 80022be:	d819      	bhi.n	80022f4 <HAL_I2C_Init+0x13c>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	1e59      	subs	r1, r3, #1
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	005b      	lsls	r3, r3, #1
 80022ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80022ce:	1c59      	adds	r1, r3, #1
 80022d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80022d4:	400b      	ands	r3, r1
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_I2C_Init+0x138>
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	1e59      	subs	r1, r3, #1
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80022e8:	3301      	adds	r3, #1
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	e051      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f0:	2304      	movs	r3, #4
 80022f2:	e04f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689b      	ldr	r3, [r3, #8]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d111      	bne.n	8002320 <HAL_I2C_Init+0x168>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	1e58      	subs	r0, r3, #1
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6859      	ldr	r1, [r3, #4]
 8002304:	460b      	mov	r3, r1
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	440b      	add	r3, r1
 800230a:	fbb0 f3f3 	udiv	r3, r0, r3
 800230e:	3301      	adds	r3, #1
 8002310:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002314:	2b00      	cmp	r3, #0
 8002316:	bf0c      	ite	eq
 8002318:	2301      	moveq	r3, #1
 800231a:	2300      	movne	r3, #0
 800231c:	b2db      	uxtb	r3, r3
 800231e:	e012      	b.n	8002346 <HAL_I2C_Init+0x18e>
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1e58      	subs	r0, r3, #1
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6859      	ldr	r1, [r3, #4]
 8002328:	460b      	mov	r3, r1
 800232a:	009b      	lsls	r3, r3, #2
 800232c:	440b      	add	r3, r1
 800232e:	0099      	lsls	r1, r3, #2
 8002330:	440b      	add	r3, r1
 8002332:	fbb0 f3f3 	udiv	r3, r0, r3
 8002336:	3301      	adds	r3, #1
 8002338:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800233c:	2b00      	cmp	r3, #0
 800233e:	bf0c      	ite	eq
 8002340:	2301      	moveq	r3, #1
 8002342:	2300      	movne	r3, #0
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <HAL_I2C_Init+0x196>
 800234a:	2301      	movs	r3, #1
 800234c:	e022      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d10e      	bne.n	8002374 <HAL_I2C_Init+0x1bc>
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	1e58      	subs	r0, r3, #1
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6859      	ldr	r1, [r3, #4]
 800235e:	460b      	mov	r3, r1
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	440b      	add	r3, r1
 8002364:	fbb0 f3f3 	udiv	r3, r0, r3
 8002368:	3301      	adds	r3, #1
 800236a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800236e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002372:	e00f      	b.n	8002394 <HAL_I2C_Init+0x1dc>
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	1e58      	subs	r0, r3, #1
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6859      	ldr	r1, [r3, #4]
 800237c:	460b      	mov	r3, r1
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	0099      	lsls	r1, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	fbb0 f3f3 	udiv	r3, r0, r3
 800238a:	3301      	adds	r3, #1
 800238c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002390:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	6809      	ldr	r1, [r1, #0]
 8002398:	4313      	orrs	r3, r2
 800239a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	69da      	ldr	r2, [r3, #28]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a1b      	ldr	r3, [r3, #32]
 80023ae:	431a      	orrs	r2, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	430a      	orrs	r2, r1
 80023b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80023c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80023c6:	687a      	ldr	r2, [r7, #4]
 80023c8:	6911      	ldr	r1, [r2, #16]
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	68d2      	ldr	r2, [r2, #12]
 80023ce:	4311      	orrs	r1, r2
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6812      	ldr	r2, [r2, #0]
 80023d4:	430b      	orrs	r3, r1
 80023d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	68db      	ldr	r3, [r3, #12]
 80023de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	695a      	ldr	r2, [r3, #20]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	699b      	ldr	r3, [r3, #24]
 80023ea:	431a      	orrs	r2, r3
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	430a      	orrs	r2, r1
 80023f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f042 0201 	orr.w	r2, r2, #1
 8002402:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	2200      	movs	r2, #0
 8002416:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	000186a0 	.word	0x000186a0
 8002430:	001e847f 	.word	0x001e847f
 8002434:	003d08ff 	.word	0x003d08ff
 8002438:	431bde83 	.word	0x431bde83
 800243c:	10624dd3 	.word	0x10624dd3

08002440 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b088      	sub	sp, #32
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800245a:	f7fe fe73 	bl	8001144 <HAL_GetTick>
 800245e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002466:	b2db      	uxtb	r3, r3
 8002468:	2b20      	cmp	r3, #32
 800246a:	f040 80d9 	bne.w	8002620 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	9300      	str	r3, [sp, #0]
 8002472:	2319      	movs	r3, #25
 8002474:	2201      	movs	r2, #1
 8002476:	496d      	ldr	r1, [pc, #436]	; (800262c <HAL_I2C_Mem_Write+0x1ec>)
 8002478:	68f8      	ldr	r0, [r7, #12]
 800247a:	f000 fc7f 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d001      	beq.n	8002488 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002484:	2302      	movs	r3, #2
 8002486:	e0cc      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800248e:	2b01      	cmp	r3, #1
 8002490:	d101      	bne.n	8002496 <HAL_I2C_Mem_Write+0x56>
 8002492:	2302      	movs	r3, #2
 8002494:	e0c5      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d007      	beq.n	80024bc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0201 	orr.w	r2, r2, #1
 80024ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2221      	movs	r2, #33	; 0x21
 80024d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	2240      	movs	r2, #64	; 0x40
 80024d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	6a3a      	ldr	r2, [r7, #32]
 80024e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80024ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024f2:	b29a      	uxth	r2, r3
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4a4d      	ldr	r2, [pc, #308]	; (8002630 <HAL_I2C_Mem_Write+0x1f0>)
 80024fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80024fe:	88f8      	ldrh	r0, [r7, #6]
 8002500:	893a      	ldrh	r2, [r7, #8]
 8002502:	8979      	ldrh	r1, [r7, #10]
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	9301      	str	r3, [sp, #4]
 8002508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250a:	9300      	str	r3, [sp, #0]
 800250c:	4603      	mov	r3, r0
 800250e:	68f8      	ldr	r0, [r7, #12]
 8002510:	f000 fab6 	bl	8002a80 <I2C_RequestMemoryWrite>
 8002514:	4603      	mov	r3, r0
 8002516:	2b00      	cmp	r3, #0
 8002518:	d052      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800251a:	2301      	movs	r3, #1
 800251c:	e081      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f000 fd00 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002528:	4603      	mov	r3, r0
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00d      	beq.n	800254a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002532:	2b04      	cmp	r3, #4
 8002534:	d107      	bne.n	8002546 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	681a      	ldr	r2, [r3, #0]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002544:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e06b      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800254e:	781a      	ldrb	r2, [r3, #0]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800255a:	1c5a      	adds	r2, r3, #1
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002564:	3b01      	subs	r3, #1
 8002566:	b29a      	uxth	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002570:	b29b      	uxth	r3, r3
 8002572:	3b01      	subs	r3, #1
 8002574:	b29a      	uxth	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f003 0304 	and.w	r3, r3, #4
 8002584:	2b04      	cmp	r3, #4
 8002586:	d11b      	bne.n	80025c0 <HAL_I2C_Mem_Write+0x180>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	2b00      	cmp	r3, #0
 800258e:	d017      	beq.n	80025c0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002594:	781a      	ldrb	r2, [r3, #0]
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a0:	1c5a      	adds	r2, r3, #1
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025aa:	3b01      	subs	r3, #1
 80025ac:	b29a      	uxth	r2, r3
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	3b01      	subs	r3, #1
 80025ba:	b29a      	uxth	r2, r3
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1aa      	bne.n	800251e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025c8:	697a      	ldr	r2, [r7, #20]
 80025ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80025cc:	68f8      	ldr	r0, [r7, #12]
 80025ce:	f000 fcec 	bl	8002faa <I2C_WaitOnBTFFlagUntilTimeout>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00d      	beq.n	80025f4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	2b04      	cmp	r3, #4
 80025de:	d107      	bne.n	80025f0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025ee:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e016      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002602:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2220      	movs	r2, #32
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	2200      	movs	r2, #0
 8002610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	2200      	movs	r2, #0
 8002618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800261c:	2300      	movs	r3, #0
 800261e:	e000      	b.n	8002622 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002620:	2302      	movs	r3, #2
  }
}
 8002622:	4618      	mov	r0, r3
 8002624:	3718      	adds	r7, #24
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	00100002 	.word	0x00100002
 8002630:	ffff0000 	.word	0xffff0000

08002634 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b08c      	sub	sp, #48	; 0x30
 8002638:	af02      	add	r7, sp, #8
 800263a:	60f8      	str	r0, [r7, #12]
 800263c:	4608      	mov	r0, r1
 800263e:	4611      	mov	r1, r2
 8002640:	461a      	mov	r2, r3
 8002642:	4603      	mov	r3, r0
 8002644:	817b      	strh	r3, [r7, #10]
 8002646:	460b      	mov	r3, r1
 8002648:	813b      	strh	r3, [r7, #8]
 800264a:	4613      	mov	r3, r2
 800264c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800264e:	f7fe fd79 	bl	8001144 <HAL_GetTick>
 8002652:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b20      	cmp	r3, #32
 800265e:	f040 8208 	bne.w	8002a72 <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	9300      	str	r3, [sp, #0]
 8002666:	2319      	movs	r3, #25
 8002668:	2201      	movs	r2, #1
 800266a:	497b      	ldr	r1, [pc, #492]	; (8002858 <HAL_I2C_Mem_Read+0x224>)
 800266c:	68f8      	ldr	r0, [r7, #12]
 800266e:	f000 fb85 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002672:	4603      	mov	r3, r0
 8002674:	2b00      	cmp	r3, #0
 8002676:	d001      	beq.n	800267c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
 800267a:	e1fb      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002682:	2b01      	cmp	r3, #1
 8002684:	d101      	bne.n	800268a <HAL_I2C_Mem_Read+0x56>
 8002686:	2302      	movs	r3, #2
 8002688:	e1f4      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f003 0301 	and.w	r3, r3, #1
 800269c:	2b01      	cmp	r3, #1
 800269e:	d007      	beq.n	80026b0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f042 0201 	orr.w	r2, r2, #1
 80026ae:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026be:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2222      	movs	r2, #34	; 0x22
 80026c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2240      	movs	r2, #64	; 0x40
 80026cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80026e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026e6:	b29a      	uxth	r2, r3
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4a5b      	ldr	r2, [pc, #364]	; (800285c <HAL_I2C_Mem_Read+0x228>)
 80026f0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026f2:	88f8      	ldrh	r0, [r7, #6]
 80026f4:	893a      	ldrh	r2, [r7, #8]
 80026f6:	8979      	ldrh	r1, [r7, #10]
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	9301      	str	r3, [sp, #4]
 80026fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026fe:	9300      	str	r3, [sp, #0]
 8002700:	4603      	mov	r3, r0
 8002702:	68f8      	ldr	r0, [r7, #12]
 8002704:	f000 fa52 	bl	8002bac <I2C_RequestMemoryRead>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	d001      	beq.n	8002712 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	e1b0      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	d113      	bne.n	8002742 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800271a:	2300      	movs	r3, #0
 800271c:	623b      	str	r3, [r7, #32]
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	623b      	str	r3, [r7, #32]
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	699b      	ldr	r3, [r3, #24]
 800272c:	623b      	str	r3, [r7, #32]
 800272e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800273e:	601a      	str	r2, [r3, #0]
 8002740:	e184      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002746:	2b01      	cmp	r3, #1
 8002748:	d11b      	bne.n	8002782 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002758:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800275a:	2300      	movs	r3, #0
 800275c:	61fb      	str	r3, [r7, #28]
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	695b      	ldr	r3, [r3, #20]
 8002764:	61fb      	str	r3, [r7, #28]
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	699b      	ldr	r3, [r3, #24]
 800276c:	61fb      	str	r3, [r7, #28]
 800276e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	e164      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002786:	2b02      	cmp	r3, #2
 8002788:	d11b      	bne.n	80027c2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002798:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027aa:	2300      	movs	r3, #0
 80027ac:	61bb      	str	r3, [r7, #24]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	695b      	ldr	r3, [r3, #20]
 80027b4:	61bb      	str	r3, [r7, #24]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	61bb      	str	r3, [r7, #24]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	e144      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c2:	2300      	movs	r3, #0
 80027c4:	617b      	str	r3, [r7, #20]
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695b      	ldr	r3, [r3, #20]
 80027cc:	617b      	str	r3, [r7, #20]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	699b      	ldr	r3, [r3, #24]
 80027d4:	617b      	str	r3, [r7, #20]
 80027d6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80027d8:	e138      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027de:	2b03      	cmp	r3, #3
 80027e0:	f200 80f1 	bhi.w	80029c6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e8:	2b01      	cmp	r3, #1
 80027ea:	d123      	bne.n	8002834 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80027ee:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80027f0:	68f8      	ldr	r0, [r7, #12]
 80027f2:	f000 fc1b 	bl	800302c <I2C_WaitOnRXNEFlagUntilTimeout>
 80027f6:	4603      	mov	r3, r0
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d001      	beq.n	8002800 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e139      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	691a      	ldr	r2, [r3, #16]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280a:	b2d2      	uxtb	r2, r2
 800280c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002812:	1c5a      	adds	r2, r3, #1
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281c:	3b01      	subs	r3, #1
 800281e:	b29a      	uxth	r2, r3
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002828:	b29b      	uxth	r3, r3
 800282a:	3b01      	subs	r3, #1
 800282c:	b29a      	uxth	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002832:	e10b      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002838:	2b02      	cmp	r3, #2
 800283a:	d14e      	bne.n	80028da <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800283c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283e:	9300      	str	r3, [sp, #0]
 8002840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002842:	2200      	movs	r2, #0
 8002844:	4906      	ldr	r1, [pc, #24]	; (8002860 <HAL_I2C_Mem_Read+0x22c>)
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fa98 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d008      	beq.n	8002864 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e10e      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
 8002856:	bf00      	nop
 8002858:	00100002 	.word	0x00100002
 800285c:	ffff0000 	.word	0xffff0000
 8002860:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002872:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691a      	ldr	r2, [r3, #16]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287e:	b2d2      	uxtb	r2, r2
 8002880:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002886:	1c5a      	adds	r2, r3, #1
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002890:	3b01      	subs	r3, #1
 8002892:	b29a      	uxth	r2, r3
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800289c:	b29b      	uxth	r3, r3
 800289e:	3b01      	subs	r3, #1
 80028a0:	b29a      	uxth	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028ce:	b29b      	uxth	r3, r3
 80028d0:	3b01      	subs	r3, #1
 80028d2:	b29a      	uxth	r2, r3
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80028d8:	e0b8      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80028da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028dc:	9300      	str	r3, [sp, #0]
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	2200      	movs	r2, #0
 80028e2:	4966      	ldr	r1, [pc, #408]	; (8002a7c <HAL_I2C_Mem_Read+0x448>)
 80028e4:	68f8      	ldr	r0, [r7, #12]
 80028e6:	f000 fa49 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d001      	beq.n	80028f4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80028f0:	2301      	movs	r3, #1
 80028f2:	e0bf      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	681a      	ldr	r2, [r3, #0]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002902:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691a      	ldr	r2, [r3, #16]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	1c5a      	adds	r2, r3, #1
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002920:	3b01      	subs	r3, #1
 8002922:	b29a      	uxth	r2, r3
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293c:	2200      	movs	r2, #0
 800293e:	494f      	ldr	r1, [pc, #316]	; (8002a7c <HAL_I2C_Mem_Read+0x448>)
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 fa1b 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d001      	beq.n	8002950 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 800294c:	2301      	movs	r3, #1
 800294e:	e091      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800295e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	691a      	ldr	r2, [r3, #16]
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002972:	1c5a      	adds	r2, r3, #1
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800297c:	3b01      	subs	r3, #1
 800297e:	b29a      	uxth	r2, r3
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002988:	b29b      	uxth	r3, r3
 800298a:	3b01      	subs	r3, #1
 800298c:	b29a      	uxth	r2, r3
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	691a      	ldr	r2, [r3, #16]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299c:	b2d2      	uxtb	r2, r2
 800299e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a4:	1c5a      	adds	r2, r3, #1
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ba:	b29b      	uxth	r3, r3
 80029bc:	3b01      	subs	r3, #1
 80029be:	b29a      	uxth	r2, r3
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80029c4:	e042      	b.n	8002a4c <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80029ca:	68f8      	ldr	r0, [r7, #12]
 80029cc:	f000 fb2e 	bl	800302c <I2C_WaitOnRXNEFlagUntilTimeout>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e04c      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029e4:	b2d2      	uxtb	r2, r2
 80029e6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ec:	1c5a      	adds	r2, r3, #1
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	3b01      	subs	r3, #1
 8002a06:	b29a      	uxth	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	695b      	ldr	r3, [r3, #20]
 8002a12:	f003 0304 	and.w	r3, r3, #4
 8002a16:	2b04      	cmp	r3, #4
 8002a18:	d118      	bne.n	8002a4c <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	691a      	ldr	r2, [r3, #16]
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a24:	b2d2      	uxtb	r2, r2
 8002a26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2c:	1c5a      	adds	r2, r3, #1
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b29a      	uxth	r2, r3
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	f47f aec2 	bne.w	80027da <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2220      	movs	r2, #32
 8002a5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2200      	movs	r2, #0
 8002a62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	e000      	b.n	8002a74 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002a72:	2302      	movs	r3, #2
  }
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	3728      	adds	r7, #40	; 0x28
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	bd80      	pop	{r7, pc}
 8002a7c:	00010004 	.word	0x00010004

08002a80 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b088      	sub	sp, #32
 8002a84:	af02      	add	r7, sp, #8
 8002a86:	60f8      	str	r0, [r7, #12]
 8002a88:	4608      	mov	r0, r1
 8002a8a:	4611      	mov	r1, r2
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	4603      	mov	r3, r0
 8002a90:	817b      	strh	r3, [r7, #10]
 8002a92:	460b      	mov	r3, r1
 8002a94:	813b      	strh	r3, [r7, #8]
 8002a96:	4613      	mov	r3, r2
 8002a98:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002aa8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aac:	9300      	str	r3, [sp, #0]
 8002aae:	6a3b      	ldr	r3, [r7, #32]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	f000 f960 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002abc:	4603      	mov	r3, r0
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d00d      	beq.n	8002ade <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ad0:	d103      	bne.n	8002ada <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ada:	2303      	movs	r3, #3
 8002adc:	e05f      	b.n	8002b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ade:	897b      	ldrh	r3, [r7, #10]
 8002ae0:	b2db      	uxtb	r3, r3
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002aec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002af0:	6a3a      	ldr	r2, [r7, #32]
 8002af2:	492d      	ldr	r1, [pc, #180]	; (8002ba8 <I2C_RequestMemoryWrite+0x128>)
 8002af4:	68f8      	ldr	r0, [r7, #12]
 8002af6:	f000 f998 	bl	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e04c      	b.n	8002b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	695b      	ldr	r3, [r3, #20]
 8002b0e:	617b      	str	r3, [r7, #20]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	617b      	str	r3, [r7, #20]
 8002b18:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	6a39      	ldr	r1, [r7, #32]
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 fa02 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d00d      	beq.n	8002b46 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	2b04      	cmp	r3, #4
 8002b30:	d107      	bne.n	8002b42 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b40:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e02b      	b.n	8002b9e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b4c:	893b      	ldrh	r3, [r7, #8]
 8002b4e:	b2da      	uxtb	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	611a      	str	r2, [r3, #16]
 8002b56:	e021      	b.n	8002b9c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002b58:	893b      	ldrh	r3, [r7, #8]
 8002b5a:	0a1b      	lsrs	r3, r3, #8
 8002b5c:	b29b      	uxth	r3, r3
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b68:	6a39      	ldr	r1, [r7, #32]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	f000 f9dc 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d00d      	beq.n	8002b92 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7a:	2b04      	cmp	r3, #4
 8002b7c:	d107      	bne.n	8002b8e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002b8c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e005      	b.n	8002b9e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002b92:	893b      	ldrh	r3, [r7, #8]
 8002b94:	b2da      	uxtb	r2, r3
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3718      	adds	r7, #24
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	00010002 	.word	0x00010002

08002bac <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	4608      	mov	r0, r1
 8002bb6:	4611      	mov	r1, r2
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	817b      	strh	r3, [r7, #10]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	813b      	strh	r3, [r7, #8]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002bd4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002be4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	9300      	str	r3, [sp, #0]
 8002bea:	6a3b      	ldr	r3, [r7, #32]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002bf2:	68f8      	ldr	r0, [r7, #12]
 8002bf4:	f000 f8c2 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002bf8:	4603      	mov	r3, r0
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00d      	beq.n	8002c1a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c08:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c0c:	d103      	bne.n	8002c16 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002c14:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e0aa      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	461a      	mov	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002c28:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2c:	6a3a      	ldr	r2, [r7, #32]
 8002c2e:	4952      	ldr	r1, [pc, #328]	; (8002d78 <I2C_RequestMemoryRead+0x1cc>)
 8002c30:	68f8      	ldr	r0, [r7, #12]
 8002c32:	f000 f8fa 	bl	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d001      	beq.n	8002c40 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e097      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	695b      	ldr	r3, [r3, #20]
 8002c4a:	617b      	str	r3, [r7, #20]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	617b      	str	r3, [r7, #20]
 8002c54:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c58:	6a39      	ldr	r1, [r7, #32]
 8002c5a:	68f8      	ldr	r0, [r7, #12]
 8002c5c:	f000 f964 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00d      	beq.n	8002c82 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d107      	bne.n	8002c7e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c7c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e076      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002c82:	88fb      	ldrh	r3, [r7, #6]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002c88:	893b      	ldrh	r3, [r7, #8]
 8002c8a:	b2da      	uxtb	r2, r3
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	611a      	str	r2, [r3, #16]
 8002c92:	e021      	b.n	8002cd8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002c94:	893b      	ldrh	r3, [r7, #8]
 8002c96:	0a1b      	lsrs	r3, r3, #8
 8002c98:	b29b      	uxth	r3, r3
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca4:	6a39      	ldr	r1, [r7, #32]
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f000 f93e 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002cac:	4603      	mov	r3, r0
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d00d      	beq.n	8002cce <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb6:	2b04      	cmp	r3, #4
 8002cb8:	d107      	bne.n	8002cca <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cc8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e050      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002cce:	893b      	ldrh	r3, [r7, #8]
 8002cd0:	b2da      	uxtb	r2, r3
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	6a39      	ldr	r1, [r7, #32]
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f000 f923 	bl	8002f28 <I2C_WaitOnTXEFlagUntilTimeout>
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d00d      	beq.n	8002d04 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d107      	bne.n	8002d00 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002cfe:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e035      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d12:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d16:	9300      	str	r3, [sp, #0]
 8002d18:	6a3b      	ldr	r3, [r7, #32]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 f82b 	bl	8002d7c <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d00d      	beq.n	8002d48 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d3a:	d103      	bne.n	8002d44 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d42:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002d44:	2303      	movs	r3, #3
 8002d46:	e013      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002d48:	897b      	ldrh	r3, [r7, #10]
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	f043 0301 	orr.w	r3, r3, #1
 8002d50:	b2da      	uxtb	r2, r3
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	6a3a      	ldr	r2, [r7, #32]
 8002d5c:	4906      	ldr	r1, [pc, #24]	; (8002d78 <I2C_RequestMemoryRead+0x1cc>)
 8002d5e:	68f8      	ldr	r0, [r7, #12]
 8002d60:	f000 f863 	bl	8002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d64:	4603      	mov	r3, r0
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d001      	beq.n	8002d6e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3718      	adds	r7, #24
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	00010002 	.word	0x00010002

08002d7c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	60b9      	str	r1, [r7, #8]
 8002d86:	603b      	str	r3, [r7, #0]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d8c:	e025      	b.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d94:	d021      	beq.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d96:	f7fe f9d5 	bl	8001144 <HAL_GetTick>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	69bb      	ldr	r3, [r7, #24]
 8002d9e:	1ad3      	subs	r3, r2, r3
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d302      	bcc.n	8002dac <I2C_WaitOnFlagUntilTimeout+0x30>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d116      	bne.n	8002dda <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2220      	movs	r2, #32
 8002db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc6:	f043 0220 	orr.w	r2, r3, #32
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e023      	b.n	8002e22 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	0c1b      	lsrs	r3, r3, #16
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10d      	bne.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	695b      	ldr	r3, [r3, #20]
 8002dea:	43da      	mvns	r2, r3
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4013      	ands	r3, r2
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	bf0c      	ite	eq
 8002df6:	2301      	moveq	r3, #1
 8002df8:	2300      	movne	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	e00c      	b.n	8002e1a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699b      	ldr	r3, [r3, #24]
 8002e06:	43da      	mvns	r2, r3
 8002e08:	68bb      	ldr	r3, [r7, #8]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	b29b      	uxth	r3, r3
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	bf0c      	ite	eq
 8002e12:	2301      	moveq	r3, #1
 8002e14:	2300      	movne	r3, #0
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	461a      	mov	r2, r3
 8002e1a:	79fb      	ldrb	r3, [r7, #7]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d0b6      	beq.n	8002d8e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002e20:	2300      	movs	r3, #0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3710      	adds	r7, #16
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b084      	sub	sp, #16
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	60f8      	str	r0, [r7, #12]
 8002e32:	60b9      	str	r1, [r7, #8]
 8002e34:	607a      	str	r2, [r7, #4]
 8002e36:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e38:	e051      	b.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	695b      	ldr	r3, [r3, #20]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002e48:	d123      	bne.n	8002e92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e58:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002e62:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2220      	movs	r2, #32
 8002e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	2200      	movs	r2, #0
 8002e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e7e:	f043 0204 	orr.w	r2, r3, #4
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e046      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e98:	d021      	beq.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e9a:	f7fe f953 	bl	8001144 <HAL_GetTick>
 8002e9e:	4602      	mov	r2, r0
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	1ad3      	subs	r3, r2, r3
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	429a      	cmp	r2, r3
 8002ea8:	d302      	bcc.n	8002eb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d116      	bne.n	8002ede <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2220      	movs	r2, #32
 8002eba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	f043 0220 	orr.w	r2, r3, #32
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	e020      	b.n	8002f20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ede:	68bb      	ldr	r3, [r7, #8]
 8002ee0:	0c1b      	lsrs	r3, r3, #16
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b01      	cmp	r3, #1
 8002ee6:	d10c      	bne.n	8002f02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	695b      	ldr	r3, [r3, #20]
 8002eee:	43da      	mvns	r2, r3
 8002ef0:	68bb      	ldr	r3, [r7, #8]
 8002ef2:	4013      	ands	r3, r2
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	bf14      	ite	ne
 8002efa:	2301      	movne	r3, #1
 8002efc:	2300      	moveq	r3, #0
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	e00b      	b.n	8002f1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	43da      	mvns	r2, r3
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d18d      	bne.n	8002e3a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f34:	e02d      	b.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f000 f8ce 	bl	80030d8 <I2C_IsAcknowledgeFailed>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d001      	beq.n	8002f46 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002f42:	2301      	movs	r3, #1
 8002f44:	e02d      	b.n	8002fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d021      	beq.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f4e:	f7fe f8f9 	bl	8001144 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	68ba      	ldr	r2, [r7, #8]
 8002f5a:	429a      	cmp	r2, r3
 8002f5c:	d302      	bcc.n	8002f64 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d116      	bne.n	8002f92 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	2200      	movs	r2, #0
 8002f76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f043 0220 	orr.w	r2, r3, #32
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e007      	b.n	8002fa2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f9c:	2b80      	cmp	r3, #128	; 0x80
 8002f9e:	d1ca      	bne.n	8002f36 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3710      	adds	r7, #16
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b084      	sub	sp, #16
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	60b9      	str	r1, [r7, #8]
 8002fb4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002fb6:	e02d      	b.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002fb8:	68f8      	ldr	r0, [r7, #12]
 8002fba:	f000 f88d 	bl	80030d8 <I2C_IsAcknowledgeFailed>
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e02d      	b.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fce:	d021      	beq.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fd0:	f7fe f8b8 	bl	8001144 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	d302      	bcc.n	8002fe6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d116      	bne.n	8003014 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	f043 0220 	orr.w	r2, r3, #32
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e007      	b.n	8003024 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	695b      	ldr	r3, [r3, #20]
 800301a:	f003 0304 	and.w	r3, r3, #4
 800301e:	2b04      	cmp	r3, #4
 8003020:	d1ca      	bne.n	8002fb8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3710      	adds	r7, #16
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}

0800302c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	b084      	sub	sp, #16
 8003030:	af00      	add	r7, sp, #0
 8003032:	60f8      	str	r0, [r7, #12]
 8003034:	60b9      	str	r1, [r7, #8]
 8003036:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003038:	e042      	b.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	695b      	ldr	r3, [r3, #20]
 8003040:	f003 0310 	and.w	r3, r3, #16
 8003044:	2b10      	cmp	r3, #16
 8003046:	d119      	bne.n	800307c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f06f 0210 	mvn.w	r2, #16
 8003050:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2220      	movs	r2, #32
 800305c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e029      	b.n	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800307c:	f7fe f862 	bl	8001144 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	68ba      	ldr	r2, [r7, #8]
 8003088:	429a      	cmp	r2, r3
 800308a:	d302      	bcc.n	8003092 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d116      	bne.n	80030c0 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ac:	f043 0220 	orr.w	r2, r3, #32
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80030bc:	2301      	movs	r3, #1
 80030be:	e007      	b.n	80030d0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695b      	ldr	r3, [r3, #20]
 80030c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ca:	2b40      	cmp	r3, #64	; 0x40
 80030cc:	d1b5      	bne.n	800303a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80030ce:	2300      	movs	r3, #0
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}

080030d8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	695b      	ldr	r3, [r3, #20]
 80030e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030ee:	d11b      	bne.n	8003128 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80030f8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2220      	movs	r2, #32
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2200      	movs	r2, #0
 8003120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	370c      	adds	r7, #12
 800312e:	46bd      	mov	sp, r7
 8003130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003134:	4770      	bx	lr
	...

08003138 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b088      	sub	sp, #32
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2b00      	cmp	r3, #0
 8003144:	d101      	bne.n	800314a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	e128      	b.n	800339c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b00      	cmp	r3, #0
 8003154:	d109      	bne.n	800316a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2200      	movs	r2, #0
 800315a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	4a90      	ldr	r2, [pc, #576]	; (80033a4 <HAL_I2S_Init+0x26c>)
 8003162:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f7fd fd97 	bl	8000c98 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	69db      	ldr	r3, [r3, #28]
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6812      	ldr	r2, [r2, #0]
 800317c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003180:	f023 030f 	bic.w	r3, r3, #15
 8003184:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2202      	movs	r2, #2
 800318c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	695b      	ldr	r3, [r3, #20]
 8003192:	2b02      	cmp	r3, #2
 8003194:	d060      	beq.n	8003258 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d102      	bne.n	80031a4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800319e:	2310      	movs	r3, #16
 80031a0:	617b      	str	r3, [r7, #20]
 80031a2:	e001      	b.n	80031a8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80031a4:	2320      	movs	r3, #32
 80031a6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	2b20      	cmp	r3, #32
 80031ae:	d802      	bhi.n	80031b6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80031b6:	2001      	movs	r0, #1
 80031b8:	f001 f998 	bl	80044ec <HAL_RCCEx_GetPeriphCLKFreq>
 80031bc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c6:	d125      	bne.n	8003214 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d010      	beq.n	80031f2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031d0:	697b      	ldr	r3, [r7, #20]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	fbb2 f2f3 	udiv	r2, r2, r3
 80031da:	4613      	mov	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	4413      	add	r3, r2
 80031e0:	005b      	lsls	r3, r3, #1
 80031e2:	461a      	mov	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	695b      	ldr	r3, [r3, #20]
 80031e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ec:	3305      	adds	r3, #5
 80031ee:	613b      	str	r3, [r7, #16]
 80031f0:	e01f      	b.n	8003232 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	00db      	lsls	r3, r3, #3
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031fc:	4613      	mov	r3, r2
 80031fe:	009b      	lsls	r3, r3, #2
 8003200:	4413      	add	r3, r2
 8003202:	005b      	lsls	r3, r3, #1
 8003204:	461a      	mov	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695b      	ldr	r3, [r3, #20]
 800320a:	fbb2 f3f3 	udiv	r3, r2, r3
 800320e:	3305      	adds	r3, #5
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	e00e      	b.n	8003232 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	fbb2 f2f3 	udiv	r2, r2, r3
 800321c:	4613      	mov	r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	4413      	add	r3, r2
 8003222:	005b      	lsls	r3, r3, #1
 8003224:	461a      	mov	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	fbb2 f3f3 	udiv	r3, r2, r3
 800322e:	3305      	adds	r3, #5
 8003230:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	4a5c      	ldr	r2, [pc, #368]	; (80033a8 <HAL_I2S_Init+0x270>)
 8003236:	fba2 2303 	umull	r2, r3, r2, r3
 800323a:	08db      	lsrs	r3, r3, #3
 800323c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	f003 0301 	and.w	r3, r3, #1
 8003244:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	085b      	lsrs	r3, r3, #1
 800324e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	021b      	lsls	r3, r3, #8
 8003254:	61bb      	str	r3, [r7, #24]
 8003256:	e003      	b.n	8003260 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003258:	2302      	movs	r3, #2
 800325a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d902      	bls.n	800326c <HAL_I2S_Init+0x134>
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	2bff      	cmp	r3, #255	; 0xff
 800326a:	d907      	bls.n	800327c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003270:	f043 0210 	orr.w	r2, r3, #16
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e08f      	b.n	800339c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	691a      	ldr	r2, [r3, #16]
 8003280:	69bb      	ldr	r3, [r7, #24]
 8003282:	ea42 0103 	orr.w	r1, r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	430a      	orrs	r2, r1
 800328e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	69db      	ldr	r3, [r3, #28]
 8003296:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800329a:	f023 030f 	bic.w	r3, r3, #15
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6851      	ldr	r1, [r2, #4]
 80032a2:	687a      	ldr	r2, [r7, #4]
 80032a4:	6892      	ldr	r2, [r2, #8]
 80032a6:	4311      	orrs	r1, r2
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68d2      	ldr	r2, [r2, #12]
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6992      	ldr	r2, [r2, #24]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032be:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d161      	bne.n	800338c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	4a38      	ldr	r2, [pc, #224]	; (80033ac <HAL_I2S_Init+0x274>)
 80032cc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a37      	ldr	r2, [pc, #220]	; (80033b0 <HAL_I2S_Init+0x278>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d101      	bne.n	80032dc <HAL_I2S_Init+0x1a4>
 80032d8:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_I2S_Init+0x27c>)
 80032da:	e001      	b.n	80032e0 <HAL_I2S_Init+0x1a8>
 80032dc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80032e0:	69db      	ldr	r3, [r3, #28]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	6812      	ldr	r2, [r2, #0]
 80032e6:	4932      	ldr	r1, [pc, #200]	; (80033b0 <HAL_I2S_Init+0x278>)
 80032e8:	428a      	cmp	r2, r1
 80032ea:	d101      	bne.n	80032f0 <HAL_I2S_Init+0x1b8>
 80032ec:	4a31      	ldr	r2, [pc, #196]	; (80033b4 <HAL_I2S_Init+0x27c>)
 80032ee:	e001      	b.n	80032f4 <HAL_I2S_Init+0x1bc>
 80032f0:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80032f4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80032f8:	f023 030f 	bic.w	r3, r3, #15
 80032fc:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2b      	ldr	r2, [pc, #172]	; (80033b0 <HAL_I2S_Init+0x278>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d101      	bne.n	800330c <HAL_I2S_Init+0x1d4>
 8003308:	4b2a      	ldr	r3, [pc, #168]	; (80033b4 <HAL_I2S_Init+0x27c>)
 800330a:	e001      	b.n	8003310 <HAL_I2S_Init+0x1d8>
 800330c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003310:	2202      	movs	r2, #2
 8003312:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a25      	ldr	r2, [pc, #148]	; (80033b0 <HAL_I2S_Init+0x278>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d101      	bne.n	8003322 <HAL_I2S_Init+0x1ea>
 800331e:	4b25      	ldr	r3, [pc, #148]	; (80033b4 <HAL_I2S_Init+0x27c>)
 8003320:	e001      	b.n	8003326 <HAL_I2S_Init+0x1ee>
 8003322:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003326:	69db      	ldr	r3, [r3, #28]
 8003328:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003332:	d003      	beq.n	800333c <HAL_I2S_Init+0x204>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d103      	bne.n	8003344 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800333c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003340:	613b      	str	r3, [r7, #16]
 8003342:	e001      	b.n	8003348 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003344:	2300      	movs	r3, #0
 8003346:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003352:	4313      	orrs	r3, r2
 8003354:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800335c:	4313      	orrs	r3, r2
 800335e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	699b      	ldr	r3, [r3, #24]
 8003364:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003366:	4313      	orrs	r3, r2
 8003368:	b29a      	uxth	r2, r3
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	4313      	orrs	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003374:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a0d      	ldr	r2, [pc, #52]	; (80033b0 <HAL_I2S_Init+0x278>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d101      	bne.n	8003384 <HAL_I2S_Init+0x24c>
 8003380:	4b0c      	ldr	r3, [pc, #48]	; (80033b4 <HAL_I2S_Init+0x27c>)
 8003382:	e001      	b.n	8003388 <HAL_I2S_Init+0x250>
 8003384:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003388:	897a      	ldrh	r2, [r7, #10]
 800338a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2201      	movs	r2, #1
 8003396:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3720      	adds	r7, #32
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	080034af 	.word	0x080034af
 80033a8:	cccccccd 	.word	0xcccccccd
 80033ac:	080035c5 	.word	0x080035c5
 80033b0:	40003800 	.word	0x40003800
 80033b4:	40003400 	.word	0x40003400

080033b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80033c0:	bf00      	nop
 80033c2:	370c      	adds	r7, #12
 80033c4:	46bd      	mov	sp, r7
 80033c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ca:	4770      	bx	lr

080033cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80033cc:	b480      	push	{r7}
 80033ce:	b083      	sub	sp, #12
 80033d0:	af00      	add	r7, sp, #0
 80033d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr

080033e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80033e8:	bf00      	nop
 80033ea:	370c      	adds	r7, #12
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80033f4:	b580      	push	{r7, lr}
 80033f6:	b082      	sub	sp, #8
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003400:	881a      	ldrh	r2, [r3, #0]
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	1c9a      	adds	r2, r3, #2
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003416:	b29b      	uxth	r3, r3
 8003418:	3b01      	subs	r3, #1
 800341a:	b29a      	uxth	r2, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003424:	b29b      	uxth	r3, r3
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10e      	bne.n	8003448 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003438:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7ff ffb8 	bl	80033b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003448:	bf00      	nop
 800344a:	3708      	adds	r7, #8
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	68da      	ldr	r2, [r3, #12]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003462:	b292      	uxth	r2, r2
 8003464:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346a:	1c9a      	adds	r2, r3, #2
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003474:	b29b      	uxth	r3, r3
 8003476:	3b01      	subs	r3, #1
 8003478:	b29a      	uxth	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003482:	b29b      	uxth	r3, r3
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10e      	bne.n	80034a6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003496:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f7ff ff93 	bl	80033cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80034a6:	bf00      	nop
 80034a8:	3708      	adds	r7, #8
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}

080034ae <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80034ae:	b580      	push	{r7, lr}
 80034b0:	b086      	sub	sp, #24
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	689b      	ldr	r3, [r3, #8]
 80034bc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c4:	b2db      	uxtb	r3, r3
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d13a      	bne.n	8003540 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	f003 0301 	and.w	r3, r3, #1
 80034d0:	2b01      	cmp	r3, #1
 80034d2:	d109      	bne.n	80034e8 <I2S_IRQHandler+0x3a>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034de:	2b40      	cmp	r3, #64	; 0x40
 80034e0:	d102      	bne.n	80034e8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f7ff ffb4 	bl	8003450 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80034e8:	697b      	ldr	r3, [r7, #20]
 80034ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034ee:	2b40      	cmp	r3, #64	; 0x40
 80034f0:	d126      	bne.n	8003540 <I2S_IRQHandler+0x92>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 0320 	and.w	r3, r3, #32
 80034fc:	2b20      	cmp	r3, #32
 80034fe:	d11f      	bne.n	8003540 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800350e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003510:	2300      	movs	r3, #0
 8003512:	613b      	str	r3, [r7, #16]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	613b      	str	r3, [r7, #16]
 8003524:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2201      	movs	r2, #1
 800352a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003532:	f043 0202 	orr.w	r2, r3, #2
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff50 	bl	80033e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003546:	b2db      	uxtb	r3, r3
 8003548:	2b03      	cmp	r3, #3
 800354a:	d136      	bne.n	80035ba <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b02      	cmp	r3, #2
 8003554:	d109      	bne.n	800356a <I2S_IRQHandler+0xbc>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003560:	2b80      	cmp	r3, #128	; 0x80
 8003562:	d102      	bne.n	800356a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	f7ff ff45 	bl	80033f4 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d122      	bne.n	80035ba <I2S_IRQHandler+0x10c>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	f003 0320 	and.w	r3, r3, #32
 800357e:	2b20      	cmp	r3, #32
 8003580:	d11b      	bne.n	80035ba <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003590:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003592:	2300      	movs	r3, #0
 8003594:	60fb      	str	r3, [r7, #12]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	60fb      	str	r3, [r7, #12]
 800359e:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ac:	f043 0204 	orr.w	r2, r3, #4
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff ff13 	bl	80033e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80035ba:	bf00      	nop
 80035bc:	3718      	adds	r7, #24
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
	...

080035c4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	b088      	sub	sp, #32
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	4a92      	ldr	r2, [pc, #584]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d101      	bne.n	80035e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80035de:	4b92      	ldr	r3, [pc, #584]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035e0:	e001      	b.n	80035e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80035e2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80035e6:	689b      	ldr	r3, [r3, #8]
 80035e8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4a8b      	ldr	r2, [pc, #556]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d101      	bne.n	8003600 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80035fc:	4b8a      	ldr	r3, [pc, #552]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80035fe:	e001      	b.n	8003604 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003600:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003610:	d004      	beq.n	800361c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	f040 8099 	bne.w	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	f003 0302 	and.w	r3, r3, #2
 8003622:	2b02      	cmp	r3, #2
 8003624:	d107      	bne.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d002      	beq.n	8003636 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 f925 	bl	8003880 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	f003 0301 	and.w	r3, r3, #1
 800363c:	2b01      	cmp	r3, #1
 800363e:	d107      	bne.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d002      	beq.n	8003650 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f000 f9c8 	bl	80039e0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b40      	cmp	r3, #64	; 0x40
 8003658:	d13a      	bne.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b00      	cmp	r3, #0
 8003662:	d035      	beq.n	80036d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a6e      	ldr	r2, [pc, #440]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d101      	bne.n	8003672 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800366e:	4b6e      	ldr	r3, [pc, #440]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003670:	e001      	b.n	8003676 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003672:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4969      	ldr	r1, [pc, #420]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800367e:	428b      	cmp	r3, r1
 8003680:	d101      	bne.n	8003686 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003682:	4b69      	ldr	r3, [pc, #420]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003684:	e001      	b.n	800368a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003686:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800368a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800368e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	685a      	ldr	r2, [r3, #4]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800369e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80036a0:	2300      	movs	r3, #0
 80036a2:	60fb      	str	r3, [r7, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2201      	movs	r2, #1
 80036ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c2:	f043 0202 	orr.w	r2, r3, #2
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f7ff fe88 	bl	80033e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b08      	cmp	r3, #8
 80036d8:	f040 80c3 	bne.w	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	f000 80bd 	beq.w	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	685a      	ldr	r2, [r3, #4]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f6:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a49      	ldr	r2, [pc, #292]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d101      	bne.n	8003706 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003702:	4b49      	ldr	r3, [pc, #292]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003704:	e001      	b.n	800370a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003706:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4944      	ldr	r1, [pc, #272]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003712:	428b      	cmp	r3, r1
 8003714:	d101      	bne.n	800371a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003716:	4b44      	ldr	r3, [pc, #272]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003718:	e001      	b.n	800371e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800371a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003722:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003724:	2300      	movs	r3, #0
 8003726:	60bb      	str	r3, [r7, #8]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	60bb      	str	r3, [r7, #8]
 8003730:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2201      	movs	r2, #1
 8003736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373e:	f043 0204 	orr.w	r2, r3, #4
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7ff fe4a 	bl	80033e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800374c:	e089      	b.n	8003862 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b02      	cmp	r3, #2
 8003756:	d107      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f8be 	bl	80038e4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	f003 0301 	and.w	r3, r3, #1
 800376e:	2b01      	cmp	r3, #1
 8003770:	d107      	bne.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f8fd 	bl	800397c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003788:	2b40      	cmp	r3, #64	; 0x40
 800378a:	d12f      	bne.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 0320 	and.w	r3, r3, #32
 8003792:	2b00      	cmp	r3, #0
 8003794:	d02a      	beq.n	80037ec <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685a      	ldr	r2, [r3, #4]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037ac:	4293      	cmp	r3, r2
 80037ae:	d101      	bne.n	80037b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80037b0:	4b1d      	ldr	r3, [pc, #116]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037b2:	e001      	b.n	80037b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80037b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4919      	ldr	r1, [pc, #100]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80037c0:	428b      	cmp	r3, r1
 80037c2:	d101      	bne.n	80037c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80037c4:	4b18      	ldr	r3, [pc, #96]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80037c6:	e001      	b.n	80037cc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80037c8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037d0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	2201      	movs	r2, #1
 80037d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037de:	f043 0202 	orr.w	r2, r3, #2
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	f7ff fdfa 	bl	80033e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80037ec:	69bb      	ldr	r3, [r7, #24]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b08      	cmp	r3, #8
 80037f4:	d136      	bne.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	f003 0320 	and.w	r3, r3, #32
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d031      	beq.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a07      	ldr	r2, [pc, #28]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d101      	bne.n	800380e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800380a:	4b07      	ldr	r3, [pc, #28]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800380c:	e001      	b.n	8003812 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800380e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4902      	ldr	r1, [pc, #8]	; (8003824 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800381a:	428b      	cmp	r3, r1
 800381c:	d106      	bne.n	800382c <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800381e:	4b02      	ldr	r3, [pc, #8]	; (8003828 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003820:	e006      	b.n	8003830 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003822:	bf00      	nop
 8003824:	40003800 	.word	0x40003800
 8003828:	40003400 	.word	0x40003400
 800382c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003830:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003834:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	685a      	ldr	r2, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003844:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003852:	f043 0204 	orr.w	r2, r3, #4
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fdc0 	bl	80033e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003860:	e000      	b.n	8003864 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003862:	bf00      	nop
}
 8003864:	bf00      	nop
 8003866:	3720      	adds	r7, #32
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003874:	bf00      	nop
 8003876:	370c      	adds	r7, #12
 8003878:	46bd      	mov	sp, r7
 800387a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387e:	4770      	bx	lr

08003880 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	1c99      	adds	r1, r3, #2
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	6251      	str	r1, [r2, #36]	; 0x24
 8003892:	881a      	ldrh	r2, [r3, #0]
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ac:	b29b      	uxth	r3, r3
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d113      	bne.n	80038da <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685a      	ldr	r2, [r3, #4]
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038c0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d106      	bne.n	80038da <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ffc9 	bl	800386c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80038da:	bf00      	nop
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}
	...

080038e4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b082      	sub	sp, #8
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038f0:	1c99      	adds	r1, r3, #2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6251      	str	r1, [r2, #36]	; 0x24
 80038f6:	8819      	ldrh	r1, [r3, #0]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a1d      	ldr	r2, [pc, #116]	; (8003974 <I2SEx_TxISR_I2SExt+0x90>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <I2SEx_TxISR_I2SExt+0x22>
 8003902:	4b1d      	ldr	r3, [pc, #116]	; (8003978 <I2SEx_TxISR_I2SExt+0x94>)
 8003904:	e001      	b.n	800390a <I2SEx_TxISR_I2SExt+0x26>
 8003906:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800390a:	460a      	mov	r2, r1
 800390c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003920:	b29b      	uxth	r3, r3
 8003922:	2b00      	cmp	r3, #0
 8003924:	d121      	bne.n	800396a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a12      	ldr	r2, [pc, #72]	; (8003974 <I2SEx_TxISR_I2SExt+0x90>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d101      	bne.n	8003934 <I2SEx_TxISR_I2SExt+0x50>
 8003930:	4b11      	ldr	r3, [pc, #68]	; (8003978 <I2SEx_TxISR_I2SExt+0x94>)
 8003932:	e001      	b.n	8003938 <I2SEx_TxISR_I2SExt+0x54>
 8003934:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	490d      	ldr	r1, [pc, #52]	; (8003974 <I2SEx_TxISR_I2SExt+0x90>)
 8003940:	428b      	cmp	r3, r1
 8003942:	d101      	bne.n	8003948 <I2SEx_TxISR_I2SExt+0x64>
 8003944:	4b0c      	ldr	r3, [pc, #48]	; (8003978 <I2SEx_TxISR_I2SExt+0x94>)
 8003946:	e001      	b.n	800394c <I2SEx_TxISR_I2SExt+0x68>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003950:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003956:	b29b      	uxth	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d106      	bne.n	800396a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f7ff ff81 	bl	800386c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800396a:	bf00      	nop
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	40003800 	.word	0x40003800
 8003978:	40003400 	.word	0x40003400

0800397c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68d8      	ldr	r0, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800398e:	1c99      	adds	r1, r3, #2
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003994:	b282      	uxth	r2, r0
 8003996:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d113      	bne.n	80039d8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685a      	ldr	r2, [r3, #4]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039be:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d106      	bne.n	80039d8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2201      	movs	r2, #1
 80039ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f7ff ff4a 	bl	800386c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039d8:	bf00      	nop
 80039da:	3708      	adds	r7, #8
 80039dc:	46bd      	mov	sp, r7
 80039de:	bd80      	pop	{r7, pc}

080039e0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a20      	ldr	r2, [pc, #128]	; (8003a70 <I2SEx_RxISR_I2SExt+0x90>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d101      	bne.n	80039f6 <I2SEx_RxISR_I2SExt+0x16>
 80039f2:	4b20      	ldr	r3, [pc, #128]	; (8003a74 <I2SEx_RxISR_I2SExt+0x94>)
 80039f4:	e001      	b.n	80039fa <I2SEx_RxISR_I2SExt+0x1a>
 80039f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039fa:	68d8      	ldr	r0, [r3, #12]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a00:	1c99      	adds	r1, r3, #2
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003a06:	b282      	uxth	r2, r0
 8003a08:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	3b01      	subs	r3, #1
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a1c:	b29b      	uxth	r3, r3
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d121      	bne.n	8003a66 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	4a12      	ldr	r2, [pc, #72]	; (8003a70 <I2SEx_RxISR_I2SExt+0x90>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d101      	bne.n	8003a30 <I2SEx_RxISR_I2SExt+0x50>
 8003a2c:	4b11      	ldr	r3, [pc, #68]	; (8003a74 <I2SEx_RxISR_I2SExt+0x94>)
 8003a2e:	e001      	b.n	8003a34 <I2SEx_RxISR_I2SExt+0x54>
 8003a30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	490d      	ldr	r1, [pc, #52]	; (8003a70 <I2SEx_RxISR_I2SExt+0x90>)
 8003a3c:	428b      	cmp	r3, r1
 8003a3e:	d101      	bne.n	8003a44 <I2SEx_RxISR_I2SExt+0x64>
 8003a40:	4b0c      	ldr	r3, [pc, #48]	; (8003a74 <I2SEx_RxISR_I2SExt+0x94>)
 8003a42:	e001      	b.n	8003a48 <I2SEx_RxISR_I2SExt+0x68>
 8003a44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a48:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a4c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d106      	bne.n	8003a66 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff03 	bl	800386c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a66:	bf00      	nop
 8003a68:	3708      	adds	r7, #8
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	40003800 	.word	0x40003800
 8003a74:	40003400 	.word	0x40003400

08003a78 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b086      	sub	sp, #24
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d101      	bne.n	8003a8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003a86:	2301      	movs	r3, #1
 8003a88:	e267      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d075      	beq.n	8003b82 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a96:	4b88      	ldr	r3, [pc, #544]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 030c 	and.w	r3, r3, #12
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d00c      	beq.n	8003abc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aa2:	4b85      	ldr	r3, [pc, #532]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003aaa:	2b08      	cmp	r3, #8
 8003aac:	d112      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003aae:	4b82      	ldr	r3, [pc, #520]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003aba:	d10b      	bne.n	8003ad4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003abc:	4b7e      	ldr	r3, [pc, #504]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d05b      	beq.n	8003b80 <HAL_RCC_OscConfig+0x108>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d157      	bne.n	8003b80 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e242      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003adc:	d106      	bne.n	8003aec <HAL_RCC_OscConfig+0x74>
 8003ade:	4b76      	ldr	r3, [pc, #472]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a75      	ldr	r2, [pc, #468]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6013      	str	r3, [r2, #0]
 8003aea:	e01d      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003af4:	d10c      	bne.n	8003b10 <HAL_RCC_OscConfig+0x98>
 8003af6:	4b70      	ldr	r3, [pc, #448]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	4a6f      	ldr	r2, [pc, #444]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b00:	6013      	str	r3, [r2, #0]
 8003b02:	4b6d      	ldr	r3, [pc, #436]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a6c      	ldr	r2, [pc, #432]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b0c:	6013      	str	r3, [r2, #0]
 8003b0e:	e00b      	b.n	8003b28 <HAL_RCC_OscConfig+0xb0>
 8003b10:	4b69      	ldr	r3, [pc, #420]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a68      	ldr	r2, [pc, #416]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b16:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003b1a:	6013      	str	r3, [r2, #0]
 8003b1c:	4b66      	ldr	r3, [pc, #408]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4a65      	ldr	r2, [pc, #404]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b22:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003b26:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d013      	beq.n	8003b58 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b30:	f7fd fb08 	bl	8001144 <HAL_GetTick>
 8003b34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b36:	e008      	b.n	8003b4a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b38:	f7fd fb04 	bl	8001144 <HAL_GetTick>
 8003b3c:	4602      	mov	r2, r0
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	1ad3      	subs	r3, r2, r3
 8003b42:	2b64      	cmp	r3, #100	; 0x64
 8003b44:	d901      	bls.n	8003b4a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e207      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b4a:	4b5b      	ldr	r3, [pc, #364]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0f0      	beq.n	8003b38 <HAL_RCC_OscConfig+0xc0>
 8003b56:	e014      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b58:	f7fd faf4 	bl	8001144 <HAL_GetTick>
 8003b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b5e:	e008      	b.n	8003b72 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003b60:	f7fd faf0 	bl	8001144 <HAL_GetTick>
 8003b64:	4602      	mov	r2, r0
 8003b66:	693b      	ldr	r3, [r7, #16]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	2b64      	cmp	r3, #100	; 0x64
 8003b6c:	d901      	bls.n	8003b72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b6e:	2303      	movs	r3, #3
 8003b70:	e1f3      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b72:	4b51      	ldr	r3, [pc, #324]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d1f0      	bne.n	8003b60 <HAL_RCC_OscConfig+0xe8>
 8003b7e:	e000      	b.n	8003b82 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d063      	beq.n	8003c56 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b8e:	4b4a      	ldr	r3, [pc, #296]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f003 030c 	and.w	r3, r3, #12
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00b      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b9a:	4b47      	ldr	r3, [pc, #284]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d11c      	bne.n	8003be0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ba6:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d116      	bne.n	8003be0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bb2:	4b41      	ldr	r3, [pc, #260]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d005      	beq.n	8003bca <HAL_RCC_OscConfig+0x152>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	68db      	ldr	r3, [r3, #12]
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d001      	beq.n	8003bca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e1c7      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bca:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	00db      	lsls	r3, r3, #3
 8003bd8:	4937      	ldr	r1, [pc, #220]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bde:	e03a      	b.n	8003c56 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d020      	beq.n	8003c2a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003be8:	4b34      	ldr	r3, [pc, #208]	; (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bee:	f7fd faa9 	bl	8001144 <HAL_GetTick>
 8003bf2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003bf6:	f7fd faa5 	bl	8001144 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e1a8      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c08:	4b2b      	ldr	r3, [pc, #172]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0302 	and.w	r3, r3, #2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c14:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	00db      	lsls	r3, r3, #3
 8003c22:	4925      	ldr	r1, [pc, #148]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003c24:	4313      	orrs	r3, r2
 8003c26:	600b      	str	r3, [r1, #0]
 8003c28:	e015      	b.n	8003c56 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c2a:	4b24      	ldr	r3, [pc, #144]	; (8003cbc <HAL_RCC_OscConfig+0x244>)
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c30:	f7fd fa88 	bl	8001144 <HAL_GetTick>
 8003c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c36:	e008      	b.n	8003c4a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c38:	f7fd fa84 	bl	8001144 <HAL_GetTick>
 8003c3c:	4602      	mov	r2, r0
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	1ad3      	subs	r3, r2, r3
 8003c42:	2b02      	cmp	r3, #2
 8003c44:	d901      	bls.n	8003c4a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e187      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 0302 	and.w	r3, r3, #2
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d1f0      	bne.n	8003c38 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d036      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	695b      	ldr	r3, [r3, #20]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d016      	beq.n	8003c98 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c6a:	4b15      	ldr	r3, [pc, #84]	; (8003cc0 <HAL_RCC_OscConfig+0x248>)
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c70:	f7fd fa68 	bl	8001144 <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c78:	f7fd fa64 	bl	8001144 <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b02      	cmp	r3, #2
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e167      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c8a:	4b0b      	ldr	r3, [pc, #44]	; (8003cb8 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d0f0      	beq.n	8003c78 <HAL_RCC_OscConfig+0x200>
 8003c96:	e01b      	b.n	8003cd0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c98:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <HAL_RCC_OscConfig+0x248>)
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c9e:	f7fd fa51 	bl	8001144 <HAL_GetTick>
 8003ca2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	e00e      	b.n	8003cc4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ca6:	f7fd fa4d 	bl	8001144 <HAL_GetTick>
 8003caa:	4602      	mov	r2, r0
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	1ad3      	subs	r3, r2, r3
 8003cb0:	2b02      	cmp	r3, #2
 8003cb2:	d907      	bls.n	8003cc4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e150      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
 8003cb8:	40023800 	.word	0x40023800
 8003cbc:	42470000 	.word	0x42470000
 8003cc0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	4b88      	ldr	r3, [pc, #544]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003cc6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cc8:	f003 0302 	and.w	r3, r3, #2
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1ea      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	f000 8097 	beq.w	8003e0c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003ce2:	4b81      	ldr	r3, [pc, #516]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d10f      	bne.n	8003d0e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	4b7d      	ldr	r3, [pc, #500]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf6:	4a7c      	ldr	r2, [pc, #496]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003cf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cfc:	6413      	str	r3, [r2, #64]	; 0x40
 8003cfe:	4b7a      	ldr	r3, [pc, #488]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d06:	60bb      	str	r3, [r7, #8]
 8003d08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d0e:	4b77      	ldr	r3, [pc, #476]	; (8003eec <HAL_RCC_OscConfig+0x474>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d118      	bne.n	8003d4c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d1a:	4b74      	ldr	r3, [pc, #464]	; (8003eec <HAL_RCC_OscConfig+0x474>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a73      	ldr	r2, [pc, #460]	; (8003eec <HAL_RCC_OscConfig+0x474>)
 8003d20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d26:	f7fd fa0d 	bl	8001144 <HAL_GetTick>
 8003d2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2c:	e008      	b.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d2e:	f7fd fa09 	bl	8001144 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	693b      	ldr	r3, [r7, #16]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d901      	bls.n	8003d40 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	e10c      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d40:	4b6a      	ldr	r3, [pc, #424]	; (8003eec <HAL_RCC_OscConfig+0x474>)
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d0f0      	beq.n	8003d2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	2b01      	cmp	r3, #1
 8003d52:	d106      	bne.n	8003d62 <HAL_RCC_OscConfig+0x2ea>
 8003d54:	4b64      	ldr	r3, [pc, #400]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d58:	4a63      	ldr	r2, [pc, #396]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d60:	e01c      	b.n	8003d9c <HAL_RCC_OscConfig+0x324>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	2b05      	cmp	r3, #5
 8003d68:	d10c      	bne.n	8003d84 <HAL_RCC_OscConfig+0x30c>
 8003d6a:	4b5f      	ldr	r3, [pc, #380]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d6e:	4a5e      	ldr	r2, [pc, #376]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d70:	f043 0304 	orr.w	r3, r3, #4
 8003d74:	6713      	str	r3, [r2, #112]	; 0x70
 8003d76:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d7a:	4a5b      	ldr	r2, [pc, #364]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d7c:	f043 0301 	orr.w	r3, r3, #1
 8003d80:	6713      	str	r3, [r2, #112]	; 0x70
 8003d82:	e00b      	b.n	8003d9c <HAL_RCC_OscConfig+0x324>
 8003d84:	4b58      	ldr	r3, [pc, #352]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d88:	4a57      	ldr	r2, [pc, #348]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d8a:	f023 0301 	bic.w	r3, r3, #1
 8003d8e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d90:	4b55      	ldr	r3, [pc, #340]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d94:	4a54      	ldr	r2, [pc, #336]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003d96:	f023 0304 	bic.w	r3, r3, #4
 8003d9a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689b      	ldr	r3, [r3, #8]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d015      	beq.n	8003dd0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003da4:	f7fd f9ce 	bl	8001144 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003daa:	e00a      	b.n	8003dc2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dac:	f7fd f9ca 	bl	8001144 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003dba:	4293      	cmp	r3, r2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e0cb      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dc2:	4b49      	ldr	r3, [pc, #292]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d0ee      	beq.n	8003dac <HAL_RCC_OscConfig+0x334>
 8003dce:	e014      	b.n	8003dfa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd0:	f7fd f9b8 	bl	8001144 <HAL_GetTick>
 8003dd4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003dd8:	f7fd f9b4 	bl	8001144 <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e0b5      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dee:	4b3e      	ldr	r3, [pc, #248]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f003 0302 	and.w	r3, r3, #2
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d1ee      	bne.n	8003dd8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003dfa:	7dfb      	ldrb	r3, [r7, #23]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d105      	bne.n	8003e0c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e00:	4b39      	ldr	r3, [pc, #228]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e04:	4a38      	ldr	r2, [pc, #224]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003e06:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e0a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	f000 80a1 	beq.w	8003f58 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e16:	4b34      	ldr	r3, [pc, #208]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	f003 030c 	and.w	r3, r3, #12
 8003e1e:	2b08      	cmp	r3, #8
 8003e20:	d05c      	beq.n	8003edc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d141      	bne.n	8003eae <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e2a:	4b31      	ldr	r3, [pc, #196]	; (8003ef0 <HAL_RCC_OscConfig+0x478>)
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e30:	f7fd f988 	bl	8001144 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd f984 	bl	8001144 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e087      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	4b27      	ldr	r3, [pc, #156]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	491b      	ldr	r1, [pc, #108]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e80:	4b1b      	ldr	r3, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x478>)
 8003e82:	2201      	movs	r2, #1
 8003e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e86:	f7fd f95d 	bl	8001144 <HAL_GetTick>
 8003e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e8c:	e008      	b.n	8003ea0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e8e:	f7fd f959 	bl	8001144 <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b02      	cmp	r3, #2
 8003e9a:	d901      	bls.n	8003ea0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e9c:	2303      	movs	r3, #3
 8003e9e:	e05c      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ea0:	4b11      	ldr	r3, [pc, #68]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d0f0      	beq.n	8003e8e <HAL_RCC_OscConfig+0x416>
 8003eac:	e054      	b.n	8003f58 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x478>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eb4:	f7fd f946 	bl	8001144 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ebc:	f7fd f942 	bl	8001144 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e045      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <HAL_RCC_OscConfig+0x470>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x444>
 8003eda:	e03d      	b.n	8003f58 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	699b      	ldr	r3, [r3, #24]
 8003ee0:	2b01      	cmp	r3, #1
 8003ee2:	d107      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ee4:	2301      	movs	r3, #1
 8003ee6:	e038      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
 8003ee8:	40023800 	.word	0x40023800
 8003eec:	40007000 	.word	0x40007000
 8003ef0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003ef4:	4b1b      	ldr	r3, [pc, #108]	; (8003f64 <HAL_RCC_OscConfig+0x4ec>)
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	699b      	ldr	r3, [r3, #24]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d028      	beq.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d121      	bne.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d11a      	bne.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f1e:	68fa      	ldr	r2, [r7, #12]
 8003f20:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f24:	4013      	ands	r3, r2
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d111      	bne.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3a:	085b      	lsrs	r3, r3, #1
 8003f3c:	3b01      	subs	r3, #1
 8003f3e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f40:	429a      	cmp	r2, r3
 8003f42:	d107      	bne.n	8003f54 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f4e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d001      	beq.n	8003f58 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f58:	2300      	movs	r3, #0
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3718      	adds	r7, #24
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd80      	pop	{r7, pc}
 8003f62:	bf00      	nop
 8003f64:	40023800 	.word	0x40023800

08003f68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b084      	sub	sp, #16
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
 8003f70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d101      	bne.n	8003f7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e0cc      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f7c:	4b68      	ldr	r3, [pc, #416]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0307 	and.w	r3, r3, #7
 8003f84:	683a      	ldr	r2, [r7, #0]
 8003f86:	429a      	cmp	r2, r3
 8003f88:	d90c      	bls.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f8a:	4b65      	ldr	r3, [pc, #404]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f8c:	683a      	ldr	r2, [r7, #0]
 8003f8e:	b2d2      	uxtb	r2, r2
 8003f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f92:	4b63      	ldr	r3, [pc, #396]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0307 	and.w	r3, r3, #7
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d001      	beq.n	8003fa4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e0b8      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d005      	beq.n	8003fc8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fbc:	4b59      	ldr	r3, [pc, #356]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4a58      	ldr	r2, [pc, #352]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fc2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fc6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f003 0308 	and.w	r3, r3, #8
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003fd4:	4b53      	ldr	r3, [pc, #332]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	4a52      	ldr	r2, [pc, #328]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fda:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003fde:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fe0:	4b50      	ldr	r3, [pc, #320]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	689b      	ldr	r3, [r3, #8]
 8003fe4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	494d      	ldr	r1, [pc, #308]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 0301 	and.w	r3, r3, #1
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d044      	beq.n	8004088 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2b01      	cmp	r3, #1
 8004004:	d107      	bne.n	8004016 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b47      	ldr	r3, [pc, #284]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d119      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e07f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	2b02      	cmp	r3, #2
 800401c:	d003      	beq.n	8004026 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004022:	2b03      	cmp	r3, #3
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004026:	4b3f      	ldr	r3, [pc, #252]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d109      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e06f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004036:	4b3b      	ldr	r3, [pc, #236]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0302 	and.w	r3, r3, #2
 800403e:	2b00      	cmp	r3, #0
 8004040:	d101      	bne.n	8004046 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004042:	2301      	movs	r3, #1
 8004044:	e067      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004046:	4b37      	ldr	r3, [pc, #220]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	689b      	ldr	r3, [r3, #8]
 800404a:	f023 0203 	bic.w	r2, r3, #3
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	4934      	ldr	r1, [pc, #208]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004054:	4313      	orrs	r3, r2
 8004056:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004058:	f7fd f874 	bl	8001144 <HAL_GetTick>
 800405c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405e:	e00a      	b.n	8004076 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004060:	f7fd f870 	bl	8001144 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f241 3288 	movw	r2, #5000	; 0x1388
 800406e:	4293      	cmp	r3, r2
 8004070:	d901      	bls.n	8004076 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e04f      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	4b2b      	ldr	r3, [pc, #172]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 8004078:	689b      	ldr	r3, [r3, #8]
 800407a:	f003 020c 	and.w	r2, r3, #12
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	009b      	lsls	r3, r3, #2
 8004084:	429a      	cmp	r2, r3
 8004086:	d1eb      	bne.n	8004060 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004088:	4b25      	ldr	r3, [pc, #148]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0307 	and.w	r3, r3, #7
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	429a      	cmp	r2, r3
 8004094:	d20c      	bcs.n	80040b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004096:	4b22      	ldr	r3, [pc, #136]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 8004098:	683a      	ldr	r2, [r7, #0]
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800409e:	4b20      	ldr	r3, [pc, #128]	; (8004120 <HAL_RCC_ClockConfig+0x1b8>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f003 0307 	and.w	r3, r3, #7
 80040a6:	683a      	ldr	r2, [r7, #0]
 80040a8:	429a      	cmp	r2, r3
 80040aa:	d001      	beq.n	80040b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040ac:	2301      	movs	r3, #1
 80040ae:	e032      	b.n	8004116 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d008      	beq.n	80040ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040bc:	4b19      	ldr	r3, [pc, #100]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4916      	ldr	r1, [pc, #88]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 0308 	and.w	r3, r3, #8
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d009      	beq.n	80040ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040da:	4b12      	ldr	r3, [pc, #72]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	00db      	lsls	r3, r3, #3
 80040e8:	490e      	ldr	r1, [pc, #56]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80040ee:	f000 f821 	bl	8004134 <HAL_RCC_GetSysClockFreq>
 80040f2:	4602      	mov	r2, r0
 80040f4:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <HAL_RCC_ClockConfig+0x1bc>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	091b      	lsrs	r3, r3, #4
 80040fa:	f003 030f 	and.w	r3, r3, #15
 80040fe:	490a      	ldr	r1, [pc, #40]	; (8004128 <HAL_RCC_ClockConfig+0x1c0>)
 8004100:	5ccb      	ldrb	r3, [r1, r3]
 8004102:	fa22 f303 	lsr.w	r3, r2, r3
 8004106:	4a09      	ldr	r2, [pc, #36]	; (800412c <HAL_RCC_ClockConfig+0x1c4>)
 8004108:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800410a:	4b09      	ldr	r3, [pc, #36]	; (8004130 <HAL_RCC_ClockConfig+0x1c8>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4618      	mov	r0, r3
 8004110:	f7fc ffd4 	bl	80010bc <HAL_InitTick>

  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}
 800411e:	bf00      	nop
 8004120:	40023c00 	.word	0x40023c00
 8004124:	40023800 	.word	0x40023800
 8004128:	080050e4 	.word	0x080050e4
 800412c:	20000000 	.word	0x20000000
 8004130:	20000004 	.word	0x20000004

08004134 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004134:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004138:	b090      	sub	sp, #64	; 0x40
 800413a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800413c:	2300      	movs	r3, #0
 800413e:	637b      	str	r3, [r7, #52]	; 0x34
 8004140:	2300      	movs	r3, #0
 8004142:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004144:	2300      	movs	r3, #0
 8004146:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004148:	2300      	movs	r3, #0
 800414a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800414c:	4b59      	ldr	r3, [pc, #356]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800414e:	689b      	ldr	r3, [r3, #8]
 8004150:	f003 030c 	and.w	r3, r3, #12
 8004154:	2b08      	cmp	r3, #8
 8004156:	d00d      	beq.n	8004174 <HAL_RCC_GetSysClockFreq+0x40>
 8004158:	2b08      	cmp	r3, #8
 800415a:	f200 80a1 	bhi.w	80042a0 <HAL_RCC_GetSysClockFreq+0x16c>
 800415e:	2b00      	cmp	r3, #0
 8004160:	d002      	beq.n	8004168 <HAL_RCC_GetSysClockFreq+0x34>
 8004162:	2b04      	cmp	r3, #4
 8004164:	d003      	beq.n	800416e <HAL_RCC_GetSysClockFreq+0x3a>
 8004166:	e09b      	b.n	80042a0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004168:	4b53      	ldr	r3, [pc, #332]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x184>)
 800416a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800416c:	e09b      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800416e:	4b53      	ldr	r3, [pc, #332]	; (80042bc <HAL_RCC_GetSysClockFreq+0x188>)
 8004170:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004172:	e098      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004174:	4b4f      	ldr	r3, [pc, #316]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800417c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800417e:	4b4d      	ldr	r3, [pc, #308]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004186:	2b00      	cmp	r3, #0
 8004188:	d028      	beq.n	80041dc <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800418a:	4b4a      	ldr	r3, [pc, #296]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x180>)
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	099b      	lsrs	r3, r3, #6
 8004190:	2200      	movs	r2, #0
 8004192:	623b      	str	r3, [r7, #32]
 8004194:	627a      	str	r2, [r7, #36]	; 0x24
 8004196:	6a3b      	ldr	r3, [r7, #32]
 8004198:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800419c:	2100      	movs	r1, #0
 800419e:	4b47      	ldr	r3, [pc, #284]	; (80042bc <HAL_RCC_GetSysClockFreq+0x188>)
 80041a0:	fb03 f201 	mul.w	r2, r3, r1
 80041a4:	2300      	movs	r3, #0
 80041a6:	fb00 f303 	mul.w	r3, r0, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	4a43      	ldr	r2, [pc, #268]	; (80042bc <HAL_RCC_GetSysClockFreq+0x188>)
 80041ae:	fba0 1202 	umull	r1, r2, r0, r2
 80041b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80041b4:	460a      	mov	r2, r1
 80041b6:	62ba      	str	r2, [r7, #40]	; 0x28
 80041b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80041ba:	4413      	add	r3, r2
 80041bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041c0:	2200      	movs	r2, #0
 80041c2:	61bb      	str	r3, [r7, #24]
 80041c4:	61fa      	str	r2, [r7, #28]
 80041c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041ca:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80041ce:	f7fb fffb 	bl	80001c8 <__aeabi_uldivmod>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4613      	mov	r3, r2
 80041d8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041da:	e053      	b.n	8004284 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041dc:	4b35      	ldr	r3, [pc, #212]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x180>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	099b      	lsrs	r3, r3, #6
 80041e2:	2200      	movs	r2, #0
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	617a      	str	r2, [r7, #20]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80041ee:	f04f 0b00 	mov.w	fp, #0
 80041f2:	4652      	mov	r2, sl
 80041f4:	465b      	mov	r3, fp
 80041f6:	f04f 0000 	mov.w	r0, #0
 80041fa:	f04f 0100 	mov.w	r1, #0
 80041fe:	0159      	lsls	r1, r3, #5
 8004200:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004204:	0150      	lsls	r0, r2, #5
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	ebb2 080a 	subs.w	r8, r2, sl
 800420e:	eb63 090b 	sbc.w	r9, r3, fp
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800421e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004222:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004226:	ebb2 0408 	subs.w	r4, r2, r8
 800422a:	eb63 0509 	sbc.w	r5, r3, r9
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	00eb      	lsls	r3, r5, #3
 8004238:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800423c:	00e2      	lsls	r2, r4, #3
 800423e:	4614      	mov	r4, r2
 8004240:	461d      	mov	r5, r3
 8004242:	eb14 030a 	adds.w	r3, r4, sl
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	eb45 030b 	adc.w	r3, r5, fp
 800424c:	607b      	str	r3, [r7, #4]
 800424e:	f04f 0200 	mov.w	r2, #0
 8004252:	f04f 0300 	mov.w	r3, #0
 8004256:	e9d7 4500 	ldrd	r4, r5, [r7]
 800425a:	4629      	mov	r1, r5
 800425c:	028b      	lsls	r3, r1, #10
 800425e:	4621      	mov	r1, r4
 8004260:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004264:	4621      	mov	r1, r4
 8004266:	028a      	lsls	r2, r1, #10
 8004268:	4610      	mov	r0, r2
 800426a:	4619      	mov	r1, r3
 800426c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800426e:	2200      	movs	r2, #0
 8004270:	60bb      	str	r3, [r7, #8]
 8004272:	60fa      	str	r2, [r7, #12]
 8004274:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004278:	f7fb ffa6 	bl	80001c8 <__aeabi_uldivmod>
 800427c:	4602      	mov	r2, r0
 800427e:	460b      	mov	r3, r1
 8004280:	4613      	mov	r3, r2
 8004282:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004284:	4b0b      	ldr	r3, [pc, #44]	; (80042b4 <HAL_RCC_GetSysClockFreq+0x180>)
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	0c1b      	lsrs	r3, r3, #16
 800428a:	f003 0303 	and.w	r3, r3, #3
 800428e:	3301      	adds	r3, #1
 8004290:	005b      	lsls	r3, r3, #1
 8004292:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004294:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004298:	fbb2 f3f3 	udiv	r3, r2, r3
 800429c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800429e:	e002      	b.n	80042a6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042a0:	4b05      	ldr	r3, [pc, #20]	; (80042b8 <HAL_RCC_GetSysClockFreq+0x184>)
 80042a2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80042a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3740      	adds	r7, #64	; 0x40
 80042ac:	46bd      	mov	sp, r7
 80042ae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80042b2:	bf00      	nop
 80042b4:	40023800 	.word	0x40023800
 80042b8:	00f42400 	.word	0x00f42400
 80042bc:	017d7840 	.word	0x017d7840

080042c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80042c0:	b480      	push	{r7}
 80042c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80042c4:	4b03      	ldr	r3, [pc, #12]	; (80042d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80042c6:	681b      	ldr	r3, [r3, #0]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
 80042d2:	bf00      	nop
 80042d4:	20000000 	.word	0x20000000

080042d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80042dc:	f7ff fff0 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 80042e0:	4602      	mov	r2, r0
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	0a9b      	lsrs	r3, r3, #10
 80042e8:	f003 0307 	and.w	r3, r3, #7
 80042ec:	4903      	ldr	r1, [pc, #12]	; (80042fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80042ee:	5ccb      	ldrb	r3, [r1, r3]
 80042f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	40023800 	.word	0x40023800
 80042fc:	080050f4 	.word	0x080050f4

08004300 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004304:	f7ff ffdc 	bl	80042c0 <HAL_RCC_GetHCLKFreq>
 8004308:	4602      	mov	r2, r0
 800430a:	4b05      	ldr	r3, [pc, #20]	; (8004320 <HAL_RCC_GetPCLK2Freq+0x20>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	0b5b      	lsrs	r3, r3, #13
 8004310:	f003 0307 	and.w	r3, r3, #7
 8004314:	4903      	ldr	r1, [pc, #12]	; (8004324 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004316:	5ccb      	ldrb	r3, [r1, r3]
 8004318:	fa22 f303 	lsr.w	r3, r2, r3
}
 800431c:	4618      	mov	r0, r3
 800431e:	bd80      	pop	{r7, pc}
 8004320:	40023800 	.word	0x40023800
 8004324:	080050f4 	.word	0x080050f4

08004328 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b086      	sub	sp, #24
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004334:	2300      	movs	r3, #0
 8004336:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0301 	and.w	r3, r3, #1
 8004340:	2b00      	cmp	r3, #0
 8004342:	d105      	bne.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800434c:	2b00      	cmp	r3, #0
 800434e:	d035      	beq.n	80043bc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004350:	4b62      	ldr	r3, [pc, #392]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004356:	f7fc fef5 	bl	8001144 <HAL_GetTick>
 800435a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800435e:	f7fc fef1 	bl	8001144 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0b0      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004370:	4b5b      	ldr	r3, [pc, #364]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d1f0      	bne.n	800435e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	019a      	lsls	r2, r3, #6
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	071b      	lsls	r3, r3, #28
 8004388:	4955      	ldr	r1, [pc, #340]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800438a:	4313      	orrs	r3, r2
 800438c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004390:	4b52      	ldr	r3, [pc, #328]	; (80044dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004392:	2201      	movs	r2, #1
 8004394:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004396:	f7fc fed5 	bl	8001144 <HAL_GetTick>
 800439a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800439c:	e008      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800439e:	f7fc fed1 	bl	8001144 <HAL_GetTick>
 80043a2:	4602      	mov	r2, r0
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	1ad3      	subs	r3, r2, r3
 80043a8:	2b02      	cmp	r3, #2
 80043aa:	d901      	bls.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043ac:	2303      	movs	r3, #3
 80043ae:	e090      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043b0:	4b4b      	ldr	r3, [pc, #300]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d0f0      	beq.n	800439e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8083 	beq.w	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80043ca:	2300      	movs	r3, #0
 80043cc:	60fb      	str	r3, [r7, #12]
 80043ce:	4b44      	ldr	r3, [pc, #272]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d2:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043d8:	6413      	str	r3, [r2, #64]	; 0x40
 80043da:	4b41      	ldr	r3, [pc, #260]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80043e6:	4b3f      	ldr	r3, [pc, #252]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a3e      	ldr	r2, [pc, #248]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80043f2:	f7fc fea7 	bl	8001144 <HAL_GetTick>
 80043f6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80043f8:	e008      	b.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80043fa:	f7fc fea3 	bl	8001144 <HAL_GetTick>
 80043fe:	4602      	mov	r2, r0
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	1ad3      	subs	r3, r2, r3
 8004404:	2b02      	cmp	r3, #2
 8004406:	d901      	bls.n	800440c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004408:	2303      	movs	r3, #3
 800440a:	e062      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800440c:	4b35      	ldr	r3, [pc, #212]	; (80044e4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004414:	2b00      	cmp	r3, #0
 8004416:	d0f0      	beq.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004418:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800441c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004420:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d02f      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	68db      	ldr	r3, [r3, #12]
 800442c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004430:	693a      	ldr	r2, [r7, #16]
 8004432:	429a      	cmp	r2, r3
 8004434:	d028      	beq.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004436:	4b2a      	ldr	r3, [pc, #168]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800443a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800443e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004440:	4b29      	ldr	r3, [pc, #164]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004442:	2201      	movs	r2, #1
 8004444:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004446:	4b28      	ldr	r3, [pc, #160]	; (80044e8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004448:	2200      	movs	r2, #0
 800444a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800444c:	4a24      	ldr	r2, [pc, #144]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800444e:	693b      	ldr	r3, [r7, #16]
 8004450:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004452:	4b23      	ldr	r3, [pc, #140]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004454:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004456:	f003 0301 	and.w	r3, r3, #1
 800445a:	2b01      	cmp	r3, #1
 800445c:	d114      	bne.n	8004488 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800445e:	f7fc fe71 	bl	8001144 <HAL_GetTick>
 8004462:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004464:	e00a      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004466:	f7fc fe6d 	bl	8001144 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	f241 3288 	movw	r2, #5000	; 0x1388
 8004474:	4293      	cmp	r3, r2
 8004476:	d901      	bls.n	800447c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e02a      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800447c:	4b18      	ldr	r3, [pc, #96]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800447e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004480:	f003 0302 	and.w	r3, r3, #2
 8004484:	2b00      	cmp	r3, #0
 8004486:	d0ee      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004490:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004494:	d10d      	bne.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004496:	4b12      	ldr	r3, [pc, #72]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004498:	689b      	ldr	r3, [r3, #8]
 800449a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80044a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044aa:	490d      	ldr	r1, [pc, #52]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]
 80044b0:	e005      	b.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x196>
 80044b2:	4b0b      	ldr	r3, [pc, #44]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	4a0a      	ldr	r2, [pc, #40]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80044bc:	6093      	str	r3, [r2, #8]
 80044be:	4b08      	ldr	r3, [pc, #32]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044c0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80044ca:	4905      	ldr	r1, [pc, #20]	; (80044e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044cc:	4313      	orrs	r3, r2
 80044ce:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80044d0:	2300      	movs	r3, #0
}
 80044d2:	4618      	mov	r0, r3
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
 80044da:	bf00      	nop
 80044dc:	42470068 	.word	0x42470068
 80044e0:	40023800 	.word	0x40023800
 80044e4:	40007000 	.word	0x40007000
 80044e8:	42470e40 	.word	0x42470e40

080044ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b087      	sub	sp, #28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004500:	2300      	movs	r3, #0
 8004502:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2b01      	cmp	r3, #1
 8004508:	d13e      	bne.n	8004588 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800450a:	4b23      	ldr	r3, [pc, #140]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800450c:	689b      	ldr	r3, [r3, #8]
 800450e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004512:	60fb      	str	r3, [r7, #12]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d12f      	bne.n	8004580 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004520:	4b1e      	ldr	r3, [pc, #120]	; (800459c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004522:	617b      	str	r3, [r7, #20]
          break;
 8004524:	e02f      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004526:	4b1c      	ldr	r3, [pc, #112]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800452e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004532:	d108      	bne.n	8004546 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004534:	4b18      	ldr	r3, [pc, #96]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800453c:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800453e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	e007      	b.n	8004556 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004546:	4b14      	ldr	r3, [pc, #80]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800454e:	4a15      	ldr	r2, [pc, #84]	; (80045a4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004556:	4b10      	ldr	r3, [pc, #64]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800455c:	099b      	lsrs	r3, r3, #6
 800455e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	fb02 f303 	mul.w	r3, r2, r3
 8004568:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800456a:	4b0b      	ldr	r3, [pc, #44]	; (8004598 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800456c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004570:	0f1b      	lsrs	r3, r3, #28
 8004572:	f003 0307 	and.w	r3, r3, #7
 8004576:	68ba      	ldr	r2, [r7, #8]
 8004578:	fbb2 f3f3 	udiv	r3, r2, r3
 800457c:	617b      	str	r3, [r7, #20]
          break;
 800457e:	e002      	b.n	8004586 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004580:	2300      	movs	r3, #0
 8004582:	617b      	str	r3, [r7, #20]
          break;
 8004584:	bf00      	nop
        }
      }
      break;
 8004586:	bf00      	nop
    }
  }
  return frequency;
 8004588:	697b      	ldr	r3, [r7, #20]
}
 800458a:	4618      	mov	r0, r3
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	40023800 	.word	0x40023800
 800459c:	00bb8000 	.word	0x00bb8000
 80045a0:	017d7840 	.word	0x017d7840
 80045a4:	00f42400 	.word	0x00f42400

080045a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d101      	bne.n	80045ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b6:	2301      	movs	r3, #1
 80045b8:	e041      	b.n	800463e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c0:	b2db      	uxtb	r3, r3
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d106      	bne.n	80045d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	2200      	movs	r2, #0
 80045ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f7fc fc5e 	bl	8000e90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2202      	movs	r2, #2
 80045d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	3304      	adds	r3, #4
 80045e4:	4619      	mov	r1, r3
 80045e6:	4610      	mov	r0, r2
 80045e8:	f000 f9ce 	bl	8004988 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2201      	movs	r2, #1
 8004608:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2201      	movs	r2, #1
 8004610:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2201      	movs	r2, #1
 8004620:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2201      	movs	r2, #1
 8004628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3708      	adds	r7, #8
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b01      	cmp	r3, #1
 800465a:	d001      	beq.n	8004660 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800465c:	2301      	movs	r3, #1
 800465e:	e04e      	b.n	80046fe <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2202      	movs	r2, #2
 8004664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68da      	ldr	r2, [r3, #12]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f042 0201 	orr.w	r2, r2, #1
 8004676:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a23      	ldr	r2, [pc, #140]	; (800470c <HAL_TIM_Base_Start_IT+0xc4>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d022      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800468a:	d01d      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	4a1f      	ldr	r2, [pc, #124]	; (8004710 <HAL_TIM_Base_Start_IT+0xc8>)
 8004692:	4293      	cmp	r3, r2
 8004694:	d018      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <HAL_TIM_Base_Start_IT+0xcc>)
 800469c:	4293      	cmp	r3, r2
 800469e:	d013      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a1c      	ldr	r2, [pc, #112]	; (8004718 <HAL_TIM_Base_Start_IT+0xd0>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d00e      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a1b      	ldr	r2, [pc, #108]	; (800471c <HAL_TIM_Base_Start_IT+0xd4>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d009      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4a19      	ldr	r2, [pc, #100]	; (8004720 <HAL_TIM_Base_Start_IT+0xd8>)
 80046ba:	4293      	cmp	r3, r2
 80046bc:	d004      	beq.n	80046c8 <HAL_TIM_Base_Start_IT+0x80>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a18      	ldr	r2, [pc, #96]	; (8004724 <HAL_TIM_Base_Start_IT+0xdc>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d111      	bne.n	80046ec <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b06      	cmp	r3, #6
 80046d8:	d010      	beq.n	80046fc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f042 0201 	orr.w	r2, r2, #1
 80046e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ea:	e007      	b.n	80046fc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0201 	orr.w	r2, r2, #1
 80046fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3714      	adds	r7, #20
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr
 800470a:	bf00      	nop
 800470c:	40010000 	.word	0x40010000
 8004710:	40000400 	.word	0x40000400
 8004714:	40000800 	.word	0x40000800
 8004718:	40000c00 	.word	0x40000c00
 800471c:	40010400 	.word	0x40010400
 8004720:	40014000 	.word	0x40014000
 8004724:	40001800 	.word	0x40001800

08004728 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004728:	b580      	push	{r7, lr}
 800472a:	b082      	sub	sp, #8
 800472c:	af00      	add	r7, sp, #0
 800472e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	f003 0302 	and.w	r3, r3, #2
 800473a:	2b02      	cmp	r3, #2
 800473c:	d122      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b02      	cmp	r3, #2
 800474a:	d11b      	bne.n	8004784 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f06f 0202 	mvn.w	r2, #2
 8004754:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	699b      	ldr	r3, [r3, #24]
 8004762:	f003 0303 	and.w	r3, r3, #3
 8004766:	2b00      	cmp	r3, #0
 8004768:	d003      	beq.n	8004772 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f000 f8ee 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 8004770:	e005      	b.n	800477e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f000 f8e0 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004778:	6878      	ldr	r0, [r7, #4]
 800477a:	f000 f8f1 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2200      	movs	r2, #0
 8004782:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b04      	cmp	r3, #4
 8004790:	d122      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b04      	cmp	r3, #4
 800479e:	d11b      	bne.n	80047d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f06f 0204 	mvn.w	r2, #4
 80047a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2202      	movs	r2, #2
 80047ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d003      	beq.n	80047c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f000 f8c4 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 80047c4:	e005      	b.n	80047d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	f000 f8b6 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f000 f8c7 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2200      	movs	r2, #0
 80047d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	691b      	ldr	r3, [r3, #16]
 80047de:	f003 0308 	and.w	r3, r3, #8
 80047e2:	2b08      	cmp	r3, #8
 80047e4:	d122      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68db      	ldr	r3, [r3, #12]
 80047ec:	f003 0308 	and.w	r3, r3, #8
 80047f0:	2b08      	cmp	r3, #8
 80047f2:	d11b      	bne.n	800482c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f06f 0208 	mvn.w	r2, #8
 80047fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2204      	movs	r2, #4
 8004802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	69db      	ldr	r3, [r3, #28]
 800480a:	f003 0303 	and.w	r3, r3, #3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d003      	beq.n	800481a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	f000 f89a 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 8004818:	e005      	b.n	8004826 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f000 f88c 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f89d 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2200      	movs	r2, #0
 800482a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 0310 	and.w	r3, r3, #16
 8004836:	2b10      	cmp	r3, #16
 8004838:	d122      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f003 0310 	and.w	r3, r3, #16
 8004844:	2b10      	cmp	r3, #16
 8004846:	d11b      	bne.n	8004880 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f06f 0210 	mvn.w	r2, #16
 8004850:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2208      	movs	r2, #8
 8004856:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	69db      	ldr	r3, [r3, #28]
 800485e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004862:	2b00      	cmp	r3, #0
 8004864:	d003      	beq.n	800486e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f000 f870 	bl	800494c <HAL_TIM_IC_CaptureCallback>
 800486c:	e005      	b.n	800487a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f000 f862 	bl	8004938 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f000 f873 	bl	8004960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10e      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f003 0301 	and.w	r3, r3, #1
 8004898:	2b01      	cmp	r3, #1
 800489a:	d107      	bne.n	80048ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f06f 0201 	mvn.w	r2, #1
 80048a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7fc f8d6 	bl	8000a58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	691b      	ldr	r3, [r3, #16]
 80048b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048b6:	2b80      	cmp	r3, #128	; 0x80
 80048b8:	d10e      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68db      	ldr	r3, [r3, #12]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b80      	cmp	r3, #128	; 0x80
 80048c6:	d107      	bne.n	80048d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80048d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f902 	bl	8004adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048e2:	2b40      	cmp	r3, #64	; 0x40
 80048e4:	d10e      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048f0:	2b40      	cmp	r3, #64	; 0x40
 80048f2:	d107      	bne.n	8004904 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80048fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f838 	bl	8004974 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b20      	cmp	r3, #32
 8004910:	d10e      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68db      	ldr	r3, [r3, #12]
 8004918:	f003 0320 	and.w	r3, r3, #32
 800491c:	2b20      	cmp	r3, #32
 800491e:	d107      	bne.n	8004930 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f06f 0220 	mvn.w	r2, #32
 8004928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f8cc 	bl	8004ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004930:	bf00      	nop
 8004932:	3708      	adds	r7, #8
 8004934:	46bd      	mov	sp, r7
 8004936:	bd80      	pop	{r7, pc}

08004938 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004968:	bf00      	nop
 800496a:	370c      	adds	r7, #12
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800497c:	bf00      	nop
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a40      	ldr	r2, [pc, #256]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d013      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d00f      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	4a3d      	ldr	r2, [pc, #244]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d00b      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	4a3c      	ldr	r2, [pc, #240]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d007      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	4a3b      	ldr	r2, [pc, #236]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d003      	beq.n	80049c8 <TIM_Base_SetConfig+0x40>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a3a      	ldr	r2, [pc, #232]	; (8004aac <TIM_Base_SetConfig+0x124>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d108      	bne.n	80049da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a2f      	ldr	r2, [pc, #188]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049e8:	d027      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a2c      	ldr	r2, [pc, #176]	; (8004aa0 <TIM_Base_SetConfig+0x118>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d023      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a2b      	ldr	r2, [pc, #172]	; (8004aa4 <TIM_Base_SetConfig+0x11c>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d01f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a2a      	ldr	r2, [pc, #168]	; (8004aa8 <TIM_Base_SetConfig+0x120>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d01b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a29      	ldr	r2, [pc, #164]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d017      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a28      	ldr	r2, [pc, #160]	; (8004ab0 <TIM_Base_SetConfig+0x128>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d013      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a27      	ldr	r2, [pc, #156]	; (8004ab4 <TIM_Base_SetConfig+0x12c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d00f      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	4a26      	ldr	r2, [pc, #152]	; (8004ab8 <TIM_Base_SetConfig+0x130>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d00b      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	4a25      	ldr	r2, [pc, #148]	; (8004abc <TIM_Base_SetConfig+0x134>)
 8004a26:	4293      	cmp	r3, r2
 8004a28:	d007      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a24      	ldr	r2, [pc, #144]	; (8004ac0 <TIM_Base_SetConfig+0x138>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d003      	beq.n	8004a3a <TIM_Base_SetConfig+0xb2>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a23      	ldr	r2, [pc, #140]	; (8004ac4 <TIM_Base_SetConfig+0x13c>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d108      	bne.n	8004a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	68db      	ldr	r3, [r3, #12]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	681a      	ldr	r2, [r3, #0]
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a0a      	ldr	r2, [pc, #40]	; (8004a9c <TIM_Base_SetConfig+0x114>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_Base_SetConfig+0xf8>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a0c      	ldr	r2, [pc, #48]	; (8004aac <TIM_Base_SetConfig+0x124>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d103      	bne.n	8004a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	691a      	ldr	r2, [r3, #16]
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	615a      	str	r2, [r3, #20]
}
 8004a8e:	bf00      	nop
 8004a90:	3714      	adds	r7, #20
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
 8004a9a:	bf00      	nop
 8004a9c:	40010000 	.word	0x40010000
 8004aa0:	40000400 	.word	0x40000400
 8004aa4:	40000800 	.word	0x40000800
 8004aa8:	40000c00 	.word	0x40000c00
 8004aac:	40010400 	.word	0x40010400
 8004ab0:	40014000 	.word	0x40014000
 8004ab4:	40014400 	.word	0x40014400
 8004ab8:	40014800 	.word	0x40014800
 8004abc:	40001800 	.word	0x40001800
 8004ac0:	40001c00 	.word	0x40001c00
 8004ac4:	40002000 	.word	0x40002000

08004ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ad0:	bf00      	nop
 8004ad2:	370c      	adds	r7, #12
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004adc:	b480      	push	{r7}
 8004ade:	b083      	sub	sp, #12
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ae4:	bf00      	nop
 8004ae6:	370c      	adds	r7, #12
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e03f      	b.n	8004b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fc f9e2 	bl	8000ee0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	; 0x24
 8004b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 f829 	bl	8004b8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b80:	2300      	movs	r3, #0
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3708      	adds	r7, #8
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd80      	pop	{r7, pc}
	...

08004b8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b90:	b0c0      	sub	sp, #256	; 0x100
 8004b92:	af00      	add	r7, sp, #0
 8004b94:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	68d9      	ldr	r1, [r3, #12]
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	ea40 0301 	orr.w	r3, r0, r1
 8004bb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bba:	689a      	ldr	r2, [r3, #8]
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	691b      	ldr	r3, [r3, #16]
 8004bc2:	431a      	orrs	r2, r3
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	431a      	orrs	r2, r3
 8004bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd0:	69db      	ldr	r3, [r3, #28]
 8004bd2:	4313      	orrs	r3, r2
 8004bd4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004be4:	f021 010c 	bic.w	r1, r1, #12
 8004be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bec:	681a      	ldr	r2, [r3, #0]
 8004bee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bf2:	430b      	orrs	r3, r1
 8004bf4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c06:	6999      	ldr	r1, [r3, #24]
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	ea40 0301 	orr.w	r3, r0, r1
 8004c12:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	4b8f      	ldr	r3, [pc, #572]	; (8004e58 <UART_SetConfig+0x2cc>)
 8004c1c:	429a      	cmp	r2, r3
 8004c1e:	d005      	beq.n	8004c2c <UART_SetConfig+0xa0>
 8004c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	4b8d      	ldr	r3, [pc, #564]	; (8004e5c <UART_SetConfig+0x2d0>)
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d104      	bne.n	8004c36 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c2c:	f7ff fb68 	bl	8004300 <HAL_RCC_GetPCLK2Freq>
 8004c30:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c34:	e003      	b.n	8004c3e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c36:	f7ff fb4f 	bl	80042d8 <HAL_RCC_GetPCLK1Freq>
 8004c3a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c42:	69db      	ldr	r3, [r3, #28]
 8004c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c48:	f040 810c 	bne.w	8004e64 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c4c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c50:	2200      	movs	r2, #0
 8004c52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c56:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c5a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c5e:	4622      	mov	r2, r4
 8004c60:	462b      	mov	r3, r5
 8004c62:	1891      	adds	r1, r2, r2
 8004c64:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c66:	415b      	adcs	r3, r3
 8004c68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c6a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c6e:	4621      	mov	r1, r4
 8004c70:	eb12 0801 	adds.w	r8, r2, r1
 8004c74:	4629      	mov	r1, r5
 8004c76:	eb43 0901 	adc.w	r9, r3, r1
 8004c7a:	f04f 0200 	mov.w	r2, #0
 8004c7e:	f04f 0300 	mov.w	r3, #0
 8004c82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c8e:	4690      	mov	r8, r2
 8004c90:	4699      	mov	r9, r3
 8004c92:	4623      	mov	r3, r4
 8004c94:	eb18 0303 	adds.w	r3, r8, r3
 8004c98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c9c:	462b      	mov	r3, r5
 8004c9e:	eb49 0303 	adc.w	r3, r9, r3
 8004ca2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	2200      	movs	r2, #0
 8004cae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cb2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cba:	460b      	mov	r3, r1
 8004cbc:	18db      	adds	r3, r3, r3
 8004cbe:	653b      	str	r3, [r7, #80]	; 0x50
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	eb42 0303 	adc.w	r3, r2, r3
 8004cc6:	657b      	str	r3, [r7, #84]	; 0x54
 8004cc8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ccc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cd0:	f7fb fa7a 	bl	80001c8 <__aeabi_uldivmod>
 8004cd4:	4602      	mov	r2, r0
 8004cd6:	460b      	mov	r3, r1
 8004cd8:	4b61      	ldr	r3, [pc, #388]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004cda:	fba3 2302 	umull	r2, r3, r3, r2
 8004cde:	095b      	lsrs	r3, r3, #5
 8004ce0:	011c      	lsls	r4, r3, #4
 8004ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cf0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004cf4:	4642      	mov	r2, r8
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	1891      	adds	r1, r2, r2
 8004cfa:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cfc:	415b      	adcs	r3, r3
 8004cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d00:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d04:	4641      	mov	r1, r8
 8004d06:	eb12 0a01 	adds.w	sl, r2, r1
 8004d0a:	4649      	mov	r1, r9
 8004d0c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d10:	f04f 0200 	mov.w	r2, #0
 8004d14:	f04f 0300 	mov.w	r3, #0
 8004d18:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d1c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d20:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d24:	4692      	mov	sl, r2
 8004d26:	469b      	mov	fp, r3
 8004d28:	4643      	mov	r3, r8
 8004d2a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d2e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d32:	464b      	mov	r3, r9
 8004d34:	eb4b 0303 	adc.w	r3, fp, r3
 8004d38:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d48:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d4c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d50:	460b      	mov	r3, r1
 8004d52:	18db      	adds	r3, r3, r3
 8004d54:	643b      	str	r3, [r7, #64]	; 0x40
 8004d56:	4613      	mov	r3, r2
 8004d58:	eb42 0303 	adc.w	r3, r2, r3
 8004d5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d5e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d62:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d66:	f7fb fa2f 	bl	80001c8 <__aeabi_uldivmod>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4611      	mov	r1, r2
 8004d70:	4b3b      	ldr	r3, [pc, #236]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004d72:	fba3 2301 	umull	r2, r3, r3, r1
 8004d76:	095b      	lsrs	r3, r3, #5
 8004d78:	2264      	movs	r2, #100	; 0x64
 8004d7a:	fb02 f303 	mul.w	r3, r2, r3
 8004d7e:	1acb      	subs	r3, r1, r3
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004d88:	fba3 2302 	umull	r2, r3, r3, r2
 8004d8c:	095b      	lsrs	r3, r3, #5
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d94:	441c      	add	r4, r3
 8004d96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004da0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004da4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004da8:	4642      	mov	r2, r8
 8004daa:	464b      	mov	r3, r9
 8004dac:	1891      	adds	r1, r2, r2
 8004dae:	63b9      	str	r1, [r7, #56]	; 0x38
 8004db0:	415b      	adcs	r3, r3
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004db4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004db8:	4641      	mov	r1, r8
 8004dba:	1851      	adds	r1, r2, r1
 8004dbc:	6339      	str	r1, [r7, #48]	; 0x30
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	414b      	adcs	r3, r1
 8004dc2:	637b      	str	r3, [r7, #52]	; 0x34
 8004dc4:	f04f 0200 	mov.w	r2, #0
 8004dc8:	f04f 0300 	mov.w	r3, #0
 8004dcc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004dd0:	4659      	mov	r1, fp
 8004dd2:	00cb      	lsls	r3, r1, #3
 8004dd4:	4651      	mov	r1, sl
 8004dd6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dda:	4651      	mov	r1, sl
 8004ddc:	00ca      	lsls	r2, r1, #3
 8004dde:	4610      	mov	r0, r2
 8004de0:	4619      	mov	r1, r3
 8004de2:	4603      	mov	r3, r0
 8004de4:	4642      	mov	r2, r8
 8004de6:	189b      	adds	r3, r3, r2
 8004de8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dec:	464b      	mov	r3, r9
 8004dee:	460a      	mov	r2, r1
 8004df0:	eb42 0303 	adc.w	r3, r2, r3
 8004df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004df8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e04:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e08:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	18db      	adds	r3, r3, r3
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e12:	4613      	mov	r3, r2
 8004e14:	eb42 0303 	adc.w	r3, r2, r3
 8004e18:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e1a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e1e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e22:	f7fb f9d1 	bl	80001c8 <__aeabi_uldivmod>
 8004e26:	4602      	mov	r2, r0
 8004e28:	460b      	mov	r3, r1
 8004e2a:	4b0d      	ldr	r3, [pc, #52]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004e2c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	2164      	movs	r1, #100	; 0x64
 8004e34:	fb01 f303 	mul.w	r3, r1, r3
 8004e38:	1ad3      	subs	r3, r2, r3
 8004e3a:	00db      	lsls	r3, r3, #3
 8004e3c:	3332      	adds	r3, #50	; 0x32
 8004e3e:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <UART_SetConfig+0x2d4>)
 8004e40:	fba2 2303 	umull	r2, r3, r2, r3
 8004e44:	095b      	lsrs	r3, r3, #5
 8004e46:	f003 0207 	and.w	r2, r3, #7
 8004e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4422      	add	r2, r4
 8004e52:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e54:	e106      	b.n	8005064 <UART_SetConfig+0x4d8>
 8004e56:	bf00      	nop
 8004e58:	40011000 	.word	0x40011000
 8004e5c:	40011400 	.word	0x40011400
 8004e60:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e64:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e6e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e72:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e76:	4642      	mov	r2, r8
 8004e78:	464b      	mov	r3, r9
 8004e7a:	1891      	adds	r1, r2, r2
 8004e7c:	6239      	str	r1, [r7, #32]
 8004e7e:	415b      	adcs	r3, r3
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
 8004e82:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e86:	4641      	mov	r1, r8
 8004e88:	1854      	adds	r4, r2, r1
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	eb43 0501 	adc.w	r5, r3, r1
 8004e90:	f04f 0200 	mov.w	r2, #0
 8004e94:	f04f 0300 	mov.w	r3, #0
 8004e98:	00eb      	lsls	r3, r5, #3
 8004e9a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e9e:	00e2      	lsls	r2, r4, #3
 8004ea0:	4614      	mov	r4, r2
 8004ea2:	461d      	mov	r5, r3
 8004ea4:	4643      	mov	r3, r8
 8004ea6:	18e3      	adds	r3, r4, r3
 8004ea8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004eac:	464b      	mov	r3, r9
 8004eae:	eb45 0303 	adc.w	r3, r5, r3
 8004eb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	2200      	movs	r2, #0
 8004ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	f04f 0300 	mov.w	r3, #0
 8004ece:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	008b      	lsls	r3, r1, #2
 8004ed6:	4621      	mov	r1, r4
 8004ed8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004edc:	4621      	mov	r1, r4
 8004ede:	008a      	lsls	r2, r1, #2
 8004ee0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ee4:	f7fb f970 	bl	80001c8 <__aeabi_uldivmod>
 8004ee8:	4602      	mov	r2, r0
 8004eea:	460b      	mov	r3, r1
 8004eec:	4b60      	ldr	r3, [pc, #384]	; (8005070 <UART_SetConfig+0x4e4>)
 8004eee:	fba3 2302 	umull	r2, r3, r3, r2
 8004ef2:	095b      	lsrs	r3, r3, #5
 8004ef4:	011c      	lsls	r4, r3, #4
 8004ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004efa:	2200      	movs	r2, #0
 8004efc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f00:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f04:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f08:	4642      	mov	r2, r8
 8004f0a:	464b      	mov	r3, r9
 8004f0c:	1891      	adds	r1, r2, r2
 8004f0e:	61b9      	str	r1, [r7, #24]
 8004f10:	415b      	adcs	r3, r3
 8004f12:	61fb      	str	r3, [r7, #28]
 8004f14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f18:	4641      	mov	r1, r8
 8004f1a:	1851      	adds	r1, r2, r1
 8004f1c:	6139      	str	r1, [r7, #16]
 8004f1e:	4649      	mov	r1, r9
 8004f20:	414b      	adcs	r3, r1
 8004f22:	617b      	str	r3, [r7, #20]
 8004f24:	f04f 0200 	mov.w	r2, #0
 8004f28:	f04f 0300 	mov.w	r3, #0
 8004f2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f30:	4659      	mov	r1, fp
 8004f32:	00cb      	lsls	r3, r1, #3
 8004f34:	4651      	mov	r1, sl
 8004f36:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f3a:	4651      	mov	r1, sl
 8004f3c:	00ca      	lsls	r2, r1, #3
 8004f3e:	4610      	mov	r0, r2
 8004f40:	4619      	mov	r1, r3
 8004f42:	4603      	mov	r3, r0
 8004f44:	4642      	mov	r2, r8
 8004f46:	189b      	adds	r3, r3, r2
 8004f48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f4c:	464b      	mov	r3, r9
 8004f4e:	460a      	mov	r2, r1
 8004f50:	eb42 0303 	adc.w	r3, r2, r3
 8004f54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f5c:	685b      	ldr	r3, [r3, #4]
 8004f5e:	2200      	movs	r2, #0
 8004f60:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f62:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f64:	f04f 0200 	mov.w	r2, #0
 8004f68:	f04f 0300 	mov.w	r3, #0
 8004f6c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f70:	4649      	mov	r1, r9
 8004f72:	008b      	lsls	r3, r1, #2
 8004f74:	4641      	mov	r1, r8
 8004f76:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f7a:	4641      	mov	r1, r8
 8004f7c:	008a      	lsls	r2, r1, #2
 8004f7e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f82:	f7fb f921 	bl	80001c8 <__aeabi_uldivmod>
 8004f86:	4602      	mov	r2, r0
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4611      	mov	r1, r2
 8004f8c:	4b38      	ldr	r3, [pc, #224]	; (8005070 <UART_SetConfig+0x4e4>)
 8004f8e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f92:	095b      	lsrs	r3, r3, #5
 8004f94:	2264      	movs	r2, #100	; 0x64
 8004f96:	fb02 f303 	mul.w	r3, r2, r3
 8004f9a:	1acb      	subs	r3, r1, r3
 8004f9c:	011b      	lsls	r3, r3, #4
 8004f9e:	3332      	adds	r3, #50	; 0x32
 8004fa0:	4a33      	ldr	r2, [pc, #204]	; (8005070 <UART_SetConfig+0x4e4>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	095b      	lsrs	r3, r3, #5
 8004fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fac:	441c      	add	r4, r3
 8004fae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	673b      	str	r3, [r7, #112]	; 0x70
 8004fb6:	677a      	str	r2, [r7, #116]	; 0x74
 8004fb8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fbc:	4642      	mov	r2, r8
 8004fbe:	464b      	mov	r3, r9
 8004fc0:	1891      	adds	r1, r2, r2
 8004fc2:	60b9      	str	r1, [r7, #8]
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	60fb      	str	r3, [r7, #12]
 8004fc8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fcc:	4641      	mov	r1, r8
 8004fce:	1851      	adds	r1, r2, r1
 8004fd0:	6039      	str	r1, [r7, #0]
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	414b      	adcs	r3, r1
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	f04f 0200 	mov.w	r2, #0
 8004fdc:	f04f 0300 	mov.w	r3, #0
 8004fe0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fe4:	4659      	mov	r1, fp
 8004fe6:	00cb      	lsls	r3, r1, #3
 8004fe8:	4651      	mov	r1, sl
 8004fea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fee:	4651      	mov	r1, sl
 8004ff0:	00ca      	lsls	r2, r1, #3
 8004ff2:	4610      	mov	r0, r2
 8004ff4:	4619      	mov	r1, r3
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4642      	mov	r2, r8
 8004ffa:	189b      	adds	r3, r3, r2
 8004ffc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ffe:	464b      	mov	r3, r9
 8005000:	460a      	mov	r2, r1
 8005002:	eb42 0303 	adc.w	r3, r2, r3
 8005006:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800500c:	685b      	ldr	r3, [r3, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	663b      	str	r3, [r7, #96]	; 0x60
 8005012:	667a      	str	r2, [r7, #100]	; 0x64
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005020:	4649      	mov	r1, r9
 8005022:	008b      	lsls	r3, r1, #2
 8005024:	4641      	mov	r1, r8
 8005026:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800502a:	4641      	mov	r1, r8
 800502c:	008a      	lsls	r2, r1, #2
 800502e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005032:	f7fb f8c9 	bl	80001c8 <__aeabi_uldivmod>
 8005036:	4602      	mov	r2, r0
 8005038:	460b      	mov	r3, r1
 800503a:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <UART_SetConfig+0x4e4>)
 800503c:	fba3 1302 	umull	r1, r3, r3, r2
 8005040:	095b      	lsrs	r3, r3, #5
 8005042:	2164      	movs	r1, #100	; 0x64
 8005044:	fb01 f303 	mul.w	r3, r1, r3
 8005048:	1ad3      	subs	r3, r2, r3
 800504a:	011b      	lsls	r3, r3, #4
 800504c:	3332      	adds	r3, #50	; 0x32
 800504e:	4a08      	ldr	r2, [pc, #32]	; (8005070 <UART_SetConfig+0x4e4>)
 8005050:	fba2 2303 	umull	r2, r3, r2, r3
 8005054:	095b      	lsrs	r3, r3, #5
 8005056:	f003 020f 	and.w	r2, r3, #15
 800505a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4422      	add	r2, r4
 8005062:	609a      	str	r2, [r3, #8]
}
 8005064:	bf00      	nop
 8005066:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800506a:	46bd      	mov	sp, r7
 800506c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005070:	51eb851f 	.word	0x51eb851f

08005074 <memset>:
 8005074:	4402      	add	r2, r0
 8005076:	4603      	mov	r3, r0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <memset+0xa>
 800507c:	4770      	bx	lr
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <memset+0x4>

08005084 <__libc_init_array>:
 8005084:	b570      	push	{r4, r5, r6, lr}
 8005086:	4d0d      	ldr	r5, [pc, #52]	; (80050bc <__libc_init_array+0x38>)
 8005088:	4c0d      	ldr	r4, [pc, #52]	; (80050c0 <__libc_init_array+0x3c>)
 800508a:	1b64      	subs	r4, r4, r5
 800508c:	10a4      	asrs	r4, r4, #2
 800508e:	2600      	movs	r6, #0
 8005090:	42a6      	cmp	r6, r4
 8005092:	d109      	bne.n	80050a8 <__libc_init_array+0x24>
 8005094:	4d0b      	ldr	r5, [pc, #44]	; (80050c4 <__libc_init_array+0x40>)
 8005096:	4c0c      	ldr	r4, [pc, #48]	; (80050c8 <__libc_init_array+0x44>)
 8005098:	f000 f818 	bl	80050cc <_init>
 800509c:	1b64      	subs	r4, r4, r5
 800509e:	10a4      	asrs	r4, r4, #2
 80050a0:	2600      	movs	r6, #0
 80050a2:	42a6      	cmp	r6, r4
 80050a4:	d105      	bne.n	80050b2 <__libc_init_array+0x2e>
 80050a6:	bd70      	pop	{r4, r5, r6, pc}
 80050a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ac:	4798      	blx	r3
 80050ae:	3601      	adds	r6, #1
 80050b0:	e7ee      	b.n	8005090 <__libc_init_array+0xc>
 80050b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b6:	4798      	blx	r3
 80050b8:	3601      	adds	r6, #1
 80050ba:	e7f2      	b.n	80050a2 <__libc_init_array+0x1e>
 80050bc:	0800510c 	.word	0x0800510c
 80050c0:	0800510c 	.word	0x0800510c
 80050c4:	0800510c 	.word	0x0800510c
 80050c8:	08005110 	.word	0x08005110

080050cc <_init>:
 80050cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ce:	bf00      	nop
 80050d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050d2:	bc08      	pop	{r3}
 80050d4:	469e      	mov	lr, r3
 80050d6:	4770      	bx	lr

080050d8 <_fini>:
 80050d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050da:	bf00      	nop
 80050dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050de:	bc08      	pop	{r3}
 80050e0:	469e      	mov	lr, r3
 80050e2:	4770      	bx	lr
